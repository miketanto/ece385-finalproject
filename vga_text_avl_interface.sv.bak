/************************************************************************
Avalon-MM Interface VGA Text mode display

Register Map:
0x000-0x0257 : VRAM, 80x30 (2400 byte, 600 word) raster order (first column then row)
0x258        : control register

VRAM Format:
X->
[ 31  30-24][ 23  22-16][ 15  14-8 ][ 7    6-0 ]
[IV3][CODE3][IV2][CODE2][IV1][CODE1][IV0][CODE0]

IVn = Draw inverse glyph
CODEn = Glyph code from IBM codepage 437

Control Register Format:
[[31-25][24-21][20-17][16-13][ 12-9][ 8-5 ][ 4-1 ][   0    ] 
[[RSVD ][FGD_R][FGD_G][FGD_B][BKG_R][BKG_G][BKG_B][RESERVED]

VSYNC signal = bit which flips on every Vsync (time for new frame), used to synchronize software
BKG_R/G/B = Background color, flipped with foreground when IVn bit is set
FGD_R/G/B = Foreground color, flipped with background when Inv bit is set

************************************************************************/
`define NUM_REGS 601 //80*30 characters / 4 characters per register
`define CTRL_REG 600 //index of control register

module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [9:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs						// VGA HS/VS
);

logic [31:0] LOCAL_REG       [`NUM_REGS]; // Registers
//put other local variables here
//enum logic [2:0] {State,Next_State,Ready};
logic pix_clk,blank,sync;
integer i;
//Declare submodules..e.g. VGA controller, ROMS, etc
vga_controller v(.Clk(CLK), 
					   .Reset(RESET),     // reset signal
                  .hs(hs),        // Horizontal sync pulse.  Active low
					   .vs(vs),        // Vertical sync pulse.  Active low
						.pixel_clk(pix_clk), // 25 MHz pixel clock output
						.blank(blank),     // Blanking interval indicator.  Active low.
						.sync(sync),      // Composite Sync signal.  Active low.  We don't use it in this lab,
					   .DrawX(drawX),     // horizontal coordinate
						.DrawY(drawY) 
                  );
						
font_rom f0( .addr(fontrow),
			  .data(data)
				);

// Read and write from AVL interface to register block, note that READ waitstate = 1, so this should be in always_ff
always_ff @(posedge CLK) begin
 
	if (AVL_CS && AVL_WRITE) begin
	case(AVL_BYTE_EN)
		4'b1111:
			LOCAL_REG[AVL_ADDR]<=AVL_WRITEDATA;
		4'b1100:
			LOCAL_REG[AVL_ADDR][31:16]<=AVL_WRITEDATA[31:16];	
		4'b0011:
			LOCAL_REG[AVL_ADDR][15:0]<=AVL_WRITEDATA[15:0];	
		4'b1000:
			LOCAL_REG[AVL_ADDR][31:24]<=AVL_WRITEDATA[31:24];
		4'b0100:
			LOCAL_REG[AVL_ADDR][23:16]<=AVL_WRITEDATA[23:16];
		4'b0010:
			LOCAL_REG[AVL_ADDR][15:8]<=AVL_WRITEDATA[15:8];
		4'b0001:
			LOCAL_REG[AVL_ADDR][7:0]<=AVL_WRITEDATA[7:0];
			// Write each byte only if the corresponding byte enable is 1
//		LOCAL_REG[AVL_ADDR][7:0]   <= AVL_BYTE_EN[0] ? AVL_WRITEDATA[7:0]   : LOCAL_REG[AVL_ADDR][7:0];
//		LOCAL_REG[AVL_ADDR][15:8]  <= AVL_BYTE_EN[1] ? AVL_WRITEDATA[15:8]  : LOCAL_REG[AVL_ADDR][15:8];
//		LOCAL_REG[AVL_ADDR][23:16] <= AVL_BYTE_EN[2] ? AVL_WRITEDATA[23:16] : LOCAL_REG[AVL_ADDR][23:16];
//		LOCAL_REG[AVL_ADDR][31:24] <= AVL_BYTE_EN[3] ? AVL_WRITEDATA[31:24] : LOCAL_REG[AVL_ADDR][31:24];
	endcase
	end
	else if (AVL_CS && AVL_READ) begin
		AVL_READDATA<=LOCAL_REG[AVL_ADDR];
		end
//	else if(RESET) begin
//		for(i=0;i<`NUM_REGS;i=i+1)begin
//			LOCAL_REG[i]<=32'b0;
//			end
//			end
		else;
end

//handle drawing (may either be combinational or sequential - or both).
logic [11:0] currChar;
logic [9:0]	drawX,drawY;
logic [3:0] back_R,back_G,back_B, front_R,front_G,front_B;
logic [9:0] vram;
logic [1:0] char;
logic B;
logic [7:0]	data;
logic [10:0] fontrow;
logic [7:0] CHAR;
logic Inv;

//Address 2400 bytes
assign currChar=drawX[9:3]+(drawY[9:4]*80);
//Convert to 600 words for VRAM access
assign vram=currChar[11:2];
//Getting the character from the words
assign char=currChar[1:0];

assign B=data[7-drawX[2:0]];

assign front_R=LOCAL_REG[`CTRL_REG][24:21];
assign front_G=LOCAL_REG[`CTRL_REG][20:17];
assign front_B=LOCAL_REG[`CTRL_REG][16:13];
assign back_R=LOCAL_REG[`CTRL_REG][12:9];
assign back_G=LOCAL_REG[`CTRL_REG][8:5];
assign back_B=LOCAL_REG[`CTRL_REG][4:1];

always_comb
	begin
		case(char)
		2'b00:begin
				CHAR=LOCAL_REG[vram][7:0];
				end
		2'b01:begin
				CHAR=LOCAL_REG[vram][15:8];
				end
		2'b10:begin
				CHAR=LOCAL_REG[vram][23:16];
				end
		2'b11:begin
				CHAR=LOCAL_REG[vram][31:24];
				end
//		default:begin
//					CHAR=8'b0;
//					end
		endcase
	end
assign fontrow=CHAR[6:0]*16+drawY[3:0];
assign Inv=CHAR[7];
		
always_ff@(posedge pix_clk)//no glitching
	begin
	
	if(~blank)
		begin
			red<=4'b0;
			green<=4'b0;
			blue<=4'b0;
		end 
	
	else if(B^Inv)
		begin 
			red<=front_R;
			blue<=front_B;
			green<=front_G;
		end
		else begin
			red<=back_R;
			blue<=back_B;
			green<=back_G;
		end
	end
		
endmodule
