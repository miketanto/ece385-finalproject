
finalproject2.elf:     file format elf32-littlenios2
finalproject2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x000059f0 memsz 0x000059f0 flags r-x
    LOAD off    0x00006a10 vaddr 0x0c005a10 paddr 0x0c00747c align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008ee8 vaddr 0x0c008ee8 paddr 0x0c008ee8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000579c  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0c0059cc  0c0059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0c005a10  0c00747c  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  0c008ee8  0c008ee8  00008ee8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0000847c  2**0
                  CONTENTS
  7 .sdram        00000000  0c00903c  0c00903c  0000847c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000847c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a70  00000000  00000000  000084a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016658  00000000  00000000  00008f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006123  00000000  00000000  0001f568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006aa0  00000000  00000000  0002568b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001604  00000000  00000000  0002c12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002837  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002ff67  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00034a44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003774e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037751  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003775d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003775e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003775f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00037763  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00037767  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003776b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00037776  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00037781  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0003778c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  00037795  2**0
                  CONTENTS, READONLY
 30 .jdi          00005018  00000000  00000000  000377c2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00091195  00000000  00000000  0003c7da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c0059cc l    d  .rodata	00000000 .rodata
0c005a10 l    d  .rwdata	00000000 .rwdata
0c008ee8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c00903c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../finalproject2_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0c000400 l     F .text	00000008 __fp_unlock
0c000414 l     F .text	0000019c __sinit.part.1
0c0005b0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0c005a10 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
0c0030a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c0031b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c0031e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c0032d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c0033bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c0034a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c003684 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c00746c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c003928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c003a64 l     F .text	00000034 alt_dev_reg
0c0063e4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c003d58 l     F .text	0000020c altera_avalon_jtag_uart_irq
0c003f64 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c00459c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c004934 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c004d94 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c004ef4 l     F .text	0000003c alt_get_errno
0c004f30 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c008f10 g     O .bss	00000004 alt_instruction_exception_handler
0c002e70 g     F .text	00000054 _isatty_r
0c0035c0 g     F .text	0000007c alt_main
0c000294 g     F .text	000000c0 _puts_r
0c008f3c g     O .bss	00000100 alt_irq
0c002b98 g     F .text	00000060 _lseek_r
0c00747c g       *ABS*	00000000 __flash_rwdata_start
0c00903c g       *ABS*	00000000 __alt_heap_start
0c00214c g     F .text	0000005c __sseek
0c000760 g     F .text	00000010 __sinit
0c0005b8 g     F .text	00000078 __sfmoreglue
0c003660 g     F .text	00000024 __malloc_unlock
0c001838 g     F .text	0000015c memmove
0c000748 g     F .text	00000018 _cleanup
0c00531c g     F .text	00000024 altera_nios2_gen2_irq_init
0c000000 g     F .entry	0000000c __reset
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c002e14 g     F .text	0000005c _fstat_r
0c008ef4 g     O .bss	00000004 errno
0c0020c8 g     F .text	00000008 __seofread
0c008efc g     O .bss	00000004 alt_argv
0c00f444 g       *ABS*	00000000 _gp
0c0038f8 g     F .text	00000030 usleep
0c006264 g     O .rwdata	00000180 alt_fd_list
0c005340 g     F .text	00000090 alt_find_dev
0c0016f0 g     F .text	00000148 memcpy
0c000408 g     F .text	0000000c _cleanup_r
0c004e78 g     F .text	0000007c alt_io_redirect
0c0059cc g       *ABS*	00000000 __DTOR_END__
0c000354 g     F .text	00000014 puts
0c00559c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c00415c g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c002fbc g     F .text	00000064 .hidden __udivsi3
0c003310 g     F .text	000000ac isatty
0c008ef0 g     O .bss	00000004 __malloc_top_pad
0c0007b0 g     F .text	000004c8 __sfvwrite_r
0c002020 g     F .text	00000054 _sbrk_r
0c002db4 g     F .text	00000060 _read_r
0c007464 g     O .rwdata	00000004 alt_max_fd
0c0023b8 g     F .text	000000f0 _fclose_r
0c002734 g     F .text	00000030 fflush
0c008eec g     O .bss	00000004 __malloc_max_sbrked_mem
0c0034e4 g     F .text	000000dc lseek
0c007444 g     O .rwdata	00000004 _global_impure_ptr
0c001abc g     F .text	00000564 _realloc_r
0c00903c g       *ABS*	00000000 __bss_end
0c004ca4 g     F .text	000000f0 alt_iic_isr_register
0c005214 g     F .text	00000108 alt_tick
0c000780 g     F .text	00000018 __fp_lock_all
0c004c58 g     F .text	0000004c alt_ic_irq_enabled
0c005178 g     F .text	0000009c alt_alarm_stop
0c008f04 g     O .bss	00000004 alt_irq_active
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c00623c g     O .rwdata	00000028 alt_dev_null
0c004914 g     F .text	00000020 alt_dcache_flush_all
0c00747c g       *ABS*	00000000 __ram_rwdata_end
0c00745c g     O .rwdata	00000008 alt_dev_list
0c003964 g     F .text	00000100 write
0c005a10 g       *ABS*	00000000 __ram_rodata_end
0c00321c g     F .text	000000b8 fstat
0c003020 g     F .text	00000058 .hidden __umodsi3
0c00903c g       *ABS*	00000000 end
0c003c98 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c0059cc g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c004614 g     F .text	0000007c alt_avalon_timer_sc_init
0c004378 g     F .text	00000224 altera_avalon_jtag_uart_write
0c000770 g     F .text	00000004 __sfp_lock_acquire
0c00160c g     F .text	000000e4 memchr
0c002888 g     F .text	00000310 _free_r
0c005818 g     F .text	00000180 __call_exitprocs
0c00744c g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c008f08 g     O .bss	00000004 _alt_tick_rate
0c008f0c g     O .bss	00000004 _alt_nticks
0c0036c0 g     F .text	00000104 read
0c003ad0 g     F .text	00000064 alt_sys_init
0c005700 g     F .text	00000118 __register_exitproc
0c004004 g     F .text	00000068 altera_avalon_jtag_uart_close
0c003078 g     F .text	00000028 .hidden __mulsi3
0c005a10 g       *ABS*	00000000 __ram_rwdata_start
0c0059cc g       *ABS*	00000000 __ram_rodata_start
0c008f14 g     O .bss	00000028 __malloc_current_mallinfo
0c003b34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c0054d8 g     F .text	000000c4 alt_get_fd
0c0047bc g     F .text	00000158 alt_busy_sleep
0c002364 g     F .text	00000054 _close_r
0c005684 g     F .text	0000007c memcmp
0c003bf4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c00903c g       *ABS*	00000000 __alt_stack_base
0c003c44 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c002210 g     F .text	00000154 __swsetup_r
0c000630 g     F .text	00000118 __sfp
0c005e34 g     O .rwdata	00000408 __malloc_av_
0c00077c g     F .text	00000004 __sinit_lock_release
0c002074 g     F .text	00000054 __sread
0c0053d0 g     F .text	00000108 alt_find_file
0c004970 g     F .text	000000a4 alt_dev_llist_insert
0c00363c g     F .text	00000024 __malloc_lock
0c003848 g     F .text	000000b0 sbrk
0c0026d8 g     F .text	0000005c _fflush_r
0c008ee8 g       *ABS*	00000000 __bss_start
0c001994 g     F .text	00000128 memset
0c00026c g     F .text	00000028 main
0c008f00 g     O .bss	00000004 alt_envp
0c008ee8 g     O .bss	00000004 __malloc_max_total_mem
0c003b94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c0021a8 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c0024a8 g     F .text	00000014 fclose
0c000e00 g     F .text	0000080c _malloc_r
0c007468 g     O .rwdata	00000004 alt_errno
0c000c78 g     F .text	000000c4 _fwalk
0c002ec4 g     F .text	00000084 .hidden __divsi3
0c002764 g     F .text	00000124 _malloc_trim_r
0c0059cc g       *ABS*	00000000 __CTOR_END__
0c0059cc g       *ABS*	00000000 __flash_rodata_start
0c0059cc g       *ABS*	00000000 __DTOR_LIST__
0c003a98 g     F .text	00000038 alt_irq_init
0c0037c4 g     F .text	00000084 alt_release_fd
0c005638 g     F .text	00000014 atexit
0c0021b0 g     F .text	00000060 _write_r
0c007448 g     O .rwdata	00000004 _impure_ptr
0c008ef8 g     O .bss	00000004 alt_argc
0c0024bc g     F .text	0000021c __sflush_r
0c004a74 g     F .text	00000060 _do_dtors
0c000020 g       .exceptions	00000000 alt_irq_entry
0c000798 g     F .text	00000018 __fp_unlock_all
0c007454 g     O .rwdata	00000008 alt_fs_list
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c004af4 g     F .text	00000050 alt_ic_isr_register
0c00747c g       *ABS*	00000000 _edata
0c00903c g       *ABS*	00000000 _end
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c00406c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c004bcc g     F .text	0000008c alt_ic_irq_disable
0c0020d0 g     F .text	0000007c __swrite
0c007450 g     O .rwdata	00000004 __malloc_trim_threshold
0c00564c g     F .text	00000038 exit
0c000d3c g     F .text	000000c4 _fwalk_reent
0c002f48 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c000774 g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c005998 g     F .text	00000034 _exit
0c004690 g     F .text	0000012c alt_alarm_start
0c002bf8 g     F .text	000001bc __smakebuf_r
0c000368 g     F .text	00000098 strlen
0c00501c g     F .text	0000015c open
0c004ad4 g     F .text	00000020 alt_icache_flush_all
0c007470 g     O .rwdata	00000004 alt_priority_mask
0c004b44 g     F .text	00000088 alt_ic_irq_enable
0c007474 g     O .rwdata	00000008 alt_alarm_list
0c004a14 g     F .text	00000060 _do_ctors
0c0030dc g     F .text	000000d8 close
0c003424 g     F .text	00000084 alt_load
0c000778 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	00830074 	movhi	r2,3073
 c000140:	10a3cf04 	addi	r2,r2,-28868
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	00830074 	movhi	r2,3073
 c000158:	10a3cf04 	addi	r2,r2,-28868
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a6b317 	ldw	r2,-25908(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a6b317 	ldw	r2,-25908(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	06830034 	movhi	gp,3072
    ori gp, gp, %lo(_gp)
 c00023c:	d6bd1114 	ori	gp,gp,62532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830034 	movhi	r2,3072
    ori r2, r2, %lo(__bss_start)
 c000244:	10a3ba14 	ori	r2,r2,36584

    movhi r3, %hi(__bss_end)
 c000248:	00c30034 	movhi	r3,3072
    ori r3, r3, %lo(__bss_end)
 c00024c:	18e40f14 	ori	r3,r3,36924

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c0034240 	call	c003424 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c0035c00 	call	c0035c0 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <main>:
//	printf("Draw Done: %d",DRAW_DONE);
//	DRAW_START = 0;
//	//FRAME_DONE = 1;
//}

int main(){
 c00026c:	defffe04 	addi	sp,sp,-8
 c000270:	dfc00115 	stw	ra,4(sp)
 c000274:	df000015 	stw	fp,0(sp)
 c000278:	d839883a 	mov	fp,sp
	while(1){
		printf("Test! \n");
 c00027c:	01030034 	movhi	r4,3072
 c000280:	21167304 	addi	r4,r4,22988
 c000284:	c0003540 	call	c000354 <puts>
		usleep(10000);
 c000288:	0109c404 	movi	r4,10000
 c00028c:	c0038f80 	call	c0038f8 <usleep>
		//init_background();
	}
 c000290:	003ffa06 	br	c00027c <__alt_data_end+0xfc00027c>

0c000294 <_puts_r>:
 c000294:	defff604 	addi	sp,sp,-40
 c000298:	dc000715 	stw	r16,28(sp)
 c00029c:	2021883a 	mov	r16,r4
 c0002a0:	2809883a 	mov	r4,r5
 c0002a4:	dc400815 	stw	r17,32(sp)
 c0002a8:	dfc00915 	stw	ra,36(sp)
 c0002ac:	2823883a 	mov	r17,r5
 c0002b0:	c0003680 	call	c000368 <strlen>
 c0002b4:	10c00044 	addi	r3,r2,1
 c0002b8:	d8800115 	stw	r2,4(sp)
 c0002bc:	00830034 	movhi	r2,3072
 c0002c0:	10967504 	addi	r2,r2,22996
 c0002c4:	d8800215 	stw	r2,8(sp)
 c0002c8:	00800044 	movi	r2,1
 c0002cc:	d8800315 	stw	r2,12(sp)
 c0002d0:	00800084 	movi	r2,2
 c0002d4:	dc400015 	stw	r17,0(sp)
 c0002d8:	d8c00615 	stw	r3,24(sp)
 c0002dc:	dec00415 	stw	sp,16(sp)
 c0002e0:	d8800515 	stw	r2,20(sp)
 c0002e4:	80000226 	beq	r16,zero,c0002f0 <_puts_r+0x5c>
 c0002e8:	80800e17 	ldw	r2,56(r16)
 c0002ec:	10001426 	beq	r2,zero,c000340 <_puts_r+0xac>
 c0002f0:	81400217 	ldw	r5,8(r16)
 c0002f4:	2880030b 	ldhu	r2,12(r5)
 c0002f8:	10c8000c 	andi	r3,r2,8192
 c0002fc:	1800061e 	bne	r3,zero,c000318 <_puts_r+0x84>
 c000300:	29001917 	ldw	r4,100(r5)
 c000304:	00f7ffc4 	movi	r3,-8193
 c000308:	10880014 	ori	r2,r2,8192
 c00030c:	20c6703a 	and	r3,r4,r3
 c000310:	2880030d 	sth	r2,12(r5)
 c000314:	28c01915 	stw	r3,100(r5)
 c000318:	d9800404 	addi	r6,sp,16
 c00031c:	8009883a 	mov	r4,r16
 c000320:	c0007b00 	call	c0007b0 <__sfvwrite_r>
 c000324:	1000091e 	bne	r2,zero,c00034c <_puts_r+0xb8>
 c000328:	00800284 	movi	r2,10
 c00032c:	dfc00917 	ldw	ra,36(sp)
 c000330:	dc400817 	ldw	r17,32(sp)
 c000334:	dc000717 	ldw	r16,28(sp)
 c000338:	dec00a04 	addi	sp,sp,40
 c00033c:	f800283a 	ret
 c000340:	8009883a 	mov	r4,r16
 c000344:	c0007600 	call	c000760 <__sinit>
 c000348:	003fe906 	br	c0002f0 <__alt_data_end+0xfc0002f0>
 c00034c:	00bfffc4 	movi	r2,-1
 c000350:	003ff606 	br	c00032c <__alt_data_end+0xfc00032c>

0c000354 <puts>:
 c000354:	00830034 	movhi	r2,3072
 c000358:	109d1204 	addi	r2,r2,29768
 c00035c:	200b883a 	mov	r5,r4
 c000360:	11000017 	ldw	r4,0(r2)
 c000364:	c0002941 	jmpi	c000294 <_puts_r>

0c000368 <strlen>:
 c000368:	208000cc 	andi	r2,r4,3
 c00036c:	10002026 	beq	r2,zero,c0003f0 <strlen+0x88>
 c000370:	20800007 	ldb	r2,0(r4)
 c000374:	10002026 	beq	r2,zero,c0003f8 <strlen+0x90>
 c000378:	2005883a 	mov	r2,r4
 c00037c:	00000206 	br	c000388 <strlen+0x20>
 c000380:	10c00007 	ldb	r3,0(r2)
 c000384:	18001826 	beq	r3,zero,c0003e8 <strlen+0x80>
 c000388:	10800044 	addi	r2,r2,1
 c00038c:	10c000cc 	andi	r3,r2,3
 c000390:	183ffb1e 	bne	r3,zero,c000380 <__alt_data_end+0xfc000380>
 c000394:	10c00017 	ldw	r3,0(r2)
 c000398:	01ffbff4 	movhi	r7,65279
 c00039c:	39ffbfc4 	addi	r7,r7,-257
 c0003a0:	00ca303a 	nor	r5,zero,r3
 c0003a4:	01a02074 	movhi	r6,32897
 c0003a8:	19c7883a 	add	r3,r3,r7
 c0003ac:	31a02004 	addi	r6,r6,-32640
 c0003b0:	1946703a 	and	r3,r3,r5
 c0003b4:	1986703a 	and	r3,r3,r6
 c0003b8:	1800091e 	bne	r3,zero,c0003e0 <strlen+0x78>
 c0003bc:	10800104 	addi	r2,r2,4
 c0003c0:	10c00017 	ldw	r3,0(r2)
 c0003c4:	19cb883a 	add	r5,r3,r7
 c0003c8:	00c6303a 	nor	r3,zero,r3
 c0003cc:	28c6703a 	and	r3,r5,r3
 c0003d0:	1986703a 	and	r3,r3,r6
 c0003d4:	183ff926 	beq	r3,zero,c0003bc <__alt_data_end+0xfc0003bc>
 c0003d8:	00000106 	br	c0003e0 <strlen+0x78>
 c0003dc:	10800044 	addi	r2,r2,1
 c0003e0:	10c00007 	ldb	r3,0(r2)
 c0003e4:	183ffd1e 	bne	r3,zero,c0003dc <__alt_data_end+0xfc0003dc>
 c0003e8:	1105c83a 	sub	r2,r2,r4
 c0003ec:	f800283a 	ret
 c0003f0:	2005883a 	mov	r2,r4
 c0003f4:	003fe706 	br	c000394 <__alt_data_end+0xfc000394>
 c0003f8:	0005883a 	mov	r2,zero
 c0003fc:	f800283a 	ret

0c000400 <__fp_unlock>:
 c000400:	0005883a 	mov	r2,zero
 c000404:	f800283a 	ret

0c000408 <_cleanup_r>:
 c000408:	01430034 	movhi	r5,3072
 c00040c:	2948ee04 	addi	r5,r5,9144
 c000410:	c000d3c1 	jmpi	c000d3c <_fwalk_reent>

0c000414 <__sinit.part.1>:
 c000414:	defff704 	addi	sp,sp,-36
 c000418:	00c30034 	movhi	r3,3072
 c00041c:	dfc00815 	stw	ra,32(sp)
 c000420:	ddc00715 	stw	r23,28(sp)
 c000424:	dd800615 	stw	r22,24(sp)
 c000428:	dd400515 	stw	r21,20(sp)
 c00042c:	dd000415 	stw	r20,16(sp)
 c000430:	dcc00315 	stw	r19,12(sp)
 c000434:	dc800215 	stw	r18,8(sp)
 c000438:	dc400115 	stw	r17,4(sp)
 c00043c:	dc000015 	stw	r16,0(sp)
 c000440:	18c10204 	addi	r3,r3,1032
 c000444:	24000117 	ldw	r16,4(r4)
 c000448:	20c00f15 	stw	r3,60(r4)
 c00044c:	2080bb04 	addi	r2,r4,748
 c000450:	00c000c4 	movi	r3,3
 c000454:	20c0b915 	stw	r3,740(r4)
 c000458:	2080ba15 	stw	r2,744(r4)
 c00045c:	2000b815 	stw	zero,736(r4)
 c000460:	05c00204 	movi	r23,8
 c000464:	00800104 	movi	r2,4
 c000468:	2025883a 	mov	r18,r4
 c00046c:	b80d883a 	mov	r6,r23
 c000470:	81001704 	addi	r4,r16,92
 c000474:	000b883a 	mov	r5,zero
 c000478:	80000015 	stw	zero,0(r16)
 c00047c:	80000115 	stw	zero,4(r16)
 c000480:	80000215 	stw	zero,8(r16)
 c000484:	8080030d 	sth	r2,12(r16)
 c000488:	80001915 	stw	zero,100(r16)
 c00048c:	8000038d 	sth	zero,14(r16)
 c000490:	80000415 	stw	zero,16(r16)
 c000494:	80000515 	stw	zero,20(r16)
 c000498:	80000615 	stw	zero,24(r16)
 c00049c:	c0019940 	call	c001994 <memset>
 c0004a0:	05830034 	movhi	r22,3072
 c0004a4:	94400217 	ldw	r17,8(r18)
 c0004a8:	05430034 	movhi	r21,3072
 c0004ac:	05030034 	movhi	r20,3072
 c0004b0:	04c30034 	movhi	r19,3072
 c0004b4:	b5881d04 	addi	r22,r22,8308
 c0004b8:	ad483404 	addi	r21,r21,8400
 c0004bc:	a5085304 	addi	r20,r20,8524
 c0004c0:	9cc86a04 	addi	r19,r19,8616
 c0004c4:	85800815 	stw	r22,32(r16)
 c0004c8:	85400915 	stw	r21,36(r16)
 c0004cc:	85000a15 	stw	r20,40(r16)
 c0004d0:	84c00b15 	stw	r19,44(r16)
 c0004d4:	84000715 	stw	r16,28(r16)
 c0004d8:	00800284 	movi	r2,10
 c0004dc:	8880030d 	sth	r2,12(r17)
 c0004e0:	00800044 	movi	r2,1
 c0004e4:	b80d883a 	mov	r6,r23
 c0004e8:	89001704 	addi	r4,r17,92
 c0004ec:	000b883a 	mov	r5,zero
 c0004f0:	88000015 	stw	zero,0(r17)
 c0004f4:	88000115 	stw	zero,4(r17)
 c0004f8:	88000215 	stw	zero,8(r17)
 c0004fc:	88001915 	stw	zero,100(r17)
 c000500:	8880038d 	sth	r2,14(r17)
 c000504:	88000415 	stw	zero,16(r17)
 c000508:	88000515 	stw	zero,20(r17)
 c00050c:	88000615 	stw	zero,24(r17)
 c000510:	c0019940 	call	c001994 <memset>
 c000514:	94000317 	ldw	r16,12(r18)
 c000518:	00800484 	movi	r2,18
 c00051c:	8c400715 	stw	r17,28(r17)
 c000520:	8d800815 	stw	r22,32(r17)
 c000524:	8d400915 	stw	r21,36(r17)
 c000528:	8d000a15 	stw	r20,40(r17)
 c00052c:	8cc00b15 	stw	r19,44(r17)
 c000530:	8080030d 	sth	r2,12(r16)
 c000534:	00800084 	movi	r2,2
 c000538:	80000015 	stw	zero,0(r16)
 c00053c:	80000115 	stw	zero,4(r16)
 c000540:	80000215 	stw	zero,8(r16)
 c000544:	80001915 	stw	zero,100(r16)
 c000548:	8080038d 	sth	r2,14(r16)
 c00054c:	80000415 	stw	zero,16(r16)
 c000550:	80000515 	stw	zero,20(r16)
 c000554:	80000615 	stw	zero,24(r16)
 c000558:	b80d883a 	mov	r6,r23
 c00055c:	000b883a 	mov	r5,zero
 c000560:	81001704 	addi	r4,r16,92
 c000564:	c0019940 	call	c001994 <memset>
 c000568:	00800044 	movi	r2,1
 c00056c:	84000715 	stw	r16,28(r16)
 c000570:	85800815 	stw	r22,32(r16)
 c000574:	85400915 	stw	r21,36(r16)
 c000578:	85000a15 	stw	r20,40(r16)
 c00057c:	84c00b15 	stw	r19,44(r16)
 c000580:	90800e15 	stw	r2,56(r18)
 c000584:	dfc00817 	ldw	ra,32(sp)
 c000588:	ddc00717 	ldw	r23,28(sp)
 c00058c:	dd800617 	ldw	r22,24(sp)
 c000590:	dd400517 	ldw	r21,20(sp)
 c000594:	dd000417 	ldw	r20,16(sp)
 c000598:	dcc00317 	ldw	r19,12(sp)
 c00059c:	dc800217 	ldw	r18,8(sp)
 c0005a0:	dc400117 	ldw	r17,4(sp)
 c0005a4:	dc000017 	ldw	r16,0(sp)
 c0005a8:	dec00904 	addi	sp,sp,36
 c0005ac:	f800283a 	ret

0c0005b0 <__fp_lock>:
 c0005b0:	0005883a 	mov	r2,zero
 c0005b4:	f800283a 	ret

0c0005b8 <__sfmoreglue>:
 c0005b8:	defffc04 	addi	sp,sp,-16
 c0005bc:	dc800215 	stw	r18,8(sp)
 c0005c0:	2825883a 	mov	r18,r5
 c0005c4:	dc000015 	stw	r16,0(sp)
 c0005c8:	01401a04 	movi	r5,104
 c0005cc:	2021883a 	mov	r16,r4
 c0005d0:	913fffc4 	addi	r4,r18,-1
 c0005d4:	dfc00315 	stw	ra,12(sp)
 c0005d8:	dc400115 	stw	r17,4(sp)
 c0005dc:	c0030780 	call	c003078 <__mulsi3>
 c0005e0:	8009883a 	mov	r4,r16
 c0005e4:	11401d04 	addi	r5,r2,116
 c0005e8:	1023883a 	mov	r17,r2
 c0005ec:	c000e000 	call	c000e00 <_malloc_r>
 c0005f0:	1021883a 	mov	r16,r2
 c0005f4:	10000726 	beq	r2,zero,c000614 <__sfmoreglue+0x5c>
 c0005f8:	11000304 	addi	r4,r2,12
 c0005fc:	10000015 	stw	zero,0(r2)
 c000600:	14800115 	stw	r18,4(r2)
 c000604:	11000215 	stw	r4,8(r2)
 c000608:	89801a04 	addi	r6,r17,104
 c00060c:	000b883a 	mov	r5,zero
 c000610:	c0019940 	call	c001994 <memset>
 c000614:	8005883a 	mov	r2,r16
 c000618:	dfc00317 	ldw	ra,12(sp)
 c00061c:	dc800217 	ldw	r18,8(sp)
 c000620:	dc400117 	ldw	r17,4(sp)
 c000624:	dc000017 	ldw	r16,0(sp)
 c000628:	dec00404 	addi	sp,sp,16
 c00062c:	f800283a 	ret

0c000630 <__sfp>:
 c000630:	defffb04 	addi	sp,sp,-20
 c000634:	dc000015 	stw	r16,0(sp)
 c000638:	04030034 	movhi	r16,3072
 c00063c:	841d1104 	addi	r16,r16,29764
 c000640:	dcc00315 	stw	r19,12(sp)
 c000644:	2027883a 	mov	r19,r4
 c000648:	81000017 	ldw	r4,0(r16)
 c00064c:	dfc00415 	stw	ra,16(sp)
 c000650:	dc800215 	stw	r18,8(sp)
 c000654:	20800e17 	ldw	r2,56(r4)
 c000658:	dc400115 	stw	r17,4(sp)
 c00065c:	1000021e 	bne	r2,zero,c000668 <__sfp+0x38>
 c000660:	c0004140 	call	c000414 <__sinit.part.1>
 c000664:	81000017 	ldw	r4,0(r16)
 c000668:	2480b804 	addi	r18,r4,736
 c00066c:	047fffc4 	movi	r17,-1
 c000670:	91000117 	ldw	r4,4(r18)
 c000674:	94000217 	ldw	r16,8(r18)
 c000678:	213fffc4 	addi	r4,r4,-1
 c00067c:	20000a16 	blt	r4,zero,c0006a8 <__sfp+0x78>
 c000680:	8080030f 	ldh	r2,12(r16)
 c000684:	10000c26 	beq	r2,zero,c0006b8 <__sfp+0x88>
 c000688:	80c01d04 	addi	r3,r16,116
 c00068c:	00000206 	br	c000698 <__sfp+0x68>
 c000690:	18bfe60f 	ldh	r2,-104(r3)
 c000694:	10000826 	beq	r2,zero,c0006b8 <__sfp+0x88>
 c000698:	213fffc4 	addi	r4,r4,-1
 c00069c:	1c3ffd04 	addi	r16,r3,-12
 c0006a0:	18c01a04 	addi	r3,r3,104
 c0006a4:	247ffa1e 	bne	r4,r17,c000690 <__alt_data_end+0xfc000690>
 c0006a8:	90800017 	ldw	r2,0(r18)
 c0006ac:	10001d26 	beq	r2,zero,c000724 <__sfp+0xf4>
 c0006b0:	1025883a 	mov	r18,r2
 c0006b4:	003fee06 	br	c000670 <__alt_data_end+0xfc000670>
 c0006b8:	00bfffc4 	movi	r2,-1
 c0006bc:	8080038d 	sth	r2,14(r16)
 c0006c0:	00800044 	movi	r2,1
 c0006c4:	8080030d 	sth	r2,12(r16)
 c0006c8:	80001915 	stw	zero,100(r16)
 c0006cc:	80000015 	stw	zero,0(r16)
 c0006d0:	80000215 	stw	zero,8(r16)
 c0006d4:	80000115 	stw	zero,4(r16)
 c0006d8:	80000415 	stw	zero,16(r16)
 c0006dc:	80000515 	stw	zero,20(r16)
 c0006e0:	80000615 	stw	zero,24(r16)
 c0006e4:	01800204 	movi	r6,8
 c0006e8:	000b883a 	mov	r5,zero
 c0006ec:	81001704 	addi	r4,r16,92
 c0006f0:	c0019940 	call	c001994 <memset>
 c0006f4:	8005883a 	mov	r2,r16
 c0006f8:	80000c15 	stw	zero,48(r16)
 c0006fc:	80000d15 	stw	zero,52(r16)
 c000700:	80001115 	stw	zero,68(r16)
 c000704:	80001215 	stw	zero,72(r16)
 c000708:	dfc00417 	ldw	ra,16(sp)
 c00070c:	dcc00317 	ldw	r19,12(sp)
 c000710:	dc800217 	ldw	r18,8(sp)
 c000714:	dc400117 	ldw	r17,4(sp)
 c000718:	dc000017 	ldw	r16,0(sp)
 c00071c:	dec00504 	addi	sp,sp,20
 c000720:	f800283a 	ret
 c000724:	01400104 	movi	r5,4
 c000728:	9809883a 	mov	r4,r19
 c00072c:	c0005b80 	call	c0005b8 <__sfmoreglue>
 c000730:	90800015 	stw	r2,0(r18)
 c000734:	103fde1e 	bne	r2,zero,c0006b0 <__alt_data_end+0xfc0006b0>
 c000738:	00800304 	movi	r2,12
 c00073c:	98800015 	stw	r2,0(r19)
 c000740:	0005883a 	mov	r2,zero
 c000744:	003ff006 	br	c000708 <__alt_data_end+0xfc000708>

0c000748 <_cleanup>:
 c000748:	00830034 	movhi	r2,3072
 c00074c:	109d1104 	addi	r2,r2,29764
 c000750:	11000017 	ldw	r4,0(r2)
 c000754:	01430034 	movhi	r5,3072
 c000758:	2948ee04 	addi	r5,r5,9144
 c00075c:	c000d3c1 	jmpi	c000d3c <_fwalk_reent>

0c000760 <__sinit>:
 c000760:	20800e17 	ldw	r2,56(r4)
 c000764:	10000126 	beq	r2,zero,c00076c <__sinit+0xc>
 c000768:	f800283a 	ret
 c00076c:	c0004141 	jmpi	c000414 <__sinit.part.1>

0c000770 <__sfp_lock_acquire>:
 c000770:	f800283a 	ret

0c000774 <__sfp_lock_release>:
 c000774:	f800283a 	ret

0c000778 <__sinit_lock_acquire>:
 c000778:	f800283a 	ret

0c00077c <__sinit_lock_release>:
 c00077c:	f800283a 	ret

0c000780 <__fp_lock_all>:
 c000780:	00830034 	movhi	r2,3072
 c000784:	109d1204 	addi	r2,r2,29768
 c000788:	11000017 	ldw	r4,0(r2)
 c00078c:	01430034 	movhi	r5,3072
 c000790:	29416c04 	addi	r5,r5,1456
 c000794:	c000c781 	jmpi	c000c78 <_fwalk>

0c000798 <__fp_unlock_all>:
 c000798:	00830034 	movhi	r2,3072
 c00079c:	109d1204 	addi	r2,r2,29768
 c0007a0:	11000017 	ldw	r4,0(r2)
 c0007a4:	01430034 	movhi	r5,3072
 c0007a8:	29410004 	addi	r5,r5,1024
 c0007ac:	c000c781 	jmpi	c000c78 <_fwalk>

0c0007b0 <__sfvwrite_r>:
 c0007b0:	30800217 	ldw	r2,8(r6)
 c0007b4:	10006726 	beq	r2,zero,c000954 <__sfvwrite_r+0x1a4>
 c0007b8:	28c0030b 	ldhu	r3,12(r5)
 c0007bc:	defff404 	addi	sp,sp,-48
 c0007c0:	dd400715 	stw	r21,28(sp)
 c0007c4:	dd000615 	stw	r20,24(sp)
 c0007c8:	dc000215 	stw	r16,8(sp)
 c0007cc:	dfc00b15 	stw	ra,44(sp)
 c0007d0:	df000a15 	stw	fp,40(sp)
 c0007d4:	ddc00915 	stw	r23,36(sp)
 c0007d8:	dd800815 	stw	r22,32(sp)
 c0007dc:	dcc00515 	stw	r19,20(sp)
 c0007e0:	dc800415 	stw	r18,16(sp)
 c0007e4:	dc400315 	stw	r17,12(sp)
 c0007e8:	1880020c 	andi	r2,r3,8
 c0007ec:	2821883a 	mov	r16,r5
 c0007f0:	202b883a 	mov	r21,r4
 c0007f4:	3029883a 	mov	r20,r6
 c0007f8:	10002726 	beq	r2,zero,c000898 <__sfvwrite_r+0xe8>
 c0007fc:	28800417 	ldw	r2,16(r5)
 c000800:	10002526 	beq	r2,zero,c000898 <__sfvwrite_r+0xe8>
 c000804:	1880008c 	andi	r2,r3,2
 c000808:	a4400017 	ldw	r17,0(r20)
 c00080c:	10002a26 	beq	r2,zero,c0008b8 <__sfvwrite_r+0x108>
 c000810:	05a00034 	movhi	r22,32768
 c000814:	0027883a 	mov	r19,zero
 c000818:	0025883a 	mov	r18,zero
 c00081c:	b5bf0004 	addi	r22,r22,-1024
 c000820:	980d883a 	mov	r6,r19
 c000824:	a809883a 	mov	r4,r21
 c000828:	90004626 	beq	r18,zero,c000944 <__sfvwrite_r+0x194>
 c00082c:	900f883a 	mov	r7,r18
 c000830:	b480022e 	bgeu	r22,r18,c00083c <__sfvwrite_r+0x8c>
 c000834:	01e00034 	movhi	r7,32768
 c000838:	39ff0004 	addi	r7,r7,-1024
 c00083c:	80800917 	ldw	r2,36(r16)
 c000840:	81400717 	ldw	r5,28(r16)
 c000844:	103ee83a 	callr	r2
 c000848:	00805a0e 	bge	zero,r2,c0009b4 <__sfvwrite_r+0x204>
 c00084c:	a0c00217 	ldw	r3,8(r20)
 c000850:	98a7883a 	add	r19,r19,r2
 c000854:	90a5c83a 	sub	r18,r18,r2
 c000858:	1885c83a 	sub	r2,r3,r2
 c00085c:	a0800215 	stw	r2,8(r20)
 c000860:	103fef1e 	bne	r2,zero,c000820 <__alt_data_end+0xfc000820>
 c000864:	0005883a 	mov	r2,zero
 c000868:	dfc00b17 	ldw	ra,44(sp)
 c00086c:	df000a17 	ldw	fp,40(sp)
 c000870:	ddc00917 	ldw	r23,36(sp)
 c000874:	dd800817 	ldw	r22,32(sp)
 c000878:	dd400717 	ldw	r21,28(sp)
 c00087c:	dd000617 	ldw	r20,24(sp)
 c000880:	dcc00517 	ldw	r19,20(sp)
 c000884:	dc800417 	ldw	r18,16(sp)
 c000888:	dc400317 	ldw	r17,12(sp)
 c00088c:	dc000217 	ldw	r16,8(sp)
 c000890:	dec00c04 	addi	sp,sp,48
 c000894:	f800283a 	ret
 c000898:	800b883a 	mov	r5,r16
 c00089c:	a809883a 	mov	r4,r21
 c0008a0:	c0022100 	call	c002210 <__swsetup_r>
 c0008a4:	1000ee1e 	bne	r2,zero,c000c60 <__sfvwrite_r+0x4b0>
 c0008a8:	80c0030b 	ldhu	r3,12(r16)
 c0008ac:	a4400017 	ldw	r17,0(r20)
 c0008b0:	1880008c 	andi	r2,r3,2
 c0008b4:	103fd61e 	bne	r2,zero,c000810 <__alt_data_end+0xfc000810>
 c0008b8:	1880004c 	andi	r2,r3,1
 c0008bc:	1000421e 	bne	r2,zero,c0009c8 <__sfvwrite_r+0x218>
 c0008c0:	0039883a 	mov	fp,zero
 c0008c4:	0025883a 	mov	r18,zero
 c0008c8:	90001a26 	beq	r18,zero,c000934 <__sfvwrite_r+0x184>
 c0008cc:	1880800c 	andi	r2,r3,512
 c0008d0:	84c00217 	ldw	r19,8(r16)
 c0008d4:	10002126 	beq	r2,zero,c00095c <__sfvwrite_r+0x1ac>
 c0008d8:	982f883a 	mov	r23,r19
 c0008dc:	94c09636 	bltu	r18,r19,c000b38 <__sfvwrite_r+0x388>
 c0008e0:	1881200c 	andi	r2,r3,1152
 c0008e4:	1000a11e 	bne	r2,zero,c000b6c <__sfvwrite_r+0x3bc>
 c0008e8:	81000017 	ldw	r4,0(r16)
 c0008ec:	b80d883a 	mov	r6,r23
 c0008f0:	e00b883a 	mov	r5,fp
 c0008f4:	c0018380 	call	c001838 <memmove>
 c0008f8:	80c00217 	ldw	r3,8(r16)
 c0008fc:	81000017 	ldw	r4,0(r16)
 c000900:	9005883a 	mov	r2,r18
 c000904:	1ce7c83a 	sub	r19,r3,r19
 c000908:	25cf883a 	add	r7,r4,r23
 c00090c:	84c00215 	stw	r19,8(r16)
 c000910:	81c00015 	stw	r7,0(r16)
 c000914:	a0c00217 	ldw	r3,8(r20)
 c000918:	e0b9883a 	add	fp,fp,r2
 c00091c:	90a5c83a 	sub	r18,r18,r2
 c000920:	18a7c83a 	sub	r19,r3,r2
 c000924:	a4c00215 	stw	r19,8(r20)
 c000928:	983fce26 	beq	r19,zero,c000864 <__alt_data_end+0xfc000864>
 c00092c:	80c0030b 	ldhu	r3,12(r16)
 c000930:	903fe61e 	bne	r18,zero,c0008cc <__alt_data_end+0xfc0008cc>
 c000934:	8f000017 	ldw	fp,0(r17)
 c000938:	8c800117 	ldw	r18,4(r17)
 c00093c:	8c400204 	addi	r17,r17,8
 c000940:	003fe106 	br	c0008c8 <__alt_data_end+0xfc0008c8>
 c000944:	8cc00017 	ldw	r19,0(r17)
 c000948:	8c800117 	ldw	r18,4(r17)
 c00094c:	8c400204 	addi	r17,r17,8
 c000950:	003fb306 	br	c000820 <__alt_data_end+0xfc000820>
 c000954:	0005883a 	mov	r2,zero
 c000958:	f800283a 	ret
 c00095c:	81000017 	ldw	r4,0(r16)
 c000960:	80800417 	ldw	r2,16(r16)
 c000964:	11005a36 	bltu	r2,r4,c000ad0 <__sfvwrite_r+0x320>
 c000968:	85c00517 	ldw	r23,20(r16)
 c00096c:	95c05836 	bltu	r18,r23,c000ad0 <__sfvwrite_r+0x320>
 c000970:	00a00034 	movhi	r2,32768
 c000974:	10bfffc4 	addi	r2,r2,-1
 c000978:	9009883a 	mov	r4,r18
 c00097c:	1480012e 	bgeu	r2,r18,c000984 <__sfvwrite_r+0x1d4>
 c000980:	1009883a 	mov	r4,r2
 c000984:	b80b883a 	mov	r5,r23
 c000988:	c002ec40 	call	c002ec4 <__divsi3>
 c00098c:	b80b883a 	mov	r5,r23
 c000990:	1009883a 	mov	r4,r2
 c000994:	c0030780 	call	c003078 <__mulsi3>
 c000998:	81400717 	ldw	r5,28(r16)
 c00099c:	80c00917 	ldw	r3,36(r16)
 c0009a0:	100f883a 	mov	r7,r2
 c0009a4:	e00d883a 	mov	r6,fp
 c0009a8:	a809883a 	mov	r4,r21
 c0009ac:	183ee83a 	callr	r3
 c0009b0:	00bfd816 	blt	zero,r2,c000914 <__alt_data_end+0xfc000914>
 c0009b4:	8080030b 	ldhu	r2,12(r16)
 c0009b8:	10801014 	ori	r2,r2,64
 c0009bc:	8080030d 	sth	r2,12(r16)
 c0009c0:	00bfffc4 	movi	r2,-1
 c0009c4:	003fa806 	br	c000868 <__alt_data_end+0xfc000868>
 c0009c8:	0027883a 	mov	r19,zero
 c0009cc:	0011883a 	mov	r8,zero
 c0009d0:	0039883a 	mov	fp,zero
 c0009d4:	0025883a 	mov	r18,zero
 c0009d8:	90001f26 	beq	r18,zero,c000a58 <__sfvwrite_r+0x2a8>
 c0009dc:	40005a26 	beq	r8,zero,c000b48 <__sfvwrite_r+0x398>
 c0009e0:	982d883a 	mov	r22,r19
 c0009e4:	94c0012e 	bgeu	r18,r19,c0009ec <__sfvwrite_r+0x23c>
 c0009e8:	902d883a 	mov	r22,r18
 c0009ec:	81000017 	ldw	r4,0(r16)
 c0009f0:	80800417 	ldw	r2,16(r16)
 c0009f4:	b02f883a 	mov	r23,r22
 c0009f8:	81c00517 	ldw	r7,20(r16)
 c0009fc:	1100032e 	bgeu	r2,r4,c000a0c <__sfvwrite_r+0x25c>
 c000a00:	80c00217 	ldw	r3,8(r16)
 c000a04:	38c7883a 	add	r3,r7,r3
 c000a08:	1d801816 	blt	r3,r22,c000a6c <__sfvwrite_r+0x2bc>
 c000a0c:	b1c03e16 	blt	r22,r7,c000b08 <__sfvwrite_r+0x358>
 c000a10:	80800917 	ldw	r2,36(r16)
 c000a14:	81400717 	ldw	r5,28(r16)
 c000a18:	e00d883a 	mov	r6,fp
 c000a1c:	da000115 	stw	r8,4(sp)
 c000a20:	a809883a 	mov	r4,r21
 c000a24:	103ee83a 	callr	r2
 c000a28:	102f883a 	mov	r23,r2
 c000a2c:	da000117 	ldw	r8,4(sp)
 c000a30:	00bfe00e 	bge	zero,r2,c0009b4 <__alt_data_end+0xfc0009b4>
 c000a34:	9de7c83a 	sub	r19,r19,r23
 c000a38:	98001f26 	beq	r19,zero,c000ab8 <__sfvwrite_r+0x308>
 c000a3c:	a0800217 	ldw	r2,8(r20)
 c000a40:	e5f9883a 	add	fp,fp,r23
 c000a44:	95e5c83a 	sub	r18,r18,r23
 c000a48:	15efc83a 	sub	r23,r2,r23
 c000a4c:	a5c00215 	stw	r23,8(r20)
 c000a50:	b83f8426 	beq	r23,zero,c000864 <__alt_data_end+0xfc000864>
 c000a54:	903fe11e 	bne	r18,zero,c0009dc <__alt_data_end+0xfc0009dc>
 c000a58:	8f000017 	ldw	fp,0(r17)
 c000a5c:	8c800117 	ldw	r18,4(r17)
 c000a60:	0011883a 	mov	r8,zero
 c000a64:	8c400204 	addi	r17,r17,8
 c000a68:	003fdb06 	br	c0009d8 <__alt_data_end+0xfc0009d8>
 c000a6c:	180d883a 	mov	r6,r3
 c000a70:	e00b883a 	mov	r5,fp
 c000a74:	da000115 	stw	r8,4(sp)
 c000a78:	d8c00015 	stw	r3,0(sp)
 c000a7c:	c0018380 	call	c001838 <memmove>
 c000a80:	d8c00017 	ldw	r3,0(sp)
 c000a84:	80800017 	ldw	r2,0(r16)
 c000a88:	800b883a 	mov	r5,r16
 c000a8c:	a809883a 	mov	r4,r21
 c000a90:	10c5883a 	add	r2,r2,r3
 c000a94:	80800015 	stw	r2,0(r16)
 c000a98:	d8c00015 	stw	r3,0(sp)
 c000a9c:	c0026d80 	call	c0026d8 <_fflush_r>
 c000aa0:	d8c00017 	ldw	r3,0(sp)
 c000aa4:	da000117 	ldw	r8,4(sp)
 c000aa8:	103fc21e 	bne	r2,zero,c0009b4 <__alt_data_end+0xfc0009b4>
 c000aac:	182f883a 	mov	r23,r3
 c000ab0:	9de7c83a 	sub	r19,r19,r23
 c000ab4:	983fe11e 	bne	r19,zero,c000a3c <__alt_data_end+0xfc000a3c>
 c000ab8:	800b883a 	mov	r5,r16
 c000abc:	a809883a 	mov	r4,r21
 c000ac0:	c0026d80 	call	c0026d8 <_fflush_r>
 c000ac4:	103fbb1e 	bne	r2,zero,c0009b4 <__alt_data_end+0xfc0009b4>
 c000ac8:	0011883a 	mov	r8,zero
 c000acc:	003fdb06 	br	c000a3c <__alt_data_end+0xfc000a3c>
 c000ad0:	94c0012e 	bgeu	r18,r19,c000ad8 <__sfvwrite_r+0x328>
 c000ad4:	9027883a 	mov	r19,r18
 c000ad8:	980d883a 	mov	r6,r19
 c000adc:	e00b883a 	mov	r5,fp
 c000ae0:	c0018380 	call	c001838 <memmove>
 c000ae4:	80800217 	ldw	r2,8(r16)
 c000ae8:	80c00017 	ldw	r3,0(r16)
 c000aec:	14c5c83a 	sub	r2,r2,r19
 c000af0:	1cc7883a 	add	r3,r3,r19
 c000af4:	80800215 	stw	r2,8(r16)
 c000af8:	80c00015 	stw	r3,0(r16)
 c000afc:	10004326 	beq	r2,zero,c000c0c <__sfvwrite_r+0x45c>
 c000b00:	9805883a 	mov	r2,r19
 c000b04:	003f8306 	br	c000914 <__alt_data_end+0xfc000914>
 c000b08:	b00d883a 	mov	r6,r22
 c000b0c:	e00b883a 	mov	r5,fp
 c000b10:	da000115 	stw	r8,4(sp)
 c000b14:	c0018380 	call	c001838 <memmove>
 c000b18:	80800217 	ldw	r2,8(r16)
 c000b1c:	80c00017 	ldw	r3,0(r16)
 c000b20:	da000117 	ldw	r8,4(sp)
 c000b24:	1585c83a 	sub	r2,r2,r22
 c000b28:	1dad883a 	add	r22,r3,r22
 c000b2c:	80800215 	stw	r2,8(r16)
 c000b30:	85800015 	stw	r22,0(r16)
 c000b34:	003fbf06 	br	c000a34 <__alt_data_end+0xfc000a34>
 c000b38:	81000017 	ldw	r4,0(r16)
 c000b3c:	9027883a 	mov	r19,r18
 c000b40:	902f883a 	mov	r23,r18
 c000b44:	003f6906 	br	c0008ec <__alt_data_end+0xfc0008ec>
 c000b48:	900d883a 	mov	r6,r18
 c000b4c:	01400284 	movi	r5,10
 c000b50:	e009883a 	mov	r4,fp
 c000b54:	c00160c0 	call	c00160c <memchr>
 c000b58:	10003e26 	beq	r2,zero,c000c54 <__sfvwrite_r+0x4a4>
 c000b5c:	10800044 	addi	r2,r2,1
 c000b60:	1727c83a 	sub	r19,r2,fp
 c000b64:	02000044 	movi	r8,1
 c000b68:	003f9d06 	br	c0009e0 <__alt_data_end+0xfc0009e0>
 c000b6c:	80800517 	ldw	r2,20(r16)
 c000b70:	81400417 	ldw	r5,16(r16)
 c000b74:	81c00017 	ldw	r7,0(r16)
 c000b78:	10a7883a 	add	r19,r2,r2
 c000b7c:	9885883a 	add	r2,r19,r2
 c000b80:	1026d7fa 	srli	r19,r2,31
 c000b84:	396dc83a 	sub	r22,r7,r5
 c000b88:	b1000044 	addi	r4,r22,1
 c000b8c:	9885883a 	add	r2,r19,r2
 c000b90:	1027d07a 	srai	r19,r2,1
 c000b94:	2485883a 	add	r2,r4,r18
 c000b98:	980d883a 	mov	r6,r19
 c000b9c:	9880022e 	bgeu	r19,r2,c000ba8 <__sfvwrite_r+0x3f8>
 c000ba0:	1027883a 	mov	r19,r2
 c000ba4:	100d883a 	mov	r6,r2
 c000ba8:	18c1000c 	andi	r3,r3,1024
 c000bac:	18001c26 	beq	r3,zero,c000c20 <__sfvwrite_r+0x470>
 c000bb0:	300b883a 	mov	r5,r6
 c000bb4:	a809883a 	mov	r4,r21
 c000bb8:	c000e000 	call	c000e00 <_malloc_r>
 c000bbc:	102f883a 	mov	r23,r2
 c000bc0:	10002926 	beq	r2,zero,c000c68 <__sfvwrite_r+0x4b8>
 c000bc4:	81400417 	ldw	r5,16(r16)
 c000bc8:	b00d883a 	mov	r6,r22
 c000bcc:	1009883a 	mov	r4,r2
 c000bd0:	c0016f00 	call	c0016f0 <memcpy>
 c000bd4:	8080030b 	ldhu	r2,12(r16)
 c000bd8:	00fedfc4 	movi	r3,-1153
 c000bdc:	10c4703a 	and	r2,r2,r3
 c000be0:	10802014 	ori	r2,r2,128
 c000be4:	8080030d 	sth	r2,12(r16)
 c000be8:	bd89883a 	add	r4,r23,r22
 c000bec:	9d8fc83a 	sub	r7,r19,r22
 c000bf0:	85c00415 	stw	r23,16(r16)
 c000bf4:	84c00515 	stw	r19,20(r16)
 c000bf8:	81000015 	stw	r4,0(r16)
 c000bfc:	9027883a 	mov	r19,r18
 c000c00:	81c00215 	stw	r7,8(r16)
 c000c04:	902f883a 	mov	r23,r18
 c000c08:	003f3806 	br	c0008ec <__alt_data_end+0xfc0008ec>
 c000c0c:	800b883a 	mov	r5,r16
 c000c10:	a809883a 	mov	r4,r21
 c000c14:	c0026d80 	call	c0026d8 <_fflush_r>
 c000c18:	103fb926 	beq	r2,zero,c000b00 <__alt_data_end+0xfc000b00>
 c000c1c:	003f6506 	br	c0009b4 <__alt_data_end+0xfc0009b4>
 c000c20:	a809883a 	mov	r4,r21
 c000c24:	c001abc0 	call	c001abc <_realloc_r>
 c000c28:	102f883a 	mov	r23,r2
 c000c2c:	103fee1e 	bne	r2,zero,c000be8 <__alt_data_end+0xfc000be8>
 c000c30:	81400417 	ldw	r5,16(r16)
 c000c34:	a809883a 	mov	r4,r21
 c000c38:	c0028880 	call	c002888 <_free_r>
 c000c3c:	8080030b 	ldhu	r2,12(r16)
 c000c40:	00ffdfc4 	movi	r3,-129
 c000c44:	1884703a 	and	r2,r3,r2
 c000c48:	00c00304 	movi	r3,12
 c000c4c:	a8c00015 	stw	r3,0(r21)
 c000c50:	003f5906 	br	c0009b8 <__alt_data_end+0xfc0009b8>
 c000c54:	94c00044 	addi	r19,r18,1
 c000c58:	02000044 	movi	r8,1
 c000c5c:	003f6006 	br	c0009e0 <__alt_data_end+0xfc0009e0>
 c000c60:	00bfffc4 	movi	r2,-1
 c000c64:	003f0006 	br	c000868 <__alt_data_end+0xfc000868>
 c000c68:	00800304 	movi	r2,12
 c000c6c:	a8800015 	stw	r2,0(r21)
 c000c70:	8080030b 	ldhu	r2,12(r16)
 c000c74:	003f5006 	br	c0009b8 <__alt_data_end+0xfc0009b8>

0c000c78 <_fwalk>:
 c000c78:	defff704 	addi	sp,sp,-36
 c000c7c:	dd000415 	stw	r20,16(sp)
 c000c80:	dfc00815 	stw	ra,32(sp)
 c000c84:	ddc00715 	stw	r23,28(sp)
 c000c88:	dd800615 	stw	r22,24(sp)
 c000c8c:	dd400515 	stw	r21,20(sp)
 c000c90:	dcc00315 	stw	r19,12(sp)
 c000c94:	dc800215 	stw	r18,8(sp)
 c000c98:	dc400115 	stw	r17,4(sp)
 c000c9c:	dc000015 	stw	r16,0(sp)
 c000ca0:	2500b804 	addi	r20,r4,736
 c000ca4:	a0002326 	beq	r20,zero,c000d34 <_fwalk+0xbc>
 c000ca8:	282b883a 	mov	r21,r5
 c000cac:	002f883a 	mov	r23,zero
 c000cb0:	05800044 	movi	r22,1
 c000cb4:	04ffffc4 	movi	r19,-1
 c000cb8:	a4400117 	ldw	r17,4(r20)
 c000cbc:	a4800217 	ldw	r18,8(r20)
 c000cc0:	8c7fffc4 	addi	r17,r17,-1
 c000cc4:	88000d16 	blt	r17,zero,c000cfc <_fwalk+0x84>
 c000cc8:	94000304 	addi	r16,r18,12
 c000ccc:	94800384 	addi	r18,r18,14
 c000cd0:	8080000b 	ldhu	r2,0(r16)
 c000cd4:	8c7fffc4 	addi	r17,r17,-1
 c000cd8:	813ffd04 	addi	r4,r16,-12
 c000cdc:	b080042e 	bgeu	r22,r2,c000cf0 <_fwalk+0x78>
 c000ce0:	9080000f 	ldh	r2,0(r18)
 c000ce4:	14c00226 	beq	r2,r19,c000cf0 <_fwalk+0x78>
 c000ce8:	a83ee83a 	callr	r21
 c000cec:	b8aeb03a 	or	r23,r23,r2
 c000cf0:	84001a04 	addi	r16,r16,104
 c000cf4:	94801a04 	addi	r18,r18,104
 c000cf8:	8cfff51e 	bne	r17,r19,c000cd0 <__alt_data_end+0xfc000cd0>
 c000cfc:	a5000017 	ldw	r20,0(r20)
 c000d00:	a03fed1e 	bne	r20,zero,c000cb8 <__alt_data_end+0xfc000cb8>
 c000d04:	b805883a 	mov	r2,r23
 c000d08:	dfc00817 	ldw	ra,32(sp)
 c000d0c:	ddc00717 	ldw	r23,28(sp)
 c000d10:	dd800617 	ldw	r22,24(sp)
 c000d14:	dd400517 	ldw	r21,20(sp)
 c000d18:	dd000417 	ldw	r20,16(sp)
 c000d1c:	dcc00317 	ldw	r19,12(sp)
 c000d20:	dc800217 	ldw	r18,8(sp)
 c000d24:	dc400117 	ldw	r17,4(sp)
 c000d28:	dc000017 	ldw	r16,0(sp)
 c000d2c:	dec00904 	addi	sp,sp,36
 c000d30:	f800283a 	ret
 c000d34:	002f883a 	mov	r23,zero
 c000d38:	003ff206 	br	c000d04 <__alt_data_end+0xfc000d04>

0c000d3c <_fwalk_reent>:
 c000d3c:	defff704 	addi	sp,sp,-36
 c000d40:	dd000415 	stw	r20,16(sp)
 c000d44:	dfc00815 	stw	ra,32(sp)
 c000d48:	ddc00715 	stw	r23,28(sp)
 c000d4c:	dd800615 	stw	r22,24(sp)
 c000d50:	dd400515 	stw	r21,20(sp)
 c000d54:	dcc00315 	stw	r19,12(sp)
 c000d58:	dc800215 	stw	r18,8(sp)
 c000d5c:	dc400115 	stw	r17,4(sp)
 c000d60:	dc000015 	stw	r16,0(sp)
 c000d64:	2500b804 	addi	r20,r4,736
 c000d68:	a0002326 	beq	r20,zero,c000df8 <_fwalk_reent+0xbc>
 c000d6c:	282b883a 	mov	r21,r5
 c000d70:	2027883a 	mov	r19,r4
 c000d74:	002f883a 	mov	r23,zero
 c000d78:	05800044 	movi	r22,1
 c000d7c:	04bfffc4 	movi	r18,-1
 c000d80:	a4400117 	ldw	r17,4(r20)
 c000d84:	a4000217 	ldw	r16,8(r20)
 c000d88:	8c7fffc4 	addi	r17,r17,-1
 c000d8c:	88000c16 	blt	r17,zero,c000dc0 <_fwalk_reent+0x84>
 c000d90:	84000304 	addi	r16,r16,12
 c000d94:	8080000b 	ldhu	r2,0(r16)
 c000d98:	8c7fffc4 	addi	r17,r17,-1
 c000d9c:	817ffd04 	addi	r5,r16,-12
 c000da0:	b080052e 	bgeu	r22,r2,c000db8 <_fwalk_reent+0x7c>
 c000da4:	8080008f 	ldh	r2,2(r16)
 c000da8:	9809883a 	mov	r4,r19
 c000dac:	14800226 	beq	r2,r18,c000db8 <_fwalk_reent+0x7c>
 c000db0:	a83ee83a 	callr	r21
 c000db4:	b8aeb03a 	or	r23,r23,r2
 c000db8:	84001a04 	addi	r16,r16,104
 c000dbc:	8cbff51e 	bne	r17,r18,c000d94 <__alt_data_end+0xfc000d94>
 c000dc0:	a5000017 	ldw	r20,0(r20)
 c000dc4:	a03fee1e 	bne	r20,zero,c000d80 <__alt_data_end+0xfc000d80>
 c000dc8:	b805883a 	mov	r2,r23
 c000dcc:	dfc00817 	ldw	ra,32(sp)
 c000dd0:	ddc00717 	ldw	r23,28(sp)
 c000dd4:	dd800617 	ldw	r22,24(sp)
 c000dd8:	dd400517 	ldw	r21,20(sp)
 c000ddc:	dd000417 	ldw	r20,16(sp)
 c000de0:	dcc00317 	ldw	r19,12(sp)
 c000de4:	dc800217 	ldw	r18,8(sp)
 c000de8:	dc400117 	ldw	r17,4(sp)
 c000dec:	dc000017 	ldw	r16,0(sp)
 c000df0:	dec00904 	addi	sp,sp,36
 c000df4:	f800283a 	ret
 c000df8:	002f883a 	mov	r23,zero
 c000dfc:	003ff206 	br	c000dc8 <__alt_data_end+0xfc000dc8>

0c000e00 <_malloc_r>:
 c000e00:	defff504 	addi	sp,sp,-44
 c000e04:	dc800315 	stw	r18,12(sp)
 c000e08:	dfc00a15 	stw	ra,40(sp)
 c000e0c:	df000915 	stw	fp,36(sp)
 c000e10:	ddc00815 	stw	r23,32(sp)
 c000e14:	dd800715 	stw	r22,28(sp)
 c000e18:	dd400615 	stw	r21,24(sp)
 c000e1c:	dd000515 	stw	r20,20(sp)
 c000e20:	dcc00415 	stw	r19,16(sp)
 c000e24:	dc400215 	stw	r17,8(sp)
 c000e28:	dc000115 	stw	r16,4(sp)
 c000e2c:	288002c4 	addi	r2,r5,11
 c000e30:	00c00584 	movi	r3,22
 c000e34:	2025883a 	mov	r18,r4
 c000e38:	18807f2e 	bgeu	r3,r2,c001038 <_malloc_r+0x238>
 c000e3c:	047ffe04 	movi	r17,-8
 c000e40:	1462703a 	and	r17,r2,r17
 c000e44:	8800a316 	blt	r17,zero,c0010d4 <_malloc_r+0x2d4>
 c000e48:	8940a236 	bltu	r17,r5,c0010d4 <_malloc_r+0x2d4>
 c000e4c:	c00363c0 	call	c00363c <__malloc_lock>
 c000e50:	00807dc4 	movi	r2,503
 c000e54:	1441e92e 	bgeu	r2,r17,c0015fc <_malloc_r+0x7fc>
 c000e58:	8804d27a 	srli	r2,r17,9
 c000e5c:	1000a126 	beq	r2,zero,c0010e4 <_malloc_r+0x2e4>
 c000e60:	00c00104 	movi	r3,4
 c000e64:	18811e36 	bltu	r3,r2,c0012e0 <_malloc_r+0x4e0>
 c000e68:	8804d1ba 	srli	r2,r17,6
 c000e6c:	12000e44 	addi	r8,r2,57
 c000e70:	11c00e04 	addi	r7,r2,56
 c000e74:	4209883a 	add	r4,r8,r8
 c000e78:	04c30034 	movhi	r19,3072
 c000e7c:	2109883a 	add	r4,r4,r4
 c000e80:	9cd78d04 	addi	r19,r19,24116
 c000e84:	2109883a 	add	r4,r4,r4
 c000e88:	9909883a 	add	r4,r19,r4
 c000e8c:	24000117 	ldw	r16,4(r4)
 c000e90:	213ffe04 	addi	r4,r4,-8
 c000e94:	24009726 	beq	r4,r16,c0010f4 <_malloc_r+0x2f4>
 c000e98:	80800117 	ldw	r2,4(r16)
 c000e9c:	01bfff04 	movi	r6,-4
 c000ea0:	014003c4 	movi	r5,15
 c000ea4:	1184703a 	and	r2,r2,r6
 c000ea8:	1447c83a 	sub	r3,r2,r17
 c000eac:	28c00716 	blt	r5,r3,c000ecc <_malloc_r+0xcc>
 c000eb0:	1800920e 	bge	r3,zero,c0010fc <_malloc_r+0x2fc>
 c000eb4:	84000317 	ldw	r16,12(r16)
 c000eb8:	24008e26 	beq	r4,r16,c0010f4 <_malloc_r+0x2f4>
 c000ebc:	80800117 	ldw	r2,4(r16)
 c000ec0:	1184703a 	and	r2,r2,r6
 c000ec4:	1447c83a 	sub	r3,r2,r17
 c000ec8:	28fff90e 	bge	r5,r3,c000eb0 <__alt_data_end+0xfc000eb0>
 c000ecc:	3809883a 	mov	r4,r7
 c000ed0:	01830034 	movhi	r6,3072
 c000ed4:	9c000417 	ldw	r16,16(r19)
 c000ed8:	31978d04 	addi	r6,r6,24116
 c000edc:	32000204 	addi	r8,r6,8
 c000ee0:	82013426 	beq	r16,r8,c0013b4 <_malloc_r+0x5b4>
 c000ee4:	80c00117 	ldw	r3,4(r16)
 c000ee8:	00bfff04 	movi	r2,-4
 c000eec:	188e703a 	and	r7,r3,r2
 c000ef0:	3c45c83a 	sub	r2,r7,r17
 c000ef4:	00c003c4 	movi	r3,15
 c000ef8:	18811f16 	blt	r3,r2,c001378 <_malloc_r+0x578>
 c000efc:	32000515 	stw	r8,20(r6)
 c000f00:	32000415 	stw	r8,16(r6)
 c000f04:	10007f0e 	bge	r2,zero,c001104 <_malloc_r+0x304>
 c000f08:	00807fc4 	movi	r2,511
 c000f0c:	11c0fd36 	bltu	r2,r7,c001304 <_malloc_r+0x504>
 c000f10:	3806d0fa 	srli	r3,r7,3
 c000f14:	01c00044 	movi	r7,1
 c000f18:	30800117 	ldw	r2,4(r6)
 c000f1c:	19400044 	addi	r5,r3,1
 c000f20:	294b883a 	add	r5,r5,r5
 c000f24:	1807d0ba 	srai	r3,r3,2
 c000f28:	294b883a 	add	r5,r5,r5
 c000f2c:	294b883a 	add	r5,r5,r5
 c000f30:	298b883a 	add	r5,r5,r6
 c000f34:	38c6983a 	sll	r3,r7,r3
 c000f38:	29c00017 	ldw	r7,0(r5)
 c000f3c:	2a7ffe04 	addi	r9,r5,-8
 c000f40:	1886b03a 	or	r3,r3,r2
 c000f44:	82400315 	stw	r9,12(r16)
 c000f48:	81c00215 	stw	r7,8(r16)
 c000f4c:	30c00115 	stw	r3,4(r6)
 c000f50:	2c000015 	stw	r16,0(r5)
 c000f54:	3c000315 	stw	r16,12(r7)
 c000f58:	2005d0ba 	srai	r2,r4,2
 c000f5c:	01400044 	movi	r5,1
 c000f60:	288a983a 	sll	r5,r5,r2
 c000f64:	19406f36 	bltu	r3,r5,c001124 <_malloc_r+0x324>
 c000f68:	28c4703a 	and	r2,r5,r3
 c000f6c:	10000a1e 	bne	r2,zero,c000f98 <_malloc_r+0x198>
 c000f70:	00bfff04 	movi	r2,-4
 c000f74:	294b883a 	add	r5,r5,r5
 c000f78:	2088703a 	and	r4,r4,r2
 c000f7c:	28c4703a 	and	r2,r5,r3
 c000f80:	21000104 	addi	r4,r4,4
 c000f84:	1000041e 	bne	r2,zero,c000f98 <_malloc_r+0x198>
 c000f88:	294b883a 	add	r5,r5,r5
 c000f8c:	28c4703a 	and	r2,r5,r3
 c000f90:	21000104 	addi	r4,r4,4
 c000f94:	103ffc26 	beq	r2,zero,c000f88 <__alt_data_end+0xfc000f88>
 c000f98:	02bfff04 	movi	r10,-4
 c000f9c:	024003c4 	movi	r9,15
 c000fa0:	21800044 	addi	r6,r4,1
 c000fa4:	318d883a 	add	r6,r6,r6
 c000fa8:	318d883a 	add	r6,r6,r6
 c000fac:	318d883a 	add	r6,r6,r6
 c000fb0:	998d883a 	add	r6,r19,r6
 c000fb4:	333ffe04 	addi	r12,r6,-8
 c000fb8:	2017883a 	mov	r11,r4
 c000fbc:	31800104 	addi	r6,r6,4
 c000fc0:	34000017 	ldw	r16,0(r6)
 c000fc4:	31fffd04 	addi	r7,r6,-12
 c000fc8:	81c0041e 	bne	r16,r7,c000fdc <_malloc_r+0x1dc>
 c000fcc:	0000fb06 	br	c0013bc <_malloc_r+0x5bc>
 c000fd0:	1801030e 	bge	r3,zero,c0013e0 <_malloc_r+0x5e0>
 c000fd4:	84000317 	ldw	r16,12(r16)
 c000fd8:	81c0f826 	beq	r16,r7,c0013bc <_malloc_r+0x5bc>
 c000fdc:	80800117 	ldw	r2,4(r16)
 c000fe0:	1284703a 	and	r2,r2,r10
 c000fe4:	1447c83a 	sub	r3,r2,r17
 c000fe8:	48fff90e 	bge	r9,r3,c000fd0 <__alt_data_end+0xfc000fd0>
 c000fec:	80800317 	ldw	r2,12(r16)
 c000ff0:	81000217 	ldw	r4,8(r16)
 c000ff4:	89400054 	ori	r5,r17,1
 c000ff8:	81400115 	stw	r5,4(r16)
 c000ffc:	20800315 	stw	r2,12(r4)
 c001000:	11000215 	stw	r4,8(r2)
 c001004:	8463883a 	add	r17,r16,r17
 c001008:	9c400515 	stw	r17,20(r19)
 c00100c:	9c400415 	stw	r17,16(r19)
 c001010:	18800054 	ori	r2,r3,1
 c001014:	88800115 	stw	r2,4(r17)
 c001018:	8a000315 	stw	r8,12(r17)
 c00101c:	8a000215 	stw	r8,8(r17)
 c001020:	88e3883a 	add	r17,r17,r3
 c001024:	88c00015 	stw	r3,0(r17)
 c001028:	9009883a 	mov	r4,r18
 c00102c:	c0036600 	call	c003660 <__malloc_unlock>
 c001030:	80800204 	addi	r2,r16,8
 c001034:	00001b06 	br	c0010a4 <_malloc_r+0x2a4>
 c001038:	04400404 	movi	r17,16
 c00103c:	89402536 	bltu	r17,r5,c0010d4 <_malloc_r+0x2d4>
 c001040:	c00363c0 	call	c00363c <__malloc_lock>
 c001044:	00800184 	movi	r2,6
 c001048:	01000084 	movi	r4,2
 c00104c:	04c30034 	movhi	r19,3072
 c001050:	1085883a 	add	r2,r2,r2
 c001054:	9cd78d04 	addi	r19,r19,24116
 c001058:	1085883a 	add	r2,r2,r2
 c00105c:	9885883a 	add	r2,r19,r2
 c001060:	14000117 	ldw	r16,4(r2)
 c001064:	10fffe04 	addi	r3,r2,-8
 c001068:	80c0d926 	beq	r16,r3,c0013d0 <_malloc_r+0x5d0>
 c00106c:	80c00117 	ldw	r3,4(r16)
 c001070:	81000317 	ldw	r4,12(r16)
 c001074:	00bfff04 	movi	r2,-4
 c001078:	1884703a 	and	r2,r3,r2
 c00107c:	81400217 	ldw	r5,8(r16)
 c001080:	8085883a 	add	r2,r16,r2
 c001084:	10c00117 	ldw	r3,4(r2)
 c001088:	29000315 	stw	r4,12(r5)
 c00108c:	21400215 	stw	r5,8(r4)
 c001090:	18c00054 	ori	r3,r3,1
 c001094:	10c00115 	stw	r3,4(r2)
 c001098:	9009883a 	mov	r4,r18
 c00109c:	c0036600 	call	c003660 <__malloc_unlock>
 c0010a0:	80800204 	addi	r2,r16,8
 c0010a4:	dfc00a17 	ldw	ra,40(sp)
 c0010a8:	df000917 	ldw	fp,36(sp)
 c0010ac:	ddc00817 	ldw	r23,32(sp)
 c0010b0:	dd800717 	ldw	r22,28(sp)
 c0010b4:	dd400617 	ldw	r21,24(sp)
 c0010b8:	dd000517 	ldw	r20,20(sp)
 c0010bc:	dcc00417 	ldw	r19,16(sp)
 c0010c0:	dc800317 	ldw	r18,12(sp)
 c0010c4:	dc400217 	ldw	r17,8(sp)
 c0010c8:	dc000117 	ldw	r16,4(sp)
 c0010cc:	dec00b04 	addi	sp,sp,44
 c0010d0:	f800283a 	ret
 c0010d4:	00800304 	movi	r2,12
 c0010d8:	90800015 	stw	r2,0(r18)
 c0010dc:	0005883a 	mov	r2,zero
 c0010e0:	003ff006 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c0010e4:	01002004 	movi	r4,128
 c0010e8:	02001004 	movi	r8,64
 c0010ec:	01c00fc4 	movi	r7,63
 c0010f0:	003f6106 	br	c000e78 <__alt_data_end+0xfc000e78>
 c0010f4:	4009883a 	mov	r4,r8
 c0010f8:	003f7506 	br	c000ed0 <__alt_data_end+0xfc000ed0>
 c0010fc:	81000317 	ldw	r4,12(r16)
 c001100:	003fde06 	br	c00107c <__alt_data_end+0xfc00107c>
 c001104:	81c5883a 	add	r2,r16,r7
 c001108:	11400117 	ldw	r5,4(r2)
 c00110c:	9009883a 	mov	r4,r18
 c001110:	29400054 	ori	r5,r5,1
 c001114:	11400115 	stw	r5,4(r2)
 c001118:	c0036600 	call	c003660 <__malloc_unlock>
 c00111c:	80800204 	addi	r2,r16,8
 c001120:	003fe006 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c001124:	9c000217 	ldw	r16,8(r19)
 c001128:	00bfff04 	movi	r2,-4
 c00112c:	85800117 	ldw	r22,4(r16)
 c001130:	b0ac703a 	and	r22,r22,r2
 c001134:	b4400336 	bltu	r22,r17,c001144 <_malloc_r+0x344>
 c001138:	b445c83a 	sub	r2,r22,r17
 c00113c:	00c003c4 	movi	r3,15
 c001140:	18805d16 	blt	r3,r2,c0012b8 <_malloc_r+0x4b8>
 c001144:	05c30034 	movhi	r23,3072
 c001148:	00830074 	movhi	r2,3073
 c00114c:	10a3bc04 	addi	r2,r2,-28944
 c001150:	bddd1304 	addi	r23,r23,29772
 c001154:	15400017 	ldw	r21,0(r2)
 c001158:	b8c00017 	ldw	r3,0(r23)
 c00115c:	00bfffc4 	movi	r2,-1
 c001160:	858d883a 	add	r6,r16,r22
 c001164:	8d6b883a 	add	r21,r17,r21
 c001168:	1880ea26 	beq	r3,r2,c001514 <_malloc_r+0x714>
 c00116c:	ad4403c4 	addi	r21,r21,4111
 c001170:	00bc0004 	movi	r2,-4096
 c001174:	a8aa703a 	and	r21,r21,r2
 c001178:	a80b883a 	mov	r5,r21
 c00117c:	9009883a 	mov	r4,r18
 c001180:	d9800015 	stw	r6,0(sp)
 c001184:	c0020200 	call	c002020 <_sbrk_r>
 c001188:	1029883a 	mov	r20,r2
 c00118c:	00bfffc4 	movi	r2,-1
 c001190:	d9800017 	ldw	r6,0(sp)
 c001194:	a080e826 	beq	r20,r2,c001538 <_malloc_r+0x738>
 c001198:	a180a636 	bltu	r20,r6,c001434 <_malloc_r+0x634>
 c00119c:	07030074 	movhi	fp,3073
 c0011a0:	e723c504 	addi	fp,fp,-28908
 c0011a4:	e0800017 	ldw	r2,0(fp)
 c0011a8:	a887883a 	add	r3,r21,r2
 c0011ac:	e0c00015 	stw	r3,0(fp)
 c0011b0:	3500e626 	beq	r6,r20,c00154c <_malloc_r+0x74c>
 c0011b4:	b9000017 	ldw	r4,0(r23)
 c0011b8:	00bfffc4 	movi	r2,-1
 c0011bc:	2080ee26 	beq	r4,r2,c001578 <_malloc_r+0x778>
 c0011c0:	a185c83a 	sub	r2,r20,r6
 c0011c4:	10c5883a 	add	r2,r2,r3
 c0011c8:	e0800015 	stw	r2,0(fp)
 c0011cc:	a0c001cc 	andi	r3,r20,7
 c0011d0:	1800bc26 	beq	r3,zero,c0014c4 <_malloc_r+0x6c4>
 c0011d4:	a0e9c83a 	sub	r20,r20,r3
 c0011d8:	00840204 	movi	r2,4104
 c0011dc:	a5000204 	addi	r20,r20,8
 c0011e0:	10c7c83a 	sub	r3,r2,r3
 c0011e4:	a545883a 	add	r2,r20,r21
 c0011e8:	1083ffcc 	andi	r2,r2,4095
 c0011ec:	18abc83a 	sub	r21,r3,r2
 c0011f0:	a80b883a 	mov	r5,r21
 c0011f4:	9009883a 	mov	r4,r18
 c0011f8:	c0020200 	call	c002020 <_sbrk_r>
 c0011fc:	00ffffc4 	movi	r3,-1
 c001200:	10c0e126 	beq	r2,r3,c001588 <_malloc_r+0x788>
 c001204:	1505c83a 	sub	r2,r2,r20
 c001208:	1545883a 	add	r2,r2,r21
 c00120c:	10800054 	ori	r2,r2,1
 c001210:	e0c00017 	ldw	r3,0(fp)
 c001214:	9d000215 	stw	r20,8(r19)
 c001218:	a0800115 	stw	r2,4(r20)
 c00121c:	a8c7883a 	add	r3,r21,r3
 c001220:	e0c00015 	stw	r3,0(fp)
 c001224:	84c00e26 	beq	r16,r19,c001260 <_malloc_r+0x460>
 c001228:	018003c4 	movi	r6,15
 c00122c:	3580a72e 	bgeu	r6,r22,c0014cc <_malloc_r+0x6cc>
 c001230:	81400117 	ldw	r5,4(r16)
 c001234:	013ffe04 	movi	r4,-8
 c001238:	b0bffd04 	addi	r2,r22,-12
 c00123c:	1104703a 	and	r2,r2,r4
 c001240:	2900004c 	andi	r4,r5,1
 c001244:	2088b03a 	or	r4,r4,r2
 c001248:	81000115 	stw	r4,4(r16)
 c00124c:	01400144 	movi	r5,5
 c001250:	8089883a 	add	r4,r16,r2
 c001254:	21400115 	stw	r5,4(r4)
 c001258:	21400215 	stw	r5,8(r4)
 c00125c:	3080cd36 	bltu	r6,r2,c001594 <_malloc_r+0x794>
 c001260:	00830074 	movhi	r2,3073
 c001264:	10a3bb04 	addi	r2,r2,-28948
 c001268:	11000017 	ldw	r4,0(r2)
 c00126c:	20c0012e 	bgeu	r4,r3,c001274 <_malloc_r+0x474>
 c001270:	10c00015 	stw	r3,0(r2)
 c001274:	00830074 	movhi	r2,3073
 c001278:	10a3ba04 	addi	r2,r2,-28952
 c00127c:	11000017 	ldw	r4,0(r2)
 c001280:	9c000217 	ldw	r16,8(r19)
 c001284:	20c0012e 	bgeu	r4,r3,c00128c <_malloc_r+0x48c>
 c001288:	10c00015 	stw	r3,0(r2)
 c00128c:	80c00117 	ldw	r3,4(r16)
 c001290:	00bfff04 	movi	r2,-4
 c001294:	1886703a 	and	r3,r3,r2
 c001298:	1c45c83a 	sub	r2,r3,r17
 c00129c:	1c400236 	bltu	r3,r17,c0012a8 <_malloc_r+0x4a8>
 c0012a0:	00c003c4 	movi	r3,15
 c0012a4:	18800416 	blt	r3,r2,c0012b8 <_malloc_r+0x4b8>
 c0012a8:	9009883a 	mov	r4,r18
 c0012ac:	c0036600 	call	c003660 <__malloc_unlock>
 c0012b0:	0005883a 	mov	r2,zero
 c0012b4:	003f7b06 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c0012b8:	88c00054 	ori	r3,r17,1
 c0012bc:	80c00115 	stw	r3,4(r16)
 c0012c0:	8463883a 	add	r17,r16,r17
 c0012c4:	10800054 	ori	r2,r2,1
 c0012c8:	9c400215 	stw	r17,8(r19)
 c0012cc:	88800115 	stw	r2,4(r17)
 c0012d0:	9009883a 	mov	r4,r18
 c0012d4:	c0036600 	call	c003660 <__malloc_unlock>
 c0012d8:	80800204 	addi	r2,r16,8
 c0012dc:	003f7106 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c0012e0:	00c00504 	movi	r3,20
 c0012e4:	18804a2e 	bgeu	r3,r2,c001410 <_malloc_r+0x610>
 c0012e8:	00c01504 	movi	r3,84
 c0012ec:	18806e36 	bltu	r3,r2,c0014a8 <_malloc_r+0x6a8>
 c0012f0:	8804d33a 	srli	r2,r17,12
 c0012f4:	12001bc4 	addi	r8,r2,111
 c0012f8:	11c01b84 	addi	r7,r2,110
 c0012fc:	4209883a 	add	r4,r8,r8
 c001300:	003edd06 	br	c000e78 <__alt_data_end+0xfc000e78>
 c001304:	3804d27a 	srli	r2,r7,9
 c001308:	00c00104 	movi	r3,4
 c00130c:	1880442e 	bgeu	r3,r2,c001420 <_malloc_r+0x620>
 c001310:	00c00504 	movi	r3,20
 c001314:	18808136 	bltu	r3,r2,c00151c <_malloc_r+0x71c>
 c001318:	11401704 	addi	r5,r2,92
 c00131c:	10c016c4 	addi	r3,r2,91
 c001320:	294b883a 	add	r5,r5,r5
 c001324:	294b883a 	add	r5,r5,r5
 c001328:	294b883a 	add	r5,r5,r5
 c00132c:	994b883a 	add	r5,r19,r5
 c001330:	28800017 	ldw	r2,0(r5)
 c001334:	01830034 	movhi	r6,3072
 c001338:	297ffe04 	addi	r5,r5,-8
 c00133c:	31978d04 	addi	r6,r6,24116
 c001340:	28806526 	beq	r5,r2,c0014d8 <_malloc_r+0x6d8>
 c001344:	01bfff04 	movi	r6,-4
 c001348:	10c00117 	ldw	r3,4(r2)
 c00134c:	1986703a 	and	r3,r3,r6
 c001350:	38c0022e 	bgeu	r7,r3,c00135c <_malloc_r+0x55c>
 c001354:	10800217 	ldw	r2,8(r2)
 c001358:	28bffb1e 	bne	r5,r2,c001348 <__alt_data_end+0xfc001348>
 c00135c:	11400317 	ldw	r5,12(r2)
 c001360:	98c00117 	ldw	r3,4(r19)
 c001364:	81400315 	stw	r5,12(r16)
 c001368:	80800215 	stw	r2,8(r16)
 c00136c:	2c000215 	stw	r16,8(r5)
 c001370:	14000315 	stw	r16,12(r2)
 c001374:	003ef806 	br	c000f58 <__alt_data_end+0xfc000f58>
 c001378:	88c00054 	ori	r3,r17,1
 c00137c:	80c00115 	stw	r3,4(r16)
 c001380:	8463883a 	add	r17,r16,r17
 c001384:	34400515 	stw	r17,20(r6)
 c001388:	34400415 	stw	r17,16(r6)
 c00138c:	10c00054 	ori	r3,r2,1
 c001390:	8a000315 	stw	r8,12(r17)
 c001394:	8a000215 	stw	r8,8(r17)
 c001398:	88c00115 	stw	r3,4(r17)
 c00139c:	88a3883a 	add	r17,r17,r2
 c0013a0:	88800015 	stw	r2,0(r17)
 c0013a4:	9009883a 	mov	r4,r18
 c0013a8:	c0036600 	call	c003660 <__malloc_unlock>
 c0013ac:	80800204 	addi	r2,r16,8
 c0013b0:	003f3c06 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c0013b4:	30c00117 	ldw	r3,4(r6)
 c0013b8:	003ee706 	br	c000f58 <__alt_data_end+0xfc000f58>
 c0013bc:	5ac00044 	addi	r11,r11,1
 c0013c0:	588000cc 	andi	r2,r11,3
 c0013c4:	31800204 	addi	r6,r6,8
 c0013c8:	103efd1e 	bne	r2,zero,c000fc0 <__alt_data_end+0xfc000fc0>
 c0013cc:	00002406 	br	c001460 <_malloc_r+0x660>
 c0013d0:	14000317 	ldw	r16,12(r2)
 c0013d4:	143f251e 	bne	r2,r16,c00106c <__alt_data_end+0xfc00106c>
 c0013d8:	21000084 	addi	r4,r4,2
 c0013dc:	003ebc06 	br	c000ed0 <__alt_data_end+0xfc000ed0>
 c0013e0:	8085883a 	add	r2,r16,r2
 c0013e4:	10c00117 	ldw	r3,4(r2)
 c0013e8:	81000317 	ldw	r4,12(r16)
 c0013ec:	81400217 	ldw	r5,8(r16)
 c0013f0:	18c00054 	ori	r3,r3,1
 c0013f4:	10c00115 	stw	r3,4(r2)
 c0013f8:	29000315 	stw	r4,12(r5)
 c0013fc:	21400215 	stw	r5,8(r4)
 c001400:	9009883a 	mov	r4,r18
 c001404:	c0036600 	call	c003660 <__malloc_unlock>
 c001408:	80800204 	addi	r2,r16,8
 c00140c:	003f2506 	br	c0010a4 <__alt_data_end+0xfc0010a4>
 c001410:	12001704 	addi	r8,r2,92
 c001414:	11c016c4 	addi	r7,r2,91
 c001418:	4209883a 	add	r4,r8,r8
 c00141c:	003e9606 	br	c000e78 <__alt_data_end+0xfc000e78>
 c001420:	3804d1ba 	srli	r2,r7,6
 c001424:	11400e44 	addi	r5,r2,57
 c001428:	10c00e04 	addi	r3,r2,56
 c00142c:	294b883a 	add	r5,r5,r5
 c001430:	003fbc06 	br	c001324 <__alt_data_end+0xfc001324>
 c001434:	84ff5926 	beq	r16,r19,c00119c <__alt_data_end+0xfc00119c>
 c001438:	00830034 	movhi	r2,3072
 c00143c:	10978d04 	addi	r2,r2,24116
 c001440:	14000217 	ldw	r16,8(r2)
 c001444:	00bfff04 	movi	r2,-4
 c001448:	80c00117 	ldw	r3,4(r16)
 c00144c:	1886703a 	and	r3,r3,r2
 c001450:	003f9106 	br	c001298 <__alt_data_end+0xfc001298>
 c001454:	60800217 	ldw	r2,8(r12)
 c001458:	213fffc4 	addi	r4,r4,-1
 c00145c:	1300651e 	bne	r2,r12,c0015f4 <_malloc_r+0x7f4>
 c001460:	208000cc 	andi	r2,r4,3
 c001464:	633ffe04 	addi	r12,r12,-8
 c001468:	103ffa1e 	bne	r2,zero,c001454 <__alt_data_end+0xfc001454>
 c00146c:	98800117 	ldw	r2,4(r19)
 c001470:	0146303a 	nor	r3,zero,r5
 c001474:	1884703a 	and	r2,r3,r2
 c001478:	98800115 	stw	r2,4(r19)
 c00147c:	294b883a 	add	r5,r5,r5
 c001480:	117f2836 	bltu	r2,r5,c001124 <__alt_data_end+0xfc001124>
 c001484:	283f2726 	beq	r5,zero,c001124 <__alt_data_end+0xfc001124>
 c001488:	2886703a 	and	r3,r5,r2
 c00148c:	5809883a 	mov	r4,r11
 c001490:	183ec31e 	bne	r3,zero,c000fa0 <__alt_data_end+0xfc000fa0>
 c001494:	294b883a 	add	r5,r5,r5
 c001498:	2886703a 	and	r3,r5,r2
 c00149c:	21000104 	addi	r4,r4,4
 c0014a0:	183ffc26 	beq	r3,zero,c001494 <__alt_data_end+0xfc001494>
 c0014a4:	003ebe06 	br	c000fa0 <__alt_data_end+0xfc000fa0>
 c0014a8:	00c05504 	movi	r3,340
 c0014ac:	18801236 	bltu	r3,r2,c0014f8 <_malloc_r+0x6f8>
 c0014b0:	8804d3fa 	srli	r2,r17,15
 c0014b4:	12001e04 	addi	r8,r2,120
 c0014b8:	11c01dc4 	addi	r7,r2,119
 c0014bc:	4209883a 	add	r4,r8,r8
 c0014c0:	003e6d06 	br	c000e78 <__alt_data_end+0xfc000e78>
 c0014c4:	00c40004 	movi	r3,4096
 c0014c8:	003f4606 	br	c0011e4 <__alt_data_end+0xfc0011e4>
 c0014cc:	00800044 	movi	r2,1
 c0014d0:	a0800115 	stw	r2,4(r20)
 c0014d4:	003f7406 	br	c0012a8 <__alt_data_end+0xfc0012a8>
 c0014d8:	1805d0ba 	srai	r2,r3,2
 c0014dc:	01c00044 	movi	r7,1
 c0014e0:	30c00117 	ldw	r3,4(r6)
 c0014e4:	388e983a 	sll	r7,r7,r2
 c0014e8:	2805883a 	mov	r2,r5
 c0014ec:	38c6b03a 	or	r3,r7,r3
 c0014f0:	30c00115 	stw	r3,4(r6)
 c0014f4:	003f9b06 	br	c001364 <__alt_data_end+0xfc001364>
 c0014f8:	00c15504 	movi	r3,1364
 c0014fc:	18801a36 	bltu	r3,r2,c001568 <_malloc_r+0x768>
 c001500:	8804d4ba 	srli	r2,r17,18
 c001504:	12001f44 	addi	r8,r2,125
 c001508:	11c01f04 	addi	r7,r2,124
 c00150c:	4209883a 	add	r4,r8,r8
 c001510:	003e5906 	br	c000e78 <__alt_data_end+0xfc000e78>
 c001514:	ad400404 	addi	r21,r21,16
 c001518:	003f1706 	br	c001178 <__alt_data_end+0xfc001178>
 c00151c:	00c01504 	movi	r3,84
 c001520:	18802336 	bltu	r3,r2,c0015b0 <_malloc_r+0x7b0>
 c001524:	3804d33a 	srli	r2,r7,12
 c001528:	11401bc4 	addi	r5,r2,111
 c00152c:	10c01b84 	addi	r3,r2,110
 c001530:	294b883a 	add	r5,r5,r5
 c001534:	003f7b06 	br	c001324 <__alt_data_end+0xfc001324>
 c001538:	9c000217 	ldw	r16,8(r19)
 c00153c:	00bfff04 	movi	r2,-4
 c001540:	80c00117 	ldw	r3,4(r16)
 c001544:	1886703a 	and	r3,r3,r2
 c001548:	003f5306 	br	c001298 <__alt_data_end+0xfc001298>
 c00154c:	3083ffcc 	andi	r2,r6,4095
 c001550:	103f181e 	bne	r2,zero,c0011b4 <__alt_data_end+0xfc0011b4>
 c001554:	99000217 	ldw	r4,8(r19)
 c001558:	b545883a 	add	r2,r22,r21
 c00155c:	10800054 	ori	r2,r2,1
 c001560:	20800115 	stw	r2,4(r4)
 c001564:	003f3e06 	br	c001260 <__alt_data_end+0xfc001260>
 c001568:	01003f84 	movi	r4,254
 c00156c:	02001fc4 	movi	r8,127
 c001570:	01c01f84 	movi	r7,126
 c001574:	003e4006 	br	c000e78 <__alt_data_end+0xfc000e78>
 c001578:	00830034 	movhi	r2,3072
 c00157c:	109d1304 	addi	r2,r2,29772
 c001580:	15000015 	stw	r20,0(r2)
 c001584:	003f1106 	br	c0011cc <__alt_data_end+0xfc0011cc>
 c001588:	00800044 	movi	r2,1
 c00158c:	002b883a 	mov	r21,zero
 c001590:	003f1f06 	br	c001210 <__alt_data_end+0xfc001210>
 c001594:	81400204 	addi	r5,r16,8
 c001598:	9009883a 	mov	r4,r18
 c00159c:	c0028880 	call	c002888 <_free_r>
 c0015a0:	00830074 	movhi	r2,3073
 c0015a4:	10a3c504 	addi	r2,r2,-28908
 c0015a8:	10c00017 	ldw	r3,0(r2)
 c0015ac:	003f2c06 	br	c001260 <__alt_data_end+0xfc001260>
 c0015b0:	00c05504 	movi	r3,340
 c0015b4:	18800536 	bltu	r3,r2,c0015cc <_malloc_r+0x7cc>
 c0015b8:	3804d3fa 	srli	r2,r7,15
 c0015bc:	11401e04 	addi	r5,r2,120
 c0015c0:	10c01dc4 	addi	r3,r2,119
 c0015c4:	294b883a 	add	r5,r5,r5
 c0015c8:	003f5606 	br	c001324 <__alt_data_end+0xfc001324>
 c0015cc:	00c15504 	movi	r3,1364
 c0015d0:	18800536 	bltu	r3,r2,c0015e8 <_malloc_r+0x7e8>
 c0015d4:	3804d4ba 	srli	r2,r7,18
 c0015d8:	11401f44 	addi	r5,r2,125
 c0015dc:	10c01f04 	addi	r3,r2,124
 c0015e0:	294b883a 	add	r5,r5,r5
 c0015e4:	003f4f06 	br	c001324 <__alt_data_end+0xfc001324>
 c0015e8:	01403f84 	movi	r5,254
 c0015ec:	00c01f84 	movi	r3,126
 c0015f0:	003f4c06 	br	c001324 <__alt_data_end+0xfc001324>
 c0015f4:	98800117 	ldw	r2,4(r19)
 c0015f8:	003fa006 	br	c00147c <__alt_data_end+0xfc00147c>
 c0015fc:	8808d0fa 	srli	r4,r17,3
 c001600:	20800044 	addi	r2,r4,1
 c001604:	1085883a 	add	r2,r2,r2
 c001608:	003e9006 	br	c00104c <__alt_data_end+0xfc00104c>

0c00160c <memchr>:
 c00160c:	208000cc 	andi	r2,r4,3
 c001610:	280f883a 	mov	r7,r5
 c001614:	10003426 	beq	r2,zero,c0016e8 <memchr+0xdc>
 c001618:	30bfffc4 	addi	r2,r6,-1
 c00161c:	30001a26 	beq	r6,zero,c001688 <memchr+0x7c>
 c001620:	20c00003 	ldbu	r3,0(r4)
 c001624:	29803fcc 	andi	r6,r5,255
 c001628:	30c0051e 	bne	r6,r3,c001640 <memchr+0x34>
 c00162c:	00001806 	br	c001690 <memchr+0x84>
 c001630:	10001526 	beq	r2,zero,c001688 <memchr+0x7c>
 c001634:	20c00003 	ldbu	r3,0(r4)
 c001638:	10bfffc4 	addi	r2,r2,-1
 c00163c:	30c01426 	beq	r6,r3,c001690 <memchr+0x84>
 c001640:	21000044 	addi	r4,r4,1
 c001644:	20c000cc 	andi	r3,r4,3
 c001648:	183ff91e 	bne	r3,zero,c001630 <__alt_data_end+0xfc001630>
 c00164c:	020000c4 	movi	r8,3
 c001650:	40801136 	bltu	r8,r2,c001698 <memchr+0x8c>
 c001654:	10000c26 	beq	r2,zero,c001688 <memchr+0x7c>
 c001658:	20c00003 	ldbu	r3,0(r4)
 c00165c:	29403fcc 	andi	r5,r5,255
 c001660:	28c00b26 	beq	r5,r3,c001690 <memchr+0x84>
 c001664:	20c00044 	addi	r3,r4,1
 c001668:	39803fcc 	andi	r6,r7,255
 c00166c:	2089883a 	add	r4,r4,r2
 c001670:	00000306 	br	c001680 <memchr+0x74>
 c001674:	18c00044 	addi	r3,r3,1
 c001678:	197fffc3 	ldbu	r5,-1(r3)
 c00167c:	31400526 	beq	r6,r5,c001694 <memchr+0x88>
 c001680:	1805883a 	mov	r2,r3
 c001684:	20fffb1e 	bne	r4,r3,c001674 <__alt_data_end+0xfc001674>
 c001688:	0005883a 	mov	r2,zero
 c00168c:	f800283a 	ret
 c001690:	2005883a 	mov	r2,r4
 c001694:	f800283a 	ret
 c001698:	28c03fcc 	andi	r3,r5,255
 c00169c:	1812923a 	slli	r9,r3,8
 c0016a0:	02ffbff4 	movhi	r11,65279
 c0016a4:	02a02074 	movhi	r10,32897
 c0016a8:	48d2b03a 	or	r9,r9,r3
 c0016ac:	4806943a 	slli	r3,r9,16
 c0016b0:	5affbfc4 	addi	r11,r11,-257
 c0016b4:	52a02004 	addi	r10,r10,-32640
 c0016b8:	48d2b03a 	or	r9,r9,r3
 c0016bc:	20c00017 	ldw	r3,0(r4)
 c0016c0:	48c6f03a 	xor	r3,r9,r3
 c0016c4:	1acd883a 	add	r6,r3,r11
 c0016c8:	00c6303a 	nor	r3,zero,r3
 c0016cc:	30c6703a 	and	r3,r6,r3
 c0016d0:	1a86703a 	and	r3,r3,r10
 c0016d4:	183fe01e 	bne	r3,zero,c001658 <__alt_data_end+0xfc001658>
 c0016d8:	10bfff04 	addi	r2,r2,-4
 c0016dc:	21000104 	addi	r4,r4,4
 c0016e0:	40bff636 	bltu	r8,r2,c0016bc <__alt_data_end+0xfc0016bc>
 c0016e4:	003fdb06 	br	c001654 <__alt_data_end+0xfc001654>
 c0016e8:	3005883a 	mov	r2,r6
 c0016ec:	003fd706 	br	c00164c <__alt_data_end+0xfc00164c>

0c0016f0 <memcpy>:
 c0016f0:	defffd04 	addi	sp,sp,-12
 c0016f4:	dfc00215 	stw	ra,8(sp)
 c0016f8:	dc400115 	stw	r17,4(sp)
 c0016fc:	dc000015 	stw	r16,0(sp)
 c001700:	00c003c4 	movi	r3,15
 c001704:	2005883a 	mov	r2,r4
 c001708:	1980452e 	bgeu	r3,r6,c001820 <memcpy+0x130>
 c00170c:	2906b03a 	or	r3,r5,r4
 c001710:	18c000cc 	andi	r3,r3,3
 c001714:	1800441e 	bne	r3,zero,c001828 <memcpy+0x138>
 c001718:	347ffc04 	addi	r17,r6,-16
 c00171c:	8822d13a 	srli	r17,r17,4
 c001720:	28c00104 	addi	r3,r5,4
 c001724:	23400104 	addi	r13,r4,4
 c001728:	8820913a 	slli	r16,r17,4
 c00172c:	2b000204 	addi	r12,r5,8
 c001730:	22c00204 	addi	r11,r4,8
 c001734:	84000504 	addi	r16,r16,20
 c001738:	2a800304 	addi	r10,r5,12
 c00173c:	22400304 	addi	r9,r4,12
 c001740:	2c21883a 	add	r16,r5,r16
 c001744:	2811883a 	mov	r8,r5
 c001748:	200f883a 	mov	r7,r4
 c00174c:	41000017 	ldw	r4,0(r8)
 c001750:	1fc00017 	ldw	ra,0(r3)
 c001754:	63c00017 	ldw	r15,0(r12)
 c001758:	39000015 	stw	r4,0(r7)
 c00175c:	53800017 	ldw	r14,0(r10)
 c001760:	6fc00015 	stw	ra,0(r13)
 c001764:	5bc00015 	stw	r15,0(r11)
 c001768:	4b800015 	stw	r14,0(r9)
 c00176c:	18c00404 	addi	r3,r3,16
 c001770:	39c00404 	addi	r7,r7,16
 c001774:	42000404 	addi	r8,r8,16
 c001778:	6b400404 	addi	r13,r13,16
 c00177c:	63000404 	addi	r12,r12,16
 c001780:	5ac00404 	addi	r11,r11,16
 c001784:	52800404 	addi	r10,r10,16
 c001788:	4a400404 	addi	r9,r9,16
 c00178c:	1c3fef1e 	bne	r3,r16,c00174c <__alt_data_end+0xfc00174c>
 c001790:	89c00044 	addi	r7,r17,1
 c001794:	380e913a 	slli	r7,r7,4
 c001798:	310003cc 	andi	r4,r6,15
 c00179c:	02c000c4 	movi	r11,3
 c0017a0:	11c7883a 	add	r3,r2,r7
 c0017a4:	29cb883a 	add	r5,r5,r7
 c0017a8:	5900212e 	bgeu	r11,r4,c001830 <memcpy+0x140>
 c0017ac:	1813883a 	mov	r9,r3
 c0017b0:	2811883a 	mov	r8,r5
 c0017b4:	200f883a 	mov	r7,r4
 c0017b8:	42800017 	ldw	r10,0(r8)
 c0017bc:	4a400104 	addi	r9,r9,4
 c0017c0:	39ffff04 	addi	r7,r7,-4
 c0017c4:	4abfff15 	stw	r10,-4(r9)
 c0017c8:	42000104 	addi	r8,r8,4
 c0017cc:	59fffa36 	bltu	r11,r7,c0017b8 <__alt_data_end+0xfc0017b8>
 c0017d0:	213fff04 	addi	r4,r4,-4
 c0017d4:	2008d0ba 	srli	r4,r4,2
 c0017d8:	318000cc 	andi	r6,r6,3
 c0017dc:	21000044 	addi	r4,r4,1
 c0017e0:	2109883a 	add	r4,r4,r4
 c0017e4:	2109883a 	add	r4,r4,r4
 c0017e8:	1907883a 	add	r3,r3,r4
 c0017ec:	290b883a 	add	r5,r5,r4
 c0017f0:	30000626 	beq	r6,zero,c00180c <memcpy+0x11c>
 c0017f4:	198d883a 	add	r6,r3,r6
 c0017f8:	29c00003 	ldbu	r7,0(r5)
 c0017fc:	18c00044 	addi	r3,r3,1
 c001800:	29400044 	addi	r5,r5,1
 c001804:	19ffffc5 	stb	r7,-1(r3)
 c001808:	19bffb1e 	bne	r3,r6,c0017f8 <__alt_data_end+0xfc0017f8>
 c00180c:	dfc00217 	ldw	ra,8(sp)
 c001810:	dc400117 	ldw	r17,4(sp)
 c001814:	dc000017 	ldw	r16,0(sp)
 c001818:	dec00304 	addi	sp,sp,12
 c00181c:	f800283a 	ret
 c001820:	2007883a 	mov	r3,r4
 c001824:	003ff206 	br	c0017f0 <__alt_data_end+0xfc0017f0>
 c001828:	2007883a 	mov	r3,r4
 c00182c:	003ff106 	br	c0017f4 <__alt_data_end+0xfc0017f4>
 c001830:	200d883a 	mov	r6,r4
 c001834:	003fee06 	br	c0017f0 <__alt_data_end+0xfc0017f0>

0c001838 <memmove>:
 c001838:	2005883a 	mov	r2,r4
 c00183c:	29000b2e 	bgeu	r5,r4,c00186c <memmove+0x34>
 c001840:	298f883a 	add	r7,r5,r6
 c001844:	21c0092e 	bgeu	r4,r7,c00186c <memmove+0x34>
 c001848:	2187883a 	add	r3,r4,r6
 c00184c:	198bc83a 	sub	r5,r3,r6
 c001850:	30004826 	beq	r6,zero,c001974 <memmove+0x13c>
 c001854:	39ffffc4 	addi	r7,r7,-1
 c001858:	39000003 	ldbu	r4,0(r7)
 c00185c:	18ffffc4 	addi	r3,r3,-1
 c001860:	19000005 	stb	r4,0(r3)
 c001864:	28fffb1e 	bne	r5,r3,c001854 <__alt_data_end+0xfc001854>
 c001868:	f800283a 	ret
 c00186c:	00c003c4 	movi	r3,15
 c001870:	1980412e 	bgeu	r3,r6,c001978 <memmove+0x140>
 c001874:	2886b03a 	or	r3,r5,r2
 c001878:	18c000cc 	andi	r3,r3,3
 c00187c:	1800401e 	bne	r3,zero,c001980 <memmove+0x148>
 c001880:	33fffc04 	addi	r15,r6,-16
 c001884:	781ed13a 	srli	r15,r15,4
 c001888:	28c00104 	addi	r3,r5,4
 c00188c:	13400104 	addi	r13,r2,4
 c001890:	781c913a 	slli	r14,r15,4
 c001894:	2b000204 	addi	r12,r5,8
 c001898:	12c00204 	addi	r11,r2,8
 c00189c:	73800504 	addi	r14,r14,20
 c0018a0:	2a800304 	addi	r10,r5,12
 c0018a4:	12400304 	addi	r9,r2,12
 c0018a8:	2b9d883a 	add	r14,r5,r14
 c0018ac:	2811883a 	mov	r8,r5
 c0018b0:	100f883a 	mov	r7,r2
 c0018b4:	41000017 	ldw	r4,0(r8)
 c0018b8:	39c00404 	addi	r7,r7,16
 c0018bc:	18c00404 	addi	r3,r3,16
 c0018c0:	393ffc15 	stw	r4,-16(r7)
 c0018c4:	193ffc17 	ldw	r4,-16(r3)
 c0018c8:	6b400404 	addi	r13,r13,16
 c0018cc:	5ac00404 	addi	r11,r11,16
 c0018d0:	693ffc15 	stw	r4,-16(r13)
 c0018d4:	61000017 	ldw	r4,0(r12)
 c0018d8:	4a400404 	addi	r9,r9,16
 c0018dc:	42000404 	addi	r8,r8,16
 c0018e0:	593ffc15 	stw	r4,-16(r11)
 c0018e4:	51000017 	ldw	r4,0(r10)
 c0018e8:	63000404 	addi	r12,r12,16
 c0018ec:	52800404 	addi	r10,r10,16
 c0018f0:	493ffc15 	stw	r4,-16(r9)
 c0018f4:	1bbfef1e 	bne	r3,r14,c0018b4 <__alt_data_end+0xfc0018b4>
 c0018f8:	79000044 	addi	r4,r15,1
 c0018fc:	2008913a 	slli	r4,r4,4
 c001900:	328003cc 	andi	r10,r6,15
 c001904:	02c000c4 	movi	r11,3
 c001908:	1107883a 	add	r3,r2,r4
 c00190c:	290b883a 	add	r5,r5,r4
 c001910:	5a801e2e 	bgeu	r11,r10,c00198c <memmove+0x154>
 c001914:	1813883a 	mov	r9,r3
 c001918:	2811883a 	mov	r8,r5
 c00191c:	500f883a 	mov	r7,r10
 c001920:	41000017 	ldw	r4,0(r8)
 c001924:	4a400104 	addi	r9,r9,4
 c001928:	39ffff04 	addi	r7,r7,-4
 c00192c:	493fff15 	stw	r4,-4(r9)
 c001930:	42000104 	addi	r8,r8,4
 c001934:	59fffa36 	bltu	r11,r7,c001920 <__alt_data_end+0xfc001920>
 c001938:	513fff04 	addi	r4,r10,-4
 c00193c:	2008d0ba 	srli	r4,r4,2
 c001940:	318000cc 	andi	r6,r6,3
 c001944:	21000044 	addi	r4,r4,1
 c001948:	2109883a 	add	r4,r4,r4
 c00194c:	2109883a 	add	r4,r4,r4
 c001950:	1907883a 	add	r3,r3,r4
 c001954:	290b883a 	add	r5,r5,r4
 c001958:	30000b26 	beq	r6,zero,c001988 <memmove+0x150>
 c00195c:	198d883a 	add	r6,r3,r6
 c001960:	29c00003 	ldbu	r7,0(r5)
 c001964:	18c00044 	addi	r3,r3,1
 c001968:	29400044 	addi	r5,r5,1
 c00196c:	19ffffc5 	stb	r7,-1(r3)
 c001970:	19bffb1e 	bne	r3,r6,c001960 <__alt_data_end+0xfc001960>
 c001974:	f800283a 	ret
 c001978:	1007883a 	mov	r3,r2
 c00197c:	003ff606 	br	c001958 <__alt_data_end+0xfc001958>
 c001980:	1007883a 	mov	r3,r2
 c001984:	003ff506 	br	c00195c <__alt_data_end+0xfc00195c>
 c001988:	f800283a 	ret
 c00198c:	500d883a 	mov	r6,r10
 c001990:	003ff106 	br	c001958 <__alt_data_end+0xfc001958>

0c001994 <memset>:
 c001994:	20c000cc 	andi	r3,r4,3
 c001998:	2005883a 	mov	r2,r4
 c00199c:	18004426 	beq	r3,zero,c001ab0 <memset+0x11c>
 c0019a0:	31ffffc4 	addi	r7,r6,-1
 c0019a4:	30004026 	beq	r6,zero,c001aa8 <memset+0x114>
 c0019a8:	2813883a 	mov	r9,r5
 c0019ac:	200d883a 	mov	r6,r4
 c0019b0:	2007883a 	mov	r3,r4
 c0019b4:	00000406 	br	c0019c8 <memset+0x34>
 c0019b8:	3a3fffc4 	addi	r8,r7,-1
 c0019bc:	31800044 	addi	r6,r6,1
 c0019c0:	38003926 	beq	r7,zero,c001aa8 <memset+0x114>
 c0019c4:	400f883a 	mov	r7,r8
 c0019c8:	18c00044 	addi	r3,r3,1
 c0019cc:	32400005 	stb	r9,0(r6)
 c0019d0:	1a0000cc 	andi	r8,r3,3
 c0019d4:	403ff81e 	bne	r8,zero,c0019b8 <__alt_data_end+0xfc0019b8>
 c0019d8:	010000c4 	movi	r4,3
 c0019dc:	21c02d2e 	bgeu	r4,r7,c001a94 <memset+0x100>
 c0019e0:	29003fcc 	andi	r4,r5,255
 c0019e4:	200c923a 	slli	r6,r4,8
 c0019e8:	3108b03a 	or	r4,r6,r4
 c0019ec:	200c943a 	slli	r6,r4,16
 c0019f0:	218cb03a 	or	r6,r4,r6
 c0019f4:	010003c4 	movi	r4,15
 c0019f8:	21c0182e 	bgeu	r4,r7,c001a5c <memset+0xc8>
 c0019fc:	3b3ffc04 	addi	r12,r7,-16
 c001a00:	6018d13a 	srli	r12,r12,4
 c001a04:	1a000104 	addi	r8,r3,4
 c001a08:	1ac00204 	addi	r11,r3,8
 c001a0c:	6008913a 	slli	r4,r12,4
 c001a10:	1a800304 	addi	r10,r3,12
 c001a14:	1813883a 	mov	r9,r3
 c001a18:	21000504 	addi	r4,r4,20
 c001a1c:	1909883a 	add	r4,r3,r4
 c001a20:	49800015 	stw	r6,0(r9)
 c001a24:	41800015 	stw	r6,0(r8)
 c001a28:	59800015 	stw	r6,0(r11)
 c001a2c:	51800015 	stw	r6,0(r10)
 c001a30:	42000404 	addi	r8,r8,16
 c001a34:	4a400404 	addi	r9,r9,16
 c001a38:	5ac00404 	addi	r11,r11,16
 c001a3c:	52800404 	addi	r10,r10,16
 c001a40:	413ff71e 	bne	r8,r4,c001a20 <__alt_data_end+0xfc001a20>
 c001a44:	63000044 	addi	r12,r12,1
 c001a48:	6018913a 	slli	r12,r12,4
 c001a4c:	39c003cc 	andi	r7,r7,15
 c001a50:	010000c4 	movi	r4,3
 c001a54:	1b07883a 	add	r3,r3,r12
 c001a58:	21c00e2e 	bgeu	r4,r7,c001a94 <memset+0x100>
 c001a5c:	1813883a 	mov	r9,r3
 c001a60:	3811883a 	mov	r8,r7
 c001a64:	010000c4 	movi	r4,3
 c001a68:	49800015 	stw	r6,0(r9)
 c001a6c:	423fff04 	addi	r8,r8,-4
 c001a70:	4a400104 	addi	r9,r9,4
 c001a74:	223ffc36 	bltu	r4,r8,c001a68 <__alt_data_end+0xfc001a68>
 c001a78:	393fff04 	addi	r4,r7,-4
 c001a7c:	2008d0ba 	srli	r4,r4,2
 c001a80:	39c000cc 	andi	r7,r7,3
 c001a84:	21000044 	addi	r4,r4,1
 c001a88:	2109883a 	add	r4,r4,r4
 c001a8c:	2109883a 	add	r4,r4,r4
 c001a90:	1907883a 	add	r3,r3,r4
 c001a94:	38000526 	beq	r7,zero,c001aac <memset+0x118>
 c001a98:	19cf883a 	add	r7,r3,r7
 c001a9c:	19400005 	stb	r5,0(r3)
 c001aa0:	18c00044 	addi	r3,r3,1
 c001aa4:	38fffd1e 	bne	r7,r3,c001a9c <__alt_data_end+0xfc001a9c>
 c001aa8:	f800283a 	ret
 c001aac:	f800283a 	ret
 c001ab0:	2007883a 	mov	r3,r4
 c001ab4:	300f883a 	mov	r7,r6
 c001ab8:	003fc706 	br	c0019d8 <__alt_data_end+0xfc0019d8>

0c001abc <_realloc_r>:
 c001abc:	defff604 	addi	sp,sp,-40
 c001ac0:	dc800215 	stw	r18,8(sp)
 c001ac4:	dfc00915 	stw	ra,36(sp)
 c001ac8:	df000815 	stw	fp,32(sp)
 c001acc:	ddc00715 	stw	r23,28(sp)
 c001ad0:	dd800615 	stw	r22,24(sp)
 c001ad4:	dd400515 	stw	r21,20(sp)
 c001ad8:	dd000415 	stw	r20,16(sp)
 c001adc:	dcc00315 	stw	r19,12(sp)
 c001ae0:	dc400115 	stw	r17,4(sp)
 c001ae4:	dc000015 	stw	r16,0(sp)
 c001ae8:	3025883a 	mov	r18,r6
 c001aec:	2800b726 	beq	r5,zero,c001dcc <_realloc_r+0x310>
 c001af0:	282b883a 	mov	r21,r5
 c001af4:	2029883a 	mov	r20,r4
 c001af8:	c00363c0 	call	c00363c <__malloc_lock>
 c001afc:	a8bfff17 	ldw	r2,-4(r21)
 c001b00:	043fff04 	movi	r16,-4
 c001b04:	90c002c4 	addi	r3,r18,11
 c001b08:	01000584 	movi	r4,22
 c001b0c:	acfffe04 	addi	r19,r21,-8
 c001b10:	1420703a 	and	r16,r2,r16
 c001b14:	20c0332e 	bgeu	r4,r3,c001be4 <_realloc_r+0x128>
 c001b18:	047ffe04 	movi	r17,-8
 c001b1c:	1c62703a 	and	r17,r3,r17
 c001b20:	8807883a 	mov	r3,r17
 c001b24:	88005816 	blt	r17,zero,c001c88 <_realloc_r+0x1cc>
 c001b28:	8c805736 	bltu	r17,r18,c001c88 <_realloc_r+0x1cc>
 c001b2c:	80c0300e 	bge	r16,r3,c001bf0 <_realloc_r+0x134>
 c001b30:	07030034 	movhi	fp,3072
 c001b34:	e7178d04 	addi	fp,fp,24116
 c001b38:	e1c00217 	ldw	r7,8(fp)
 c001b3c:	9c09883a 	add	r4,r19,r16
 c001b40:	22000117 	ldw	r8,4(r4)
 c001b44:	21c06326 	beq	r4,r7,c001cd4 <_realloc_r+0x218>
 c001b48:	017fff84 	movi	r5,-2
 c001b4c:	414a703a 	and	r5,r8,r5
 c001b50:	214b883a 	add	r5,r4,r5
 c001b54:	29800117 	ldw	r6,4(r5)
 c001b58:	3180004c 	andi	r6,r6,1
 c001b5c:	30003f26 	beq	r6,zero,c001c5c <_realloc_r+0x1a0>
 c001b60:	1080004c 	andi	r2,r2,1
 c001b64:	10008326 	beq	r2,zero,c001d74 <_realloc_r+0x2b8>
 c001b68:	900b883a 	mov	r5,r18
 c001b6c:	a009883a 	mov	r4,r20
 c001b70:	c000e000 	call	c000e00 <_malloc_r>
 c001b74:	1025883a 	mov	r18,r2
 c001b78:	10011e26 	beq	r2,zero,c001ff4 <_realloc_r+0x538>
 c001b7c:	a93fff17 	ldw	r4,-4(r21)
 c001b80:	10fffe04 	addi	r3,r2,-8
 c001b84:	00bfff84 	movi	r2,-2
 c001b88:	2084703a 	and	r2,r4,r2
 c001b8c:	9885883a 	add	r2,r19,r2
 c001b90:	1880ee26 	beq	r3,r2,c001f4c <_realloc_r+0x490>
 c001b94:	81bfff04 	addi	r6,r16,-4
 c001b98:	00800904 	movi	r2,36
 c001b9c:	1180b836 	bltu	r2,r6,c001e80 <_realloc_r+0x3c4>
 c001ba0:	00c004c4 	movi	r3,19
 c001ba4:	19809636 	bltu	r3,r6,c001e00 <_realloc_r+0x344>
 c001ba8:	9005883a 	mov	r2,r18
 c001bac:	a807883a 	mov	r3,r21
 c001bb0:	19000017 	ldw	r4,0(r3)
 c001bb4:	11000015 	stw	r4,0(r2)
 c001bb8:	19000117 	ldw	r4,4(r3)
 c001bbc:	11000115 	stw	r4,4(r2)
 c001bc0:	18c00217 	ldw	r3,8(r3)
 c001bc4:	10c00215 	stw	r3,8(r2)
 c001bc8:	a80b883a 	mov	r5,r21
 c001bcc:	a009883a 	mov	r4,r20
 c001bd0:	c0028880 	call	c002888 <_free_r>
 c001bd4:	a009883a 	mov	r4,r20
 c001bd8:	c0036600 	call	c003660 <__malloc_unlock>
 c001bdc:	9005883a 	mov	r2,r18
 c001be0:	00001206 	br	c001c2c <_realloc_r+0x170>
 c001be4:	00c00404 	movi	r3,16
 c001be8:	1823883a 	mov	r17,r3
 c001bec:	003fce06 	br	c001b28 <__alt_data_end+0xfc001b28>
 c001bf0:	a825883a 	mov	r18,r21
 c001bf4:	8445c83a 	sub	r2,r16,r17
 c001bf8:	00c003c4 	movi	r3,15
 c001bfc:	18802636 	bltu	r3,r2,c001c98 <_realloc_r+0x1dc>
 c001c00:	99800117 	ldw	r6,4(r19)
 c001c04:	9c07883a 	add	r3,r19,r16
 c001c08:	3180004c 	andi	r6,r6,1
 c001c0c:	3420b03a 	or	r16,r6,r16
 c001c10:	9c000115 	stw	r16,4(r19)
 c001c14:	18800117 	ldw	r2,4(r3)
 c001c18:	10800054 	ori	r2,r2,1
 c001c1c:	18800115 	stw	r2,4(r3)
 c001c20:	a009883a 	mov	r4,r20
 c001c24:	c0036600 	call	c003660 <__malloc_unlock>
 c001c28:	9005883a 	mov	r2,r18
 c001c2c:	dfc00917 	ldw	ra,36(sp)
 c001c30:	df000817 	ldw	fp,32(sp)
 c001c34:	ddc00717 	ldw	r23,28(sp)
 c001c38:	dd800617 	ldw	r22,24(sp)
 c001c3c:	dd400517 	ldw	r21,20(sp)
 c001c40:	dd000417 	ldw	r20,16(sp)
 c001c44:	dcc00317 	ldw	r19,12(sp)
 c001c48:	dc800217 	ldw	r18,8(sp)
 c001c4c:	dc400117 	ldw	r17,4(sp)
 c001c50:	dc000017 	ldw	r16,0(sp)
 c001c54:	dec00a04 	addi	sp,sp,40
 c001c58:	f800283a 	ret
 c001c5c:	017fff04 	movi	r5,-4
 c001c60:	414a703a 	and	r5,r8,r5
 c001c64:	814d883a 	add	r6,r16,r5
 c001c68:	30c01f16 	blt	r6,r3,c001ce8 <_realloc_r+0x22c>
 c001c6c:	20800317 	ldw	r2,12(r4)
 c001c70:	20c00217 	ldw	r3,8(r4)
 c001c74:	a825883a 	mov	r18,r21
 c001c78:	3021883a 	mov	r16,r6
 c001c7c:	18800315 	stw	r2,12(r3)
 c001c80:	10c00215 	stw	r3,8(r2)
 c001c84:	003fdb06 	br	c001bf4 <__alt_data_end+0xfc001bf4>
 c001c88:	00800304 	movi	r2,12
 c001c8c:	a0800015 	stw	r2,0(r20)
 c001c90:	0005883a 	mov	r2,zero
 c001c94:	003fe506 	br	c001c2c <__alt_data_end+0xfc001c2c>
 c001c98:	98c00117 	ldw	r3,4(r19)
 c001c9c:	9c4b883a 	add	r5,r19,r17
 c001ca0:	11000054 	ori	r4,r2,1
 c001ca4:	18c0004c 	andi	r3,r3,1
 c001ca8:	1c62b03a 	or	r17,r3,r17
 c001cac:	9c400115 	stw	r17,4(r19)
 c001cb0:	29000115 	stw	r4,4(r5)
 c001cb4:	2885883a 	add	r2,r5,r2
 c001cb8:	10c00117 	ldw	r3,4(r2)
 c001cbc:	29400204 	addi	r5,r5,8
 c001cc0:	a009883a 	mov	r4,r20
 c001cc4:	18c00054 	ori	r3,r3,1
 c001cc8:	10c00115 	stw	r3,4(r2)
 c001ccc:	c0028880 	call	c002888 <_free_r>
 c001cd0:	003fd306 	br	c001c20 <__alt_data_end+0xfc001c20>
 c001cd4:	017fff04 	movi	r5,-4
 c001cd8:	414a703a 	and	r5,r8,r5
 c001cdc:	89800404 	addi	r6,r17,16
 c001ce0:	8151883a 	add	r8,r16,r5
 c001ce4:	4180590e 	bge	r8,r6,c001e4c <_realloc_r+0x390>
 c001ce8:	1080004c 	andi	r2,r2,1
 c001cec:	103f9e1e 	bne	r2,zero,c001b68 <__alt_data_end+0xfc001b68>
 c001cf0:	adbffe17 	ldw	r22,-8(r21)
 c001cf4:	00bfff04 	movi	r2,-4
 c001cf8:	9dadc83a 	sub	r22,r19,r22
 c001cfc:	b1800117 	ldw	r6,4(r22)
 c001d00:	3084703a 	and	r2,r6,r2
 c001d04:	20002026 	beq	r4,zero,c001d88 <_realloc_r+0x2cc>
 c001d08:	80af883a 	add	r23,r16,r2
 c001d0c:	b96f883a 	add	r23,r23,r5
 c001d10:	21c05f26 	beq	r4,r7,c001e90 <_realloc_r+0x3d4>
 c001d14:	b8c01c16 	blt	r23,r3,c001d88 <_realloc_r+0x2cc>
 c001d18:	20800317 	ldw	r2,12(r4)
 c001d1c:	20c00217 	ldw	r3,8(r4)
 c001d20:	81bfff04 	addi	r6,r16,-4
 c001d24:	01000904 	movi	r4,36
 c001d28:	18800315 	stw	r2,12(r3)
 c001d2c:	10c00215 	stw	r3,8(r2)
 c001d30:	b0c00217 	ldw	r3,8(r22)
 c001d34:	b0800317 	ldw	r2,12(r22)
 c001d38:	b4800204 	addi	r18,r22,8
 c001d3c:	18800315 	stw	r2,12(r3)
 c001d40:	10c00215 	stw	r3,8(r2)
 c001d44:	21801b36 	bltu	r4,r6,c001db4 <_realloc_r+0x2f8>
 c001d48:	008004c4 	movi	r2,19
 c001d4c:	1180352e 	bgeu	r2,r6,c001e24 <_realloc_r+0x368>
 c001d50:	a8800017 	ldw	r2,0(r21)
 c001d54:	b0800215 	stw	r2,8(r22)
 c001d58:	a8800117 	ldw	r2,4(r21)
 c001d5c:	b0800315 	stw	r2,12(r22)
 c001d60:	008006c4 	movi	r2,27
 c001d64:	11807f36 	bltu	r2,r6,c001f64 <_realloc_r+0x4a8>
 c001d68:	b0800404 	addi	r2,r22,16
 c001d6c:	ad400204 	addi	r21,r21,8
 c001d70:	00002d06 	br	c001e28 <_realloc_r+0x36c>
 c001d74:	adbffe17 	ldw	r22,-8(r21)
 c001d78:	00bfff04 	movi	r2,-4
 c001d7c:	9dadc83a 	sub	r22,r19,r22
 c001d80:	b1000117 	ldw	r4,4(r22)
 c001d84:	2084703a 	and	r2,r4,r2
 c001d88:	b03f7726 	beq	r22,zero,c001b68 <__alt_data_end+0xfc001b68>
 c001d8c:	80af883a 	add	r23,r16,r2
 c001d90:	b8ff7516 	blt	r23,r3,c001b68 <__alt_data_end+0xfc001b68>
 c001d94:	b0800317 	ldw	r2,12(r22)
 c001d98:	b0c00217 	ldw	r3,8(r22)
 c001d9c:	81bfff04 	addi	r6,r16,-4
 c001da0:	01000904 	movi	r4,36
 c001da4:	18800315 	stw	r2,12(r3)
 c001da8:	10c00215 	stw	r3,8(r2)
 c001dac:	b4800204 	addi	r18,r22,8
 c001db0:	21bfe52e 	bgeu	r4,r6,c001d48 <__alt_data_end+0xfc001d48>
 c001db4:	a80b883a 	mov	r5,r21
 c001db8:	9009883a 	mov	r4,r18
 c001dbc:	c0018380 	call	c001838 <memmove>
 c001dc0:	b821883a 	mov	r16,r23
 c001dc4:	b027883a 	mov	r19,r22
 c001dc8:	003f8a06 	br	c001bf4 <__alt_data_end+0xfc001bf4>
 c001dcc:	300b883a 	mov	r5,r6
 c001dd0:	dfc00917 	ldw	ra,36(sp)
 c001dd4:	df000817 	ldw	fp,32(sp)
 c001dd8:	ddc00717 	ldw	r23,28(sp)
 c001ddc:	dd800617 	ldw	r22,24(sp)
 c001de0:	dd400517 	ldw	r21,20(sp)
 c001de4:	dd000417 	ldw	r20,16(sp)
 c001de8:	dcc00317 	ldw	r19,12(sp)
 c001dec:	dc800217 	ldw	r18,8(sp)
 c001df0:	dc400117 	ldw	r17,4(sp)
 c001df4:	dc000017 	ldw	r16,0(sp)
 c001df8:	dec00a04 	addi	sp,sp,40
 c001dfc:	c000e001 	jmpi	c000e00 <_malloc_r>
 c001e00:	a8c00017 	ldw	r3,0(r21)
 c001e04:	90c00015 	stw	r3,0(r18)
 c001e08:	a8c00117 	ldw	r3,4(r21)
 c001e0c:	90c00115 	stw	r3,4(r18)
 c001e10:	00c006c4 	movi	r3,27
 c001e14:	19804536 	bltu	r3,r6,c001f2c <_realloc_r+0x470>
 c001e18:	90800204 	addi	r2,r18,8
 c001e1c:	a8c00204 	addi	r3,r21,8
 c001e20:	003f6306 	br	c001bb0 <__alt_data_end+0xfc001bb0>
 c001e24:	9005883a 	mov	r2,r18
 c001e28:	a8c00017 	ldw	r3,0(r21)
 c001e2c:	b821883a 	mov	r16,r23
 c001e30:	b027883a 	mov	r19,r22
 c001e34:	10c00015 	stw	r3,0(r2)
 c001e38:	a8c00117 	ldw	r3,4(r21)
 c001e3c:	10c00115 	stw	r3,4(r2)
 c001e40:	a8c00217 	ldw	r3,8(r21)
 c001e44:	10c00215 	stw	r3,8(r2)
 c001e48:	003f6a06 	br	c001bf4 <__alt_data_end+0xfc001bf4>
 c001e4c:	9c67883a 	add	r19,r19,r17
 c001e50:	4445c83a 	sub	r2,r8,r17
 c001e54:	e4c00215 	stw	r19,8(fp)
 c001e58:	10800054 	ori	r2,r2,1
 c001e5c:	98800115 	stw	r2,4(r19)
 c001e60:	a8bfff17 	ldw	r2,-4(r21)
 c001e64:	a009883a 	mov	r4,r20
 c001e68:	1080004c 	andi	r2,r2,1
 c001e6c:	1462b03a 	or	r17,r2,r17
 c001e70:	ac7fff15 	stw	r17,-4(r21)
 c001e74:	c0036600 	call	c003660 <__malloc_unlock>
 c001e78:	a805883a 	mov	r2,r21
 c001e7c:	003f6b06 	br	c001c2c <__alt_data_end+0xfc001c2c>
 c001e80:	a80b883a 	mov	r5,r21
 c001e84:	9009883a 	mov	r4,r18
 c001e88:	c0018380 	call	c001838 <memmove>
 c001e8c:	003f4e06 	br	c001bc8 <__alt_data_end+0xfc001bc8>
 c001e90:	89000404 	addi	r4,r17,16
 c001e94:	b93fbc16 	blt	r23,r4,c001d88 <__alt_data_end+0xfc001d88>
 c001e98:	b0800317 	ldw	r2,12(r22)
 c001e9c:	b0c00217 	ldw	r3,8(r22)
 c001ea0:	81bfff04 	addi	r6,r16,-4
 c001ea4:	01000904 	movi	r4,36
 c001ea8:	18800315 	stw	r2,12(r3)
 c001eac:	10c00215 	stw	r3,8(r2)
 c001eb0:	b4800204 	addi	r18,r22,8
 c001eb4:	21804336 	bltu	r4,r6,c001fc4 <_realloc_r+0x508>
 c001eb8:	008004c4 	movi	r2,19
 c001ebc:	11803f2e 	bgeu	r2,r6,c001fbc <_realloc_r+0x500>
 c001ec0:	a8800017 	ldw	r2,0(r21)
 c001ec4:	b0800215 	stw	r2,8(r22)
 c001ec8:	a8800117 	ldw	r2,4(r21)
 c001ecc:	b0800315 	stw	r2,12(r22)
 c001ed0:	008006c4 	movi	r2,27
 c001ed4:	11803f36 	bltu	r2,r6,c001fd4 <_realloc_r+0x518>
 c001ed8:	b0800404 	addi	r2,r22,16
 c001edc:	ad400204 	addi	r21,r21,8
 c001ee0:	a8c00017 	ldw	r3,0(r21)
 c001ee4:	10c00015 	stw	r3,0(r2)
 c001ee8:	a8c00117 	ldw	r3,4(r21)
 c001eec:	10c00115 	stw	r3,4(r2)
 c001ef0:	a8c00217 	ldw	r3,8(r21)
 c001ef4:	10c00215 	stw	r3,8(r2)
 c001ef8:	b447883a 	add	r3,r22,r17
 c001efc:	bc45c83a 	sub	r2,r23,r17
 c001f00:	e0c00215 	stw	r3,8(fp)
 c001f04:	10800054 	ori	r2,r2,1
 c001f08:	18800115 	stw	r2,4(r3)
 c001f0c:	b0800117 	ldw	r2,4(r22)
 c001f10:	a009883a 	mov	r4,r20
 c001f14:	1080004c 	andi	r2,r2,1
 c001f18:	1462b03a 	or	r17,r2,r17
 c001f1c:	b4400115 	stw	r17,4(r22)
 c001f20:	c0036600 	call	c003660 <__malloc_unlock>
 c001f24:	9005883a 	mov	r2,r18
 c001f28:	003f4006 	br	c001c2c <__alt_data_end+0xfc001c2c>
 c001f2c:	a8c00217 	ldw	r3,8(r21)
 c001f30:	90c00215 	stw	r3,8(r18)
 c001f34:	a8c00317 	ldw	r3,12(r21)
 c001f38:	90c00315 	stw	r3,12(r18)
 c001f3c:	30801126 	beq	r6,r2,c001f84 <_realloc_r+0x4c8>
 c001f40:	90800404 	addi	r2,r18,16
 c001f44:	a8c00404 	addi	r3,r21,16
 c001f48:	003f1906 	br	c001bb0 <__alt_data_end+0xfc001bb0>
 c001f4c:	90ffff17 	ldw	r3,-4(r18)
 c001f50:	00bfff04 	movi	r2,-4
 c001f54:	a825883a 	mov	r18,r21
 c001f58:	1884703a 	and	r2,r3,r2
 c001f5c:	80a1883a 	add	r16,r16,r2
 c001f60:	003f2406 	br	c001bf4 <__alt_data_end+0xfc001bf4>
 c001f64:	a8800217 	ldw	r2,8(r21)
 c001f68:	b0800415 	stw	r2,16(r22)
 c001f6c:	a8800317 	ldw	r2,12(r21)
 c001f70:	b0800515 	stw	r2,20(r22)
 c001f74:	31000a26 	beq	r6,r4,c001fa0 <_realloc_r+0x4e4>
 c001f78:	b0800604 	addi	r2,r22,24
 c001f7c:	ad400404 	addi	r21,r21,16
 c001f80:	003fa906 	br	c001e28 <__alt_data_end+0xfc001e28>
 c001f84:	a9000417 	ldw	r4,16(r21)
 c001f88:	90800604 	addi	r2,r18,24
 c001f8c:	a8c00604 	addi	r3,r21,24
 c001f90:	91000415 	stw	r4,16(r18)
 c001f94:	a9000517 	ldw	r4,20(r21)
 c001f98:	91000515 	stw	r4,20(r18)
 c001f9c:	003f0406 	br	c001bb0 <__alt_data_end+0xfc001bb0>
 c001fa0:	a8c00417 	ldw	r3,16(r21)
 c001fa4:	ad400604 	addi	r21,r21,24
 c001fa8:	b0800804 	addi	r2,r22,32
 c001fac:	b0c00615 	stw	r3,24(r22)
 c001fb0:	a8ffff17 	ldw	r3,-4(r21)
 c001fb4:	b0c00715 	stw	r3,28(r22)
 c001fb8:	003f9b06 	br	c001e28 <__alt_data_end+0xfc001e28>
 c001fbc:	9005883a 	mov	r2,r18
 c001fc0:	003fc706 	br	c001ee0 <__alt_data_end+0xfc001ee0>
 c001fc4:	a80b883a 	mov	r5,r21
 c001fc8:	9009883a 	mov	r4,r18
 c001fcc:	c0018380 	call	c001838 <memmove>
 c001fd0:	003fc906 	br	c001ef8 <__alt_data_end+0xfc001ef8>
 c001fd4:	a8800217 	ldw	r2,8(r21)
 c001fd8:	b0800415 	stw	r2,16(r22)
 c001fdc:	a8800317 	ldw	r2,12(r21)
 c001fe0:	b0800515 	stw	r2,20(r22)
 c001fe4:	31000726 	beq	r6,r4,c002004 <_realloc_r+0x548>
 c001fe8:	b0800604 	addi	r2,r22,24
 c001fec:	ad400404 	addi	r21,r21,16
 c001ff0:	003fbb06 	br	c001ee0 <__alt_data_end+0xfc001ee0>
 c001ff4:	a009883a 	mov	r4,r20
 c001ff8:	c0036600 	call	c003660 <__malloc_unlock>
 c001ffc:	0005883a 	mov	r2,zero
 c002000:	003f0a06 	br	c001c2c <__alt_data_end+0xfc001c2c>
 c002004:	a8c00417 	ldw	r3,16(r21)
 c002008:	ad400604 	addi	r21,r21,24
 c00200c:	b0800804 	addi	r2,r22,32
 c002010:	b0c00615 	stw	r3,24(r22)
 c002014:	a8ffff17 	ldw	r3,-4(r21)
 c002018:	b0c00715 	stw	r3,28(r22)
 c00201c:	003fb006 	br	c001ee0 <__alt_data_end+0xfc001ee0>

0c002020 <_sbrk_r>:
 c002020:	defffd04 	addi	sp,sp,-12
 c002024:	dc000015 	stw	r16,0(sp)
 c002028:	04030074 	movhi	r16,3073
 c00202c:	dc400115 	stw	r17,4(sp)
 c002030:	8423bd04 	addi	r16,r16,-28940
 c002034:	2023883a 	mov	r17,r4
 c002038:	2809883a 	mov	r4,r5
 c00203c:	dfc00215 	stw	ra,8(sp)
 c002040:	80000015 	stw	zero,0(r16)
 c002044:	c0038480 	call	c003848 <sbrk>
 c002048:	00ffffc4 	movi	r3,-1
 c00204c:	10c00526 	beq	r2,r3,c002064 <_sbrk_r+0x44>
 c002050:	dfc00217 	ldw	ra,8(sp)
 c002054:	dc400117 	ldw	r17,4(sp)
 c002058:	dc000017 	ldw	r16,0(sp)
 c00205c:	dec00304 	addi	sp,sp,12
 c002060:	f800283a 	ret
 c002064:	80c00017 	ldw	r3,0(r16)
 c002068:	183ff926 	beq	r3,zero,c002050 <__alt_data_end+0xfc002050>
 c00206c:	88c00015 	stw	r3,0(r17)
 c002070:	003ff706 	br	c002050 <__alt_data_end+0xfc002050>

0c002074 <__sread>:
 c002074:	defffe04 	addi	sp,sp,-8
 c002078:	dc000015 	stw	r16,0(sp)
 c00207c:	2821883a 	mov	r16,r5
 c002080:	2940038f 	ldh	r5,14(r5)
 c002084:	dfc00115 	stw	ra,4(sp)
 c002088:	c002db40 	call	c002db4 <_read_r>
 c00208c:	10000716 	blt	r2,zero,c0020ac <__sread+0x38>
 c002090:	80c01417 	ldw	r3,80(r16)
 c002094:	1887883a 	add	r3,r3,r2
 c002098:	80c01415 	stw	r3,80(r16)
 c00209c:	dfc00117 	ldw	ra,4(sp)
 c0020a0:	dc000017 	ldw	r16,0(sp)
 c0020a4:	dec00204 	addi	sp,sp,8
 c0020a8:	f800283a 	ret
 c0020ac:	80c0030b 	ldhu	r3,12(r16)
 c0020b0:	18fbffcc 	andi	r3,r3,61439
 c0020b4:	80c0030d 	sth	r3,12(r16)
 c0020b8:	dfc00117 	ldw	ra,4(sp)
 c0020bc:	dc000017 	ldw	r16,0(sp)
 c0020c0:	dec00204 	addi	sp,sp,8
 c0020c4:	f800283a 	ret

0c0020c8 <__seofread>:
 c0020c8:	0005883a 	mov	r2,zero
 c0020cc:	f800283a 	ret

0c0020d0 <__swrite>:
 c0020d0:	2880030b 	ldhu	r2,12(r5)
 c0020d4:	defffb04 	addi	sp,sp,-20
 c0020d8:	dcc00315 	stw	r19,12(sp)
 c0020dc:	dc800215 	stw	r18,8(sp)
 c0020e0:	dc400115 	stw	r17,4(sp)
 c0020e4:	dc000015 	stw	r16,0(sp)
 c0020e8:	dfc00415 	stw	ra,16(sp)
 c0020ec:	10c0400c 	andi	r3,r2,256
 c0020f0:	2821883a 	mov	r16,r5
 c0020f4:	2023883a 	mov	r17,r4
 c0020f8:	3025883a 	mov	r18,r6
 c0020fc:	3827883a 	mov	r19,r7
 c002100:	18000526 	beq	r3,zero,c002118 <__swrite+0x48>
 c002104:	2940038f 	ldh	r5,14(r5)
 c002108:	01c00084 	movi	r7,2
 c00210c:	000d883a 	mov	r6,zero
 c002110:	c002b980 	call	c002b98 <_lseek_r>
 c002114:	8080030b 	ldhu	r2,12(r16)
 c002118:	8140038f 	ldh	r5,14(r16)
 c00211c:	10bbffcc 	andi	r2,r2,61439
 c002120:	980f883a 	mov	r7,r19
 c002124:	900d883a 	mov	r6,r18
 c002128:	8809883a 	mov	r4,r17
 c00212c:	8080030d 	sth	r2,12(r16)
 c002130:	dfc00417 	ldw	ra,16(sp)
 c002134:	dcc00317 	ldw	r19,12(sp)
 c002138:	dc800217 	ldw	r18,8(sp)
 c00213c:	dc400117 	ldw	r17,4(sp)
 c002140:	dc000017 	ldw	r16,0(sp)
 c002144:	dec00504 	addi	sp,sp,20
 c002148:	c0021b01 	jmpi	c0021b0 <_write_r>

0c00214c <__sseek>:
 c00214c:	defffe04 	addi	sp,sp,-8
 c002150:	dc000015 	stw	r16,0(sp)
 c002154:	2821883a 	mov	r16,r5
 c002158:	2940038f 	ldh	r5,14(r5)
 c00215c:	dfc00115 	stw	ra,4(sp)
 c002160:	c002b980 	call	c002b98 <_lseek_r>
 c002164:	00ffffc4 	movi	r3,-1
 c002168:	10c00826 	beq	r2,r3,c00218c <__sseek+0x40>
 c00216c:	80c0030b 	ldhu	r3,12(r16)
 c002170:	80801415 	stw	r2,80(r16)
 c002174:	18c40014 	ori	r3,r3,4096
 c002178:	80c0030d 	sth	r3,12(r16)
 c00217c:	dfc00117 	ldw	ra,4(sp)
 c002180:	dc000017 	ldw	r16,0(sp)
 c002184:	dec00204 	addi	sp,sp,8
 c002188:	f800283a 	ret
 c00218c:	80c0030b 	ldhu	r3,12(r16)
 c002190:	18fbffcc 	andi	r3,r3,61439
 c002194:	80c0030d 	sth	r3,12(r16)
 c002198:	dfc00117 	ldw	ra,4(sp)
 c00219c:	dc000017 	ldw	r16,0(sp)
 c0021a0:	dec00204 	addi	sp,sp,8
 c0021a4:	f800283a 	ret

0c0021a8 <__sclose>:
 c0021a8:	2940038f 	ldh	r5,14(r5)
 c0021ac:	c0023641 	jmpi	c002364 <_close_r>

0c0021b0 <_write_r>:
 c0021b0:	defffd04 	addi	sp,sp,-12
 c0021b4:	2805883a 	mov	r2,r5
 c0021b8:	dc000015 	stw	r16,0(sp)
 c0021bc:	04030074 	movhi	r16,3073
 c0021c0:	dc400115 	stw	r17,4(sp)
 c0021c4:	300b883a 	mov	r5,r6
 c0021c8:	8423bd04 	addi	r16,r16,-28940
 c0021cc:	2023883a 	mov	r17,r4
 c0021d0:	380d883a 	mov	r6,r7
 c0021d4:	1009883a 	mov	r4,r2
 c0021d8:	dfc00215 	stw	ra,8(sp)
 c0021dc:	80000015 	stw	zero,0(r16)
 c0021e0:	c0039640 	call	c003964 <write>
 c0021e4:	00ffffc4 	movi	r3,-1
 c0021e8:	10c00526 	beq	r2,r3,c002200 <_write_r+0x50>
 c0021ec:	dfc00217 	ldw	ra,8(sp)
 c0021f0:	dc400117 	ldw	r17,4(sp)
 c0021f4:	dc000017 	ldw	r16,0(sp)
 c0021f8:	dec00304 	addi	sp,sp,12
 c0021fc:	f800283a 	ret
 c002200:	80c00017 	ldw	r3,0(r16)
 c002204:	183ff926 	beq	r3,zero,c0021ec <__alt_data_end+0xfc0021ec>
 c002208:	88c00015 	stw	r3,0(r17)
 c00220c:	003ff706 	br	c0021ec <__alt_data_end+0xfc0021ec>

0c002210 <__swsetup_r>:
 c002210:	00830034 	movhi	r2,3072
 c002214:	defffd04 	addi	sp,sp,-12
 c002218:	109d1204 	addi	r2,r2,29768
 c00221c:	dc400115 	stw	r17,4(sp)
 c002220:	2023883a 	mov	r17,r4
 c002224:	11000017 	ldw	r4,0(r2)
 c002228:	dc000015 	stw	r16,0(sp)
 c00222c:	dfc00215 	stw	ra,8(sp)
 c002230:	2821883a 	mov	r16,r5
 c002234:	20000226 	beq	r4,zero,c002240 <__swsetup_r+0x30>
 c002238:	20800e17 	ldw	r2,56(r4)
 c00223c:	10003126 	beq	r2,zero,c002304 <__swsetup_r+0xf4>
 c002240:	8080030b 	ldhu	r2,12(r16)
 c002244:	10c0020c 	andi	r3,r2,8
 c002248:	1009883a 	mov	r4,r2
 c00224c:	18000f26 	beq	r3,zero,c00228c <__swsetup_r+0x7c>
 c002250:	80c00417 	ldw	r3,16(r16)
 c002254:	18001526 	beq	r3,zero,c0022ac <__swsetup_r+0x9c>
 c002258:	1100004c 	andi	r4,r2,1
 c00225c:	20001c1e 	bne	r4,zero,c0022d0 <__swsetup_r+0xc0>
 c002260:	1080008c 	andi	r2,r2,2
 c002264:	1000291e 	bne	r2,zero,c00230c <__swsetup_r+0xfc>
 c002268:	80800517 	ldw	r2,20(r16)
 c00226c:	80800215 	stw	r2,8(r16)
 c002270:	18001c26 	beq	r3,zero,c0022e4 <__swsetup_r+0xd4>
 c002274:	0005883a 	mov	r2,zero
 c002278:	dfc00217 	ldw	ra,8(sp)
 c00227c:	dc400117 	ldw	r17,4(sp)
 c002280:	dc000017 	ldw	r16,0(sp)
 c002284:	dec00304 	addi	sp,sp,12
 c002288:	f800283a 	ret
 c00228c:	2080040c 	andi	r2,r4,16
 c002290:	10002e26 	beq	r2,zero,c00234c <__swsetup_r+0x13c>
 c002294:	2080010c 	andi	r2,r4,4
 c002298:	10001e1e 	bne	r2,zero,c002314 <__swsetup_r+0x104>
 c00229c:	80c00417 	ldw	r3,16(r16)
 c0022a0:	20800214 	ori	r2,r4,8
 c0022a4:	8080030d 	sth	r2,12(r16)
 c0022a8:	183feb1e 	bne	r3,zero,c002258 <__alt_data_end+0xfc002258>
 c0022ac:	1100a00c 	andi	r4,r2,640
 c0022b0:	01408004 	movi	r5,512
 c0022b4:	217fe826 	beq	r4,r5,c002258 <__alt_data_end+0xfc002258>
 c0022b8:	800b883a 	mov	r5,r16
 c0022bc:	8809883a 	mov	r4,r17
 c0022c0:	c002bf80 	call	c002bf8 <__smakebuf_r>
 c0022c4:	8080030b 	ldhu	r2,12(r16)
 c0022c8:	80c00417 	ldw	r3,16(r16)
 c0022cc:	003fe206 	br	c002258 <__alt_data_end+0xfc002258>
 c0022d0:	80800517 	ldw	r2,20(r16)
 c0022d4:	80000215 	stw	zero,8(r16)
 c0022d8:	0085c83a 	sub	r2,zero,r2
 c0022dc:	80800615 	stw	r2,24(r16)
 c0022e0:	183fe41e 	bne	r3,zero,c002274 <__alt_data_end+0xfc002274>
 c0022e4:	80c0030b 	ldhu	r3,12(r16)
 c0022e8:	0005883a 	mov	r2,zero
 c0022ec:	1900200c 	andi	r4,r3,128
 c0022f0:	203fe126 	beq	r4,zero,c002278 <__alt_data_end+0xfc002278>
 c0022f4:	18c01014 	ori	r3,r3,64
 c0022f8:	80c0030d 	sth	r3,12(r16)
 c0022fc:	00bfffc4 	movi	r2,-1
 c002300:	003fdd06 	br	c002278 <__alt_data_end+0xfc002278>
 c002304:	c0007600 	call	c000760 <__sinit>
 c002308:	003fcd06 	br	c002240 <__alt_data_end+0xfc002240>
 c00230c:	0005883a 	mov	r2,zero
 c002310:	003fd606 	br	c00226c <__alt_data_end+0xfc00226c>
 c002314:	81400c17 	ldw	r5,48(r16)
 c002318:	28000626 	beq	r5,zero,c002334 <__swsetup_r+0x124>
 c00231c:	80801004 	addi	r2,r16,64
 c002320:	28800326 	beq	r5,r2,c002330 <__swsetup_r+0x120>
 c002324:	8809883a 	mov	r4,r17
 c002328:	c0028880 	call	c002888 <_free_r>
 c00232c:	8100030b 	ldhu	r4,12(r16)
 c002330:	80000c15 	stw	zero,48(r16)
 c002334:	80c00417 	ldw	r3,16(r16)
 c002338:	00bff6c4 	movi	r2,-37
 c00233c:	1108703a 	and	r4,r2,r4
 c002340:	80000115 	stw	zero,4(r16)
 c002344:	80c00015 	stw	r3,0(r16)
 c002348:	003fd506 	br	c0022a0 <__alt_data_end+0xfc0022a0>
 c00234c:	00800244 	movi	r2,9
 c002350:	88800015 	stw	r2,0(r17)
 c002354:	20801014 	ori	r2,r4,64
 c002358:	8080030d 	sth	r2,12(r16)
 c00235c:	00bfffc4 	movi	r2,-1
 c002360:	003fc506 	br	c002278 <__alt_data_end+0xfc002278>

0c002364 <_close_r>:
 c002364:	defffd04 	addi	sp,sp,-12
 c002368:	dc000015 	stw	r16,0(sp)
 c00236c:	04030074 	movhi	r16,3073
 c002370:	dc400115 	stw	r17,4(sp)
 c002374:	8423bd04 	addi	r16,r16,-28940
 c002378:	2023883a 	mov	r17,r4
 c00237c:	2809883a 	mov	r4,r5
 c002380:	dfc00215 	stw	ra,8(sp)
 c002384:	80000015 	stw	zero,0(r16)
 c002388:	c0030dc0 	call	c0030dc <close>
 c00238c:	00ffffc4 	movi	r3,-1
 c002390:	10c00526 	beq	r2,r3,c0023a8 <_close_r+0x44>
 c002394:	dfc00217 	ldw	ra,8(sp)
 c002398:	dc400117 	ldw	r17,4(sp)
 c00239c:	dc000017 	ldw	r16,0(sp)
 c0023a0:	dec00304 	addi	sp,sp,12
 c0023a4:	f800283a 	ret
 c0023a8:	80c00017 	ldw	r3,0(r16)
 c0023ac:	183ff926 	beq	r3,zero,c002394 <__alt_data_end+0xfc002394>
 c0023b0:	88c00015 	stw	r3,0(r17)
 c0023b4:	003ff706 	br	c002394 <__alt_data_end+0xfc002394>

0c0023b8 <_fclose_r>:
 c0023b8:	28003926 	beq	r5,zero,c0024a0 <_fclose_r+0xe8>
 c0023bc:	defffc04 	addi	sp,sp,-16
 c0023c0:	dc400115 	stw	r17,4(sp)
 c0023c4:	dc000015 	stw	r16,0(sp)
 c0023c8:	dfc00315 	stw	ra,12(sp)
 c0023cc:	dc800215 	stw	r18,8(sp)
 c0023d0:	2023883a 	mov	r17,r4
 c0023d4:	2821883a 	mov	r16,r5
 c0023d8:	20000226 	beq	r4,zero,c0023e4 <_fclose_r+0x2c>
 c0023dc:	20800e17 	ldw	r2,56(r4)
 c0023e0:	10002726 	beq	r2,zero,c002480 <_fclose_r+0xc8>
 c0023e4:	8080030f 	ldh	r2,12(r16)
 c0023e8:	1000071e 	bne	r2,zero,c002408 <_fclose_r+0x50>
 c0023ec:	0005883a 	mov	r2,zero
 c0023f0:	dfc00317 	ldw	ra,12(sp)
 c0023f4:	dc800217 	ldw	r18,8(sp)
 c0023f8:	dc400117 	ldw	r17,4(sp)
 c0023fc:	dc000017 	ldw	r16,0(sp)
 c002400:	dec00404 	addi	sp,sp,16
 c002404:	f800283a 	ret
 c002408:	800b883a 	mov	r5,r16
 c00240c:	8809883a 	mov	r4,r17
 c002410:	c0024bc0 	call	c0024bc <__sflush_r>
 c002414:	1025883a 	mov	r18,r2
 c002418:	80800b17 	ldw	r2,44(r16)
 c00241c:	10000426 	beq	r2,zero,c002430 <_fclose_r+0x78>
 c002420:	81400717 	ldw	r5,28(r16)
 c002424:	8809883a 	mov	r4,r17
 c002428:	103ee83a 	callr	r2
 c00242c:	10001616 	blt	r2,zero,c002488 <_fclose_r+0xd0>
 c002430:	8080030b 	ldhu	r2,12(r16)
 c002434:	1080200c 	andi	r2,r2,128
 c002438:	1000151e 	bne	r2,zero,c002490 <_fclose_r+0xd8>
 c00243c:	81400c17 	ldw	r5,48(r16)
 c002440:	28000526 	beq	r5,zero,c002458 <_fclose_r+0xa0>
 c002444:	80801004 	addi	r2,r16,64
 c002448:	28800226 	beq	r5,r2,c002454 <_fclose_r+0x9c>
 c00244c:	8809883a 	mov	r4,r17
 c002450:	c0028880 	call	c002888 <_free_r>
 c002454:	80000c15 	stw	zero,48(r16)
 c002458:	81401117 	ldw	r5,68(r16)
 c00245c:	28000326 	beq	r5,zero,c00246c <_fclose_r+0xb4>
 c002460:	8809883a 	mov	r4,r17
 c002464:	c0028880 	call	c002888 <_free_r>
 c002468:	80001115 	stw	zero,68(r16)
 c00246c:	c0007700 	call	c000770 <__sfp_lock_acquire>
 c002470:	8000030d 	sth	zero,12(r16)
 c002474:	c0007740 	call	c000774 <__sfp_lock_release>
 c002478:	9005883a 	mov	r2,r18
 c00247c:	003fdc06 	br	c0023f0 <__alt_data_end+0xfc0023f0>
 c002480:	c0007600 	call	c000760 <__sinit>
 c002484:	003fd706 	br	c0023e4 <__alt_data_end+0xfc0023e4>
 c002488:	04bfffc4 	movi	r18,-1
 c00248c:	003fe806 	br	c002430 <__alt_data_end+0xfc002430>
 c002490:	81400417 	ldw	r5,16(r16)
 c002494:	8809883a 	mov	r4,r17
 c002498:	c0028880 	call	c002888 <_free_r>
 c00249c:	003fe706 	br	c00243c <__alt_data_end+0xfc00243c>
 c0024a0:	0005883a 	mov	r2,zero
 c0024a4:	f800283a 	ret

0c0024a8 <fclose>:
 c0024a8:	00830034 	movhi	r2,3072
 c0024ac:	109d1204 	addi	r2,r2,29768
 c0024b0:	200b883a 	mov	r5,r4
 c0024b4:	11000017 	ldw	r4,0(r2)
 c0024b8:	c0023b81 	jmpi	c0023b8 <_fclose_r>

0c0024bc <__sflush_r>:
 c0024bc:	2880030b 	ldhu	r2,12(r5)
 c0024c0:	defffb04 	addi	sp,sp,-20
 c0024c4:	dcc00315 	stw	r19,12(sp)
 c0024c8:	dc400115 	stw	r17,4(sp)
 c0024cc:	dfc00415 	stw	ra,16(sp)
 c0024d0:	dc800215 	stw	r18,8(sp)
 c0024d4:	dc000015 	stw	r16,0(sp)
 c0024d8:	10c0020c 	andi	r3,r2,8
 c0024dc:	2823883a 	mov	r17,r5
 c0024e0:	2027883a 	mov	r19,r4
 c0024e4:	1800311e 	bne	r3,zero,c0025ac <__sflush_r+0xf0>
 c0024e8:	28c00117 	ldw	r3,4(r5)
 c0024ec:	10820014 	ori	r2,r2,2048
 c0024f0:	2880030d 	sth	r2,12(r5)
 c0024f4:	00c04b0e 	bge	zero,r3,c002624 <__sflush_r+0x168>
 c0024f8:	8a000a17 	ldw	r8,40(r17)
 c0024fc:	40002326 	beq	r8,zero,c00258c <__sflush_r+0xd0>
 c002500:	9c000017 	ldw	r16,0(r19)
 c002504:	10c4000c 	andi	r3,r2,4096
 c002508:	98000015 	stw	zero,0(r19)
 c00250c:	18004826 	beq	r3,zero,c002630 <__sflush_r+0x174>
 c002510:	89801417 	ldw	r6,80(r17)
 c002514:	10c0010c 	andi	r3,r2,4
 c002518:	18000626 	beq	r3,zero,c002534 <__sflush_r+0x78>
 c00251c:	88c00117 	ldw	r3,4(r17)
 c002520:	88800c17 	ldw	r2,48(r17)
 c002524:	30cdc83a 	sub	r6,r6,r3
 c002528:	10000226 	beq	r2,zero,c002534 <__sflush_r+0x78>
 c00252c:	88800f17 	ldw	r2,60(r17)
 c002530:	308dc83a 	sub	r6,r6,r2
 c002534:	89400717 	ldw	r5,28(r17)
 c002538:	000f883a 	mov	r7,zero
 c00253c:	9809883a 	mov	r4,r19
 c002540:	403ee83a 	callr	r8
 c002544:	00ffffc4 	movi	r3,-1
 c002548:	10c04426 	beq	r2,r3,c00265c <__sflush_r+0x1a0>
 c00254c:	88c0030b 	ldhu	r3,12(r17)
 c002550:	89000417 	ldw	r4,16(r17)
 c002554:	88000115 	stw	zero,4(r17)
 c002558:	197dffcc 	andi	r5,r3,63487
 c00255c:	8940030d 	sth	r5,12(r17)
 c002560:	89000015 	stw	r4,0(r17)
 c002564:	18c4000c 	andi	r3,r3,4096
 c002568:	18002c1e 	bne	r3,zero,c00261c <__sflush_r+0x160>
 c00256c:	89400c17 	ldw	r5,48(r17)
 c002570:	9c000015 	stw	r16,0(r19)
 c002574:	28000526 	beq	r5,zero,c00258c <__sflush_r+0xd0>
 c002578:	88801004 	addi	r2,r17,64
 c00257c:	28800226 	beq	r5,r2,c002588 <__sflush_r+0xcc>
 c002580:	9809883a 	mov	r4,r19
 c002584:	c0028880 	call	c002888 <_free_r>
 c002588:	88000c15 	stw	zero,48(r17)
 c00258c:	0005883a 	mov	r2,zero
 c002590:	dfc00417 	ldw	ra,16(sp)
 c002594:	dcc00317 	ldw	r19,12(sp)
 c002598:	dc800217 	ldw	r18,8(sp)
 c00259c:	dc400117 	ldw	r17,4(sp)
 c0025a0:	dc000017 	ldw	r16,0(sp)
 c0025a4:	dec00504 	addi	sp,sp,20
 c0025a8:	f800283a 	ret
 c0025ac:	2c800417 	ldw	r18,16(r5)
 c0025b0:	903ff626 	beq	r18,zero,c00258c <__alt_data_end+0xfc00258c>
 c0025b4:	2c000017 	ldw	r16,0(r5)
 c0025b8:	108000cc 	andi	r2,r2,3
 c0025bc:	2c800015 	stw	r18,0(r5)
 c0025c0:	84a1c83a 	sub	r16,r16,r18
 c0025c4:	1000131e 	bne	r2,zero,c002614 <__sflush_r+0x158>
 c0025c8:	28800517 	ldw	r2,20(r5)
 c0025cc:	88800215 	stw	r2,8(r17)
 c0025d0:	04000316 	blt	zero,r16,c0025e0 <__sflush_r+0x124>
 c0025d4:	003fed06 	br	c00258c <__alt_data_end+0xfc00258c>
 c0025d8:	90a5883a 	add	r18,r18,r2
 c0025dc:	043feb0e 	bge	zero,r16,c00258c <__alt_data_end+0xfc00258c>
 c0025e0:	88800917 	ldw	r2,36(r17)
 c0025e4:	89400717 	ldw	r5,28(r17)
 c0025e8:	800f883a 	mov	r7,r16
 c0025ec:	900d883a 	mov	r6,r18
 c0025f0:	9809883a 	mov	r4,r19
 c0025f4:	103ee83a 	callr	r2
 c0025f8:	80a1c83a 	sub	r16,r16,r2
 c0025fc:	00bff616 	blt	zero,r2,c0025d8 <__alt_data_end+0xfc0025d8>
 c002600:	88c0030b 	ldhu	r3,12(r17)
 c002604:	00bfffc4 	movi	r2,-1
 c002608:	18c01014 	ori	r3,r3,64
 c00260c:	88c0030d 	sth	r3,12(r17)
 c002610:	003fdf06 	br	c002590 <__alt_data_end+0xfc002590>
 c002614:	0005883a 	mov	r2,zero
 c002618:	003fec06 	br	c0025cc <__alt_data_end+0xfc0025cc>
 c00261c:	88801415 	stw	r2,80(r17)
 c002620:	003fd206 	br	c00256c <__alt_data_end+0xfc00256c>
 c002624:	28c00f17 	ldw	r3,60(r5)
 c002628:	00ffb316 	blt	zero,r3,c0024f8 <__alt_data_end+0xfc0024f8>
 c00262c:	003fd706 	br	c00258c <__alt_data_end+0xfc00258c>
 c002630:	89400717 	ldw	r5,28(r17)
 c002634:	000d883a 	mov	r6,zero
 c002638:	01c00044 	movi	r7,1
 c00263c:	9809883a 	mov	r4,r19
 c002640:	403ee83a 	callr	r8
 c002644:	100d883a 	mov	r6,r2
 c002648:	00bfffc4 	movi	r2,-1
 c00264c:	30801426 	beq	r6,r2,c0026a0 <__sflush_r+0x1e4>
 c002650:	8880030b 	ldhu	r2,12(r17)
 c002654:	8a000a17 	ldw	r8,40(r17)
 c002658:	003fae06 	br	c002514 <__alt_data_end+0xfc002514>
 c00265c:	98c00017 	ldw	r3,0(r19)
 c002660:	183fba26 	beq	r3,zero,c00254c <__alt_data_end+0xfc00254c>
 c002664:	01000744 	movi	r4,29
 c002668:	19000626 	beq	r3,r4,c002684 <__sflush_r+0x1c8>
 c00266c:	01000584 	movi	r4,22
 c002670:	19000426 	beq	r3,r4,c002684 <__sflush_r+0x1c8>
 c002674:	88c0030b 	ldhu	r3,12(r17)
 c002678:	18c01014 	ori	r3,r3,64
 c00267c:	88c0030d 	sth	r3,12(r17)
 c002680:	003fc306 	br	c002590 <__alt_data_end+0xfc002590>
 c002684:	8880030b 	ldhu	r2,12(r17)
 c002688:	88c00417 	ldw	r3,16(r17)
 c00268c:	88000115 	stw	zero,4(r17)
 c002690:	10bdffcc 	andi	r2,r2,63487
 c002694:	8880030d 	sth	r2,12(r17)
 c002698:	88c00015 	stw	r3,0(r17)
 c00269c:	003fb306 	br	c00256c <__alt_data_end+0xfc00256c>
 c0026a0:	98800017 	ldw	r2,0(r19)
 c0026a4:	103fea26 	beq	r2,zero,c002650 <__alt_data_end+0xfc002650>
 c0026a8:	00c00744 	movi	r3,29
 c0026ac:	10c00226 	beq	r2,r3,c0026b8 <__sflush_r+0x1fc>
 c0026b0:	00c00584 	movi	r3,22
 c0026b4:	10c0031e 	bne	r2,r3,c0026c4 <__sflush_r+0x208>
 c0026b8:	9c000015 	stw	r16,0(r19)
 c0026bc:	0005883a 	mov	r2,zero
 c0026c0:	003fb306 	br	c002590 <__alt_data_end+0xfc002590>
 c0026c4:	88c0030b 	ldhu	r3,12(r17)
 c0026c8:	3005883a 	mov	r2,r6
 c0026cc:	18c01014 	ori	r3,r3,64
 c0026d0:	88c0030d 	sth	r3,12(r17)
 c0026d4:	003fae06 	br	c002590 <__alt_data_end+0xfc002590>

0c0026d8 <_fflush_r>:
 c0026d8:	defffd04 	addi	sp,sp,-12
 c0026dc:	dc000115 	stw	r16,4(sp)
 c0026e0:	dfc00215 	stw	ra,8(sp)
 c0026e4:	2021883a 	mov	r16,r4
 c0026e8:	20000226 	beq	r4,zero,c0026f4 <_fflush_r+0x1c>
 c0026ec:	20800e17 	ldw	r2,56(r4)
 c0026f0:	10000c26 	beq	r2,zero,c002724 <_fflush_r+0x4c>
 c0026f4:	2880030f 	ldh	r2,12(r5)
 c0026f8:	1000051e 	bne	r2,zero,c002710 <_fflush_r+0x38>
 c0026fc:	0005883a 	mov	r2,zero
 c002700:	dfc00217 	ldw	ra,8(sp)
 c002704:	dc000117 	ldw	r16,4(sp)
 c002708:	dec00304 	addi	sp,sp,12
 c00270c:	f800283a 	ret
 c002710:	8009883a 	mov	r4,r16
 c002714:	dfc00217 	ldw	ra,8(sp)
 c002718:	dc000117 	ldw	r16,4(sp)
 c00271c:	dec00304 	addi	sp,sp,12
 c002720:	c0024bc1 	jmpi	c0024bc <__sflush_r>
 c002724:	d9400015 	stw	r5,0(sp)
 c002728:	c0007600 	call	c000760 <__sinit>
 c00272c:	d9400017 	ldw	r5,0(sp)
 c002730:	003ff006 	br	c0026f4 <__alt_data_end+0xfc0026f4>

0c002734 <fflush>:
 c002734:	20000526 	beq	r4,zero,c00274c <fflush+0x18>
 c002738:	00830034 	movhi	r2,3072
 c00273c:	109d1204 	addi	r2,r2,29768
 c002740:	200b883a 	mov	r5,r4
 c002744:	11000017 	ldw	r4,0(r2)
 c002748:	c0026d81 	jmpi	c0026d8 <_fflush_r>
 c00274c:	00830034 	movhi	r2,3072
 c002750:	109d1104 	addi	r2,r2,29764
 c002754:	11000017 	ldw	r4,0(r2)
 c002758:	01430034 	movhi	r5,3072
 c00275c:	2949b604 	addi	r5,r5,9944
 c002760:	c000d3c1 	jmpi	c000d3c <_fwalk_reent>

0c002764 <_malloc_trim_r>:
 c002764:	defffb04 	addi	sp,sp,-20
 c002768:	dcc00315 	stw	r19,12(sp)
 c00276c:	04c30034 	movhi	r19,3072
 c002770:	dc800215 	stw	r18,8(sp)
 c002774:	dc400115 	stw	r17,4(sp)
 c002778:	dc000015 	stw	r16,0(sp)
 c00277c:	dfc00415 	stw	ra,16(sp)
 c002780:	2821883a 	mov	r16,r5
 c002784:	9cd78d04 	addi	r19,r19,24116
 c002788:	2025883a 	mov	r18,r4
 c00278c:	c00363c0 	call	c00363c <__malloc_lock>
 c002790:	98800217 	ldw	r2,8(r19)
 c002794:	14400117 	ldw	r17,4(r2)
 c002798:	00bfff04 	movi	r2,-4
 c00279c:	88a2703a 	and	r17,r17,r2
 c0027a0:	8c21c83a 	sub	r16,r17,r16
 c0027a4:	8403fbc4 	addi	r16,r16,4079
 c0027a8:	8020d33a 	srli	r16,r16,12
 c0027ac:	0083ffc4 	movi	r2,4095
 c0027b0:	843fffc4 	addi	r16,r16,-1
 c0027b4:	8020933a 	slli	r16,r16,12
 c0027b8:	1400060e 	bge	r2,r16,c0027d4 <_malloc_trim_r+0x70>
 c0027bc:	000b883a 	mov	r5,zero
 c0027c0:	9009883a 	mov	r4,r18
 c0027c4:	c0020200 	call	c002020 <_sbrk_r>
 c0027c8:	98c00217 	ldw	r3,8(r19)
 c0027cc:	1c47883a 	add	r3,r3,r17
 c0027d0:	10c00a26 	beq	r2,r3,c0027fc <_malloc_trim_r+0x98>
 c0027d4:	9009883a 	mov	r4,r18
 c0027d8:	c0036600 	call	c003660 <__malloc_unlock>
 c0027dc:	0005883a 	mov	r2,zero
 c0027e0:	dfc00417 	ldw	ra,16(sp)
 c0027e4:	dcc00317 	ldw	r19,12(sp)
 c0027e8:	dc800217 	ldw	r18,8(sp)
 c0027ec:	dc400117 	ldw	r17,4(sp)
 c0027f0:	dc000017 	ldw	r16,0(sp)
 c0027f4:	dec00504 	addi	sp,sp,20
 c0027f8:	f800283a 	ret
 c0027fc:	040bc83a 	sub	r5,zero,r16
 c002800:	9009883a 	mov	r4,r18
 c002804:	c0020200 	call	c002020 <_sbrk_r>
 c002808:	00ffffc4 	movi	r3,-1
 c00280c:	10c00d26 	beq	r2,r3,c002844 <_malloc_trim_r+0xe0>
 c002810:	00c30074 	movhi	r3,3073
 c002814:	18e3c504 	addi	r3,r3,-28908
 c002818:	18800017 	ldw	r2,0(r3)
 c00281c:	99000217 	ldw	r4,8(r19)
 c002820:	8c23c83a 	sub	r17,r17,r16
 c002824:	8c400054 	ori	r17,r17,1
 c002828:	1421c83a 	sub	r16,r2,r16
 c00282c:	24400115 	stw	r17,4(r4)
 c002830:	9009883a 	mov	r4,r18
 c002834:	1c000015 	stw	r16,0(r3)
 c002838:	c0036600 	call	c003660 <__malloc_unlock>
 c00283c:	00800044 	movi	r2,1
 c002840:	003fe706 	br	c0027e0 <__alt_data_end+0xfc0027e0>
 c002844:	000b883a 	mov	r5,zero
 c002848:	9009883a 	mov	r4,r18
 c00284c:	c0020200 	call	c002020 <_sbrk_r>
 c002850:	99000217 	ldw	r4,8(r19)
 c002854:	014003c4 	movi	r5,15
 c002858:	1107c83a 	sub	r3,r2,r4
 c00285c:	28ffdd0e 	bge	r5,r3,c0027d4 <__alt_data_end+0xfc0027d4>
 c002860:	01430034 	movhi	r5,3072
 c002864:	295d1304 	addi	r5,r5,29772
 c002868:	29400017 	ldw	r5,0(r5)
 c00286c:	18c00054 	ori	r3,r3,1
 c002870:	20c00115 	stw	r3,4(r4)
 c002874:	00c30074 	movhi	r3,3073
 c002878:	1145c83a 	sub	r2,r2,r5
 c00287c:	18e3c504 	addi	r3,r3,-28908
 c002880:	18800015 	stw	r2,0(r3)
 c002884:	003fd306 	br	c0027d4 <__alt_data_end+0xfc0027d4>

0c002888 <_free_r>:
 c002888:	28004126 	beq	r5,zero,c002990 <_free_r+0x108>
 c00288c:	defffd04 	addi	sp,sp,-12
 c002890:	dc400115 	stw	r17,4(sp)
 c002894:	dc000015 	stw	r16,0(sp)
 c002898:	2023883a 	mov	r17,r4
 c00289c:	2821883a 	mov	r16,r5
 c0028a0:	dfc00215 	stw	ra,8(sp)
 c0028a4:	c00363c0 	call	c00363c <__malloc_lock>
 c0028a8:	81ffff17 	ldw	r7,-4(r16)
 c0028ac:	00bfff84 	movi	r2,-2
 c0028b0:	01030034 	movhi	r4,3072
 c0028b4:	81bffe04 	addi	r6,r16,-8
 c0028b8:	3884703a 	and	r2,r7,r2
 c0028bc:	21178d04 	addi	r4,r4,24116
 c0028c0:	308b883a 	add	r5,r6,r2
 c0028c4:	2a400117 	ldw	r9,4(r5)
 c0028c8:	22000217 	ldw	r8,8(r4)
 c0028cc:	00ffff04 	movi	r3,-4
 c0028d0:	48c6703a 	and	r3,r9,r3
 c0028d4:	2a005726 	beq	r5,r8,c002a34 <_free_r+0x1ac>
 c0028d8:	28c00115 	stw	r3,4(r5)
 c0028dc:	39c0004c 	andi	r7,r7,1
 c0028e0:	3800091e 	bne	r7,zero,c002908 <_free_r+0x80>
 c0028e4:	823ffe17 	ldw	r8,-8(r16)
 c0028e8:	22400204 	addi	r9,r4,8
 c0028ec:	320dc83a 	sub	r6,r6,r8
 c0028f0:	31c00217 	ldw	r7,8(r6)
 c0028f4:	1205883a 	add	r2,r2,r8
 c0028f8:	3a406526 	beq	r7,r9,c002a90 <_free_r+0x208>
 c0028fc:	32000317 	ldw	r8,12(r6)
 c002900:	3a000315 	stw	r8,12(r7)
 c002904:	41c00215 	stw	r7,8(r8)
 c002908:	28cf883a 	add	r7,r5,r3
 c00290c:	39c00117 	ldw	r7,4(r7)
 c002910:	39c0004c 	andi	r7,r7,1
 c002914:	38003a26 	beq	r7,zero,c002a00 <_free_r+0x178>
 c002918:	10c00054 	ori	r3,r2,1
 c00291c:	30c00115 	stw	r3,4(r6)
 c002920:	3087883a 	add	r3,r6,r2
 c002924:	18800015 	stw	r2,0(r3)
 c002928:	00c07fc4 	movi	r3,511
 c00292c:	18801936 	bltu	r3,r2,c002994 <_free_r+0x10c>
 c002930:	1004d0fa 	srli	r2,r2,3
 c002934:	01c00044 	movi	r7,1
 c002938:	21400117 	ldw	r5,4(r4)
 c00293c:	10c00044 	addi	r3,r2,1
 c002940:	18c7883a 	add	r3,r3,r3
 c002944:	1005d0ba 	srai	r2,r2,2
 c002948:	18c7883a 	add	r3,r3,r3
 c00294c:	18c7883a 	add	r3,r3,r3
 c002950:	1907883a 	add	r3,r3,r4
 c002954:	3884983a 	sll	r2,r7,r2
 c002958:	19c00017 	ldw	r7,0(r3)
 c00295c:	1a3ffe04 	addi	r8,r3,-8
 c002960:	1144b03a 	or	r2,r2,r5
 c002964:	32000315 	stw	r8,12(r6)
 c002968:	31c00215 	stw	r7,8(r6)
 c00296c:	20800115 	stw	r2,4(r4)
 c002970:	19800015 	stw	r6,0(r3)
 c002974:	39800315 	stw	r6,12(r7)
 c002978:	8809883a 	mov	r4,r17
 c00297c:	dfc00217 	ldw	ra,8(sp)
 c002980:	dc400117 	ldw	r17,4(sp)
 c002984:	dc000017 	ldw	r16,0(sp)
 c002988:	dec00304 	addi	sp,sp,12
 c00298c:	c0036601 	jmpi	c003660 <__malloc_unlock>
 c002990:	f800283a 	ret
 c002994:	100ad27a 	srli	r5,r2,9
 c002998:	00c00104 	movi	r3,4
 c00299c:	19404a36 	bltu	r3,r5,c002ac8 <_free_r+0x240>
 c0029a0:	100ad1ba 	srli	r5,r2,6
 c0029a4:	28c00e44 	addi	r3,r5,57
 c0029a8:	18c7883a 	add	r3,r3,r3
 c0029ac:	29400e04 	addi	r5,r5,56
 c0029b0:	18c7883a 	add	r3,r3,r3
 c0029b4:	18c7883a 	add	r3,r3,r3
 c0029b8:	1909883a 	add	r4,r3,r4
 c0029bc:	20c00017 	ldw	r3,0(r4)
 c0029c0:	01c30034 	movhi	r7,3072
 c0029c4:	213ffe04 	addi	r4,r4,-8
 c0029c8:	39d78d04 	addi	r7,r7,24116
 c0029cc:	20c04426 	beq	r4,r3,c002ae0 <_free_r+0x258>
 c0029d0:	01ffff04 	movi	r7,-4
 c0029d4:	19400117 	ldw	r5,4(r3)
 c0029d8:	29ca703a 	and	r5,r5,r7
 c0029dc:	1140022e 	bgeu	r2,r5,c0029e8 <_free_r+0x160>
 c0029e0:	18c00217 	ldw	r3,8(r3)
 c0029e4:	20fffb1e 	bne	r4,r3,c0029d4 <__alt_data_end+0xfc0029d4>
 c0029e8:	19000317 	ldw	r4,12(r3)
 c0029ec:	31000315 	stw	r4,12(r6)
 c0029f0:	30c00215 	stw	r3,8(r6)
 c0029f4:	21800215 	stw	r6,8(r4)
 c0029f8:	19800315 	stw	r6,12(r3)
 c0029fc:	003fde06 	br	c002978 <__alt_data_end+0xfc002978>
 c002a00:	29c00217 	ldw	r7,8(r5)
 c002a04:	10c5883a 	add	r2,r2,r3
 c002a08:	00c30034 	movhi	r3,3072
 c002a0c:	18d78f04 	addi	r3,r3,24124
 c002a10:	38c03b26 	beq	r7,r3,c002b00 <_free_r+0x278>
 c002a14:	2a000317 	ldw	r8,12(r5)
 c002a18:	11400054 	ori	r5,r2,1
 c002a1c:	3087883a 	add	r3,r6,r2
 c002a20:	3a000315 	stw	r8,12(r7)
 c002a24:	41c00215 	stw	r7,8(r8)
 c002a28:	31400115 	stw	r5,4(r6)
 c002a2c:	18800015 	stw	r2,0(r3)
 c002a30:	003fbd06 	br	c002928 <__alt_data_end+0xfc002928>
 c002a34:	39c0004c 	andi	r7,r7,1
 c002a38:	10c5883a 	add	r2,r2,r3
 c002a3c:	3800071e 	bne	r7,zero,c002a5c <_free_r+0x1d4>
 c002a40:	81fffe17 	ldw	r7,-8(r16)
 c002a44:	31cdc83a 	sub	r6,r6,r7
 c002a48:	30c00317 	ldw	r3,12(r6)
 c002a4c:	31400217 	ldw	r5,8(r6)
 c002a50:	11c5883a 	add	r2,r2,r7
 c002a54:	28c00315 	stw	r3,12(r5)
 c002a58:	19400215 	stw	r5,8(r3)
 c002a5c:	10c00054 	ori	r3,r2,1
 c002a60:	30c00115 	stw	r3,4(r6)
 c002a64:	00c30034 	movhi	r3,3072
 c002a68:	18dd1404 	addi	r3,r3,29776
 c002a6c:	18c00017 	ldw	r3,0(r3)
 c002a70:	21800215 	stw	r6,8(r4)
 c002a74:	10ffc036 	bltu	r2,r3,c002978 <__alt_data_end+0xfc002978>
 c002a78:	00830074 	movhi	r2,3073
 c002a7c:	10a3bc04 	addi	r2,r2,-28944
 c002a80:	11400017 	ldw	r5,0(r2)
 c002a84:	8809883a 	mov	r4,r17
 c002a88:	c0027640 	call	c002764 <_malloc_trim_r>
 c002a8c:	003fba06 	br	c002978 <__alt_data_end+0xfc002978>
 c002a90:	28c9883a 	add	r4,r5,r3
 c002a94:	21000117 	ldw	r4,4(r4)
 c002a98:	2100004c 	andi	r4,r4,1
 c002a9c:	2000391e 	bne	r4,zero,c002b84 <_free_r+0x2fc>
 c002aa0:	29c00217 	ldw	r7,8(r5)
 c002aa4:	29000317 	ldw	r4,12(r5)
 c002aa8:	1885883a 	add	r2,r3,r2
 c002aac:	10c00054 	ori	r3,r2,1
 c002ab0:	39000315 	stw	r4,12(r7)
 c002ab4:	21c00215 	stw	r7,8(r4)
 c002ab8:	30c00115 	stw	r3,4(r6)
 c002abc:	308d883a 	add	r6,r6,r2
 c002ac0:	30800015 	stw	r2,0(r6)
 c002ac4:	003fac06 	br	c002978 <__alt_data_end+0xfc002978>
 c002ac8:	00c00504 	movi	r3,20
 c002acc:	19401536 	bltu	r3,r5,c002b24 <_free_r+0x29c>
 c002ad0:	28c01704 	addi	r3,r5,92
 c002ad4:	18c7883a 	add	r3,r3,r3
 c002ad8:	294016c4 	addi	r5,r5,91
 c002adc:	003fb406 	br	c0029b0 <__alt_data_end+0xfc0029b0>
 c002ae0:	280bd0ba 	srai	r5,r5,2
 c002ae4:	00c00044 	movi	r3,1
 c002ae8:	38800117 	ldw	r2,4(r7)
 c002aec:	194a983a 	sll	r5,r3,r5
 c002af0:	2007883a 	mov	r3,r4
 c002af4:	2884b03a 	or	r2,r5,r2
 c002af8:	38800115 	stw	r2,4(r7)
 c002afc:	003fbb06 	br	c0029ec <__alt_data_end+0xfc0029ec>
 c002b00:	21800515 	stw	r6,20(r4)
 c002b04:	21800415 	stw	r6,16(r4)
 c002b08:	10c00054 	ori	r3,r2,1
 c002b0c:	31c00315 	stw	r7,12(r6)
 c002b10:	31c00215 	stw	r7,8(r6)
 c002b14:	30c00115 	stw	r3,4(r6)
 c002b18:	308d883a 	add	r6,r6,r2
 c002b1c:	30800015 	stw	r2,0(r6)
 c002b20:	003f9506 	br	c002978 <__alt_data_end+0xfc002978>
 c002b24:	00c01504 	movi	r3,84
 c002b28:	19400536 	bltu	r3,r5,c002b40 <_free_r+0x2b8>
 c002b2c:	100ad33a 	srli	r5,r2,12
 c002b30:	28c01bc4 	addi	r3,r5,111
 c002b34:	18c7883a 	add	r3,r3,r3
 c002b38:	29401b84 	addi	r5,r5,110
 c002b3c:	003f9c06 	br	c0029b0 <__alt_data_end+0xfc0029b0>
 c002b40:	00c05504 	movi	r3,340
 c002b44:	19400536 	bltu	r3,r5,c002b5c <_free_r+0x2d4>
 c002b48:	100ad3fa 	srli	r5,r2,15
 c002b4c:	28c01e04 	addi	r3,r5,120
 c002b50:	18c7883a 	add	r3,r3,r3
 c002b54:	29401dc4 	addi	r5,r5,119
 c002b58:	003f9506 	br	c0029b0 <__alt_data_end+0xfc0029b0>
 c002b5c:	00c15504 	movi	r3,1364
 c002b60:	19400536 	bltu	r3,r5,c002b78 <_free_r+0x2f0>
 c002b64:	100ad4ba 	srli	r5,r2,18
 c002b68:	28c01f44 	addi	r3,r5,125
 c002b6c:	18c7883a 	add	r3,r3,r3
 c002b70:	29401f04 	addi	r5,r5,124
 c002b74:	003f8e06 	br	c0029b0 <__alt_data_end+0xfc0029b0>
 c002b78:	00c03f84 	movi	r3,254
 c002b7c:	01401f84 	movi	r5,126
 c002b80:	003f8b06 	br	c0029b0 <__alt_data_end+0xfc0029b0>
 c002b84:	10c00054 	ori	r3,r2,1
 c002b88:	30c00115 	stw	r3,4(r6)
 c002b8c:	308d883a 	add	r6,r6,r2
 c002b90:	30800015 	stw	r2,0(r6)
 c002b94:	003f7806 	br	c002978 <__alt_data_end+0xfc002978>

0c002b98 <_lseek_r>:
 c002b98:	defffd04 	addi	sp,sp,-12
 c002b9c:	2805883a 	mov	r2,r5
 c002ba0:	dc000015 	stw	r16,0(sp)
 c002ba4:	04030074 	movhi	r16,3073
 c002ba8:	dc400115 	stw	r17,4(sp)
 c002bac:	300b883a 	mov	r5,r6
 c002bb0:	8423bd04 	addi	r16,r16,-28940
 c002bb4:	2023883a 	mov	r17,r4
 c002bb8:	380d883a 	mov	r6,r7
 c002bbc:	1009883a 	mov	r4,r2
 c002bc0:	dfc00215 	stw	ra,8(sp)
 c002bc4:	80000015 	stw	zero,0(r16)
 c002bc8:	c0034e40 	call	c0034e4 <lseek>
 c002bcc:	00ffffc4 	movi	r3,-1
 c002bd0:	10c00526 	beq	r2,r3,c002be8 <_lseek_r+0x50>
 c002bd4:	dfc00217 	ldw	ra,8(sp)
 c002bd8:	dc400117 	ldw	r17,4(sp)
 c002bdc:	dc000017 	ldw	r16,0(sp)
 c002be0:	dec00304 	addi	sp,sp,12
 c002be4:	f800283a 	ret
 c002be8:	80c00017 	ldw	r3,0(r16)
 c002bec:	183ff926 	beq	r3,zero,c002bd4 <__alt_data_end+0xfc002bd4>
 c002bf0:	88c00015 	stw	r3,0(r17)
 c002bf4:	003ff706 	br	c002bd4 <__alt_data_end+0xfc002bd4>

0c002bf8 <__smakebuf_r>:
 c002bf8:	2880030b 	ldhu	r2,12(r5)
 c002bfc:	10c0008c 	andi	r3,r2,2
 c002c00:	1800411e 	bne	r3,zero,c002d08 <__smakebuf_r+0x110>
 c002c04:	deffec04 	addi	sp,sp,-80
 c002c08:	dc000f15 	stw	r16,60(sp)
 c002c0c:	2821883a 	mov	r16,r5
 c002c10:	2940038f 	ldh	r5,14(r5)
 c002c14:	dc401015 	stw	r17,64(sp)
 c002c18:	dfc01315 	stw	ra,76(sp)
 c002c1c:	dcc01215 	stw	r19,72(sp)
 c002c20:	dc801115 	stw	r18,68(sp)
 c002c24:	2023883a 	mov	r17,r4
 c002c28:	28001c16 	blt	r5,zero,c002c9c <__smakebuf_r+0xa4>
 c002c2c:	d80d883a 	mov	r6,sp
 c002c30:	c002e140 	call	c002e14 <_fstat_r>
 c002c34:	10001816 	blt	r2,zero,c002c98 <__smakebuf_r+0xa0>
 c002c38:	d8800117 	ldw	r2,4(sp)
 c002c3c:	00e00014 	movui	r3,32768
 c002c40:	10bc000c 	andi	r2,r2,61440
 c002c44:	14c80020 	cmpeqi	r19,r2,8192
 c002c48:	10c03726 	beq	r2,r3,c002d28 <__smakebuf_r+0x130>
 c002c4c:	80c0030b 	ldhu	r3,12(r16)
 c002c50:	18c20014 	ori	r3,r3,2048
 c002c54:	80c0030d 	sth	r3,12(r16)
 c002c58:	00c80004 	movi	r3,8192
 c002c5c:	10c0521e 	bne	r2,r3,c002da8 <__smakebuf_r+0x1b0>
 c002c60:	8140038f 	ldh	r5,14(r16)
 c002c64:	8809883a 	mov	r4,r17
 c002c68:	c002e700 	call	c002e70 <_isatty_r>
 c002c6c:	10004c26 	beq	r2,zero,c002da0 <__smakebuf_r+0x1a8>
 c002c70:	8080030b 	ldhu	r2,12(r16)
 c002c74:	80c010c4 	addi	r3,r16,67
 c002c78:	80c00015 	stw	r3,0(r16)
 c002c7c:	10800054 	ori	r2,r2,1
 c002c80:	8080030d 	sth	r2,12(r16)
 c002c84:	00800044 	movi	r2,1
 c002c88:	80c00415 	stw	r3,16(r16)
 c002c8c:	80800515 	stw	r2,20(r16)
 c002c90:	04810004 	movi	r18,1024
 c002c94:	00000706 	br	c002cb4 <__smakebuf_r+0xbc>
 c002c98:	8080030b 	ldhu	r2,12(r16)
 c002c9c:	10c0200c 	andi	r3,r2,128
 c002ca0:	18001f1e 	bne	r3,zero,c002d20 <__smakebuf_r+0x128>
 c002ca4:	04810004 	movi	r18,1024
 c002ca8:	10820014 	ori	r2,r2,2048
 c002cac:	8080030d 	sth	r2,12(r16)
 c002cb0:	0027883a 	mov	r19,zero
 c002cb4:	900b883a 	mov	r5,r18
 c002cb8:	8809883a 	mov	r4,r17
 c002cbc:	c000e000 	call	c000e00 <_malloc_r>
 c002cc0:	10002c26 	beq	r2,zero,c002d74 <__smakebuf_r+0x17c>
 c002cc4:	80c0030b 	ldhu	r3,12(r16)
 c002cc8:	01030034 	movhi	r4,3072
 c002ccc:	21010204 	addi	r4,r4,1032
 c002cd0:	89000f15 	stw	r4,60(r17)
 c002cd4:	18c02014 	ori	r3,r3,128
 c002cd8:	80c0030d 	sth	r3,12(r16)
 c002cdc:	80800015 	stw	r2,0(r16)
 c002ce0:	80800415 	stw	r2,16(r16)
 c002ce4:	84800515 	stw	r18,20(r16)
 c002ce8:	98001a1e 	bne	r19,zero,c002d54 <__smakebuf_r+0x15c>
 c002cec:	dfc01317 	ldw	ra,76(sp)
 c002cf0:	dcc01217 	ldw	r19,72(sp)
 c002cf4:	dc801117 	ldw	r18,68(sp)
 c002cf8:	dc401017 	ldw	r17,64(sp)
 c002cfc:	dc000f17 	ldw	r16,60(sp)
 c002d00:	dec01404 	addi	sp,sp,80
 c002d04:	f800283a 	ret
 c002d08:	288010c4 	addi	r2,r5,67
 c002d0c:	28800015 	stw	r2,0(r5)
 c002d10:	28800415 	stw	r2,16(r5)
 c002d14:	00800044 	movi	r2,1
 c002d18:	28800515 	stw	r2,20(r5)
 c002d1c:	f800283a 	ret
 c002d20:	04801004 	movi	r18,64
 c002d24:	003fe006 	br	c002ca8 <__alt_data_end+0xfc002ca8>
 c002d28:	81000a17 	ldw	r4,40(r16)
 c002d2c:	00c30034 	movhi	r3,3072
 c002d30:	18c85304 	addi	r3,r3,8524
 c002d34:	20ffc51e 	bne	r4,r3,c002c4c <__alt_data_end+0xfc002c4c>
 c002d38:	8080030b 	ldhu	r2,12(r16)
 c002d3c:	04810004 	movi	r18,1024
 c002d40:	84801315 	stw	r18,76(r16)
 c002d44:	1484b03a 	or	r2,r2,r18
 c002d48:	8080030d 	sth	r2,12(r16)
 c002d4c:	0027883a 	mov	r19,zero
 c002d50:	003fd806 	br	c002cb4 <__alt_data_end+0xfc002cb4>
 c002d54:	8140038f 	ldh	r5,14(r16)
 c002d58:	8809883a 	mov	r4,r17
 c002d5c:	c002e700 	call	c002e70 <_isatty_r>
 c002d60:	103fe226 	beq	r2,zero,c002cec <__alt_data_end+0xfc002cec>
 c002d64:	8080030b 	ldhu	r2,12(r16)
 c002d68:	10800054 	ori	r2,r2,1
 c002d6c:	8080030d 	sth	r2,12(r16)
 c002d70:	003fde06 	br	c002cec <__alt_data_end+0xfc002cec>
 c002d74:	8080030b 	ldhu	r2,12(r16)
 c002d78:	10c0800c 	andi	r3,r2,512
 c002d7c:	183fdb1e 	bne	r3,zero,c002cec <__alt_data_end+0xfc002cec>
 c002d80:	10800094 	ori	r2,r2,2
 c002d84:	80c010c4 	addi	r3,r16,67
 c002d88:	8080030d 	sth	r2,12(r16)
 c002d8c:	00800044 	movi	r2,1
 c002d90:	80c00015 	stw	r3,0(r16)
 c002d94:	80c00415 	stw	r3,16(r16)
 c002d98:	80800515 	stw	r2,20(r16)
 c002d9c:	003fd306 	br	c002cec <__alt_data_end+0xfc002cec>
 c002da0:	04810004 	movi	r18,1024
 c002da4:	003fc306 	br	c002cb4 <__alt_data_end+0xfc002cb4>
 c002da8:	0027883a 	mov	r19,zero
 c002dac:	04810004 	movi	r18,1024
 c002db0:	003fc006 	br	c002cb4 <__alt_data_end+0xfc002cb4>

0c002db4 <_read_r>:
 c002db4:	defffd04 	addi	sp,sp,-12
 c002db8:	2805883a 	mov	r2,r5
 c002dbc:	dc000015 	stw	r16,0(sp)
 c002dc0:	04030074 	movhi	r16,3073
 c002dc4:	dc400115 	stw	r17,4(sp)
 c002dc8:	300b883a 	mov	r5,r6
 c002dcc:	8423bd04 	addi	r16,r16,-28940
 c002dd0:	2023883a 	mov	r17,r4
 c002dd4:	380d883a 	mov	r6,r7
 c002dd8:	1009883a 	mov	r4,r2
 c002ddc:	dfc00215 	stw	ra,8(sp)
 c002de0:	80000015 	stw	zero,0(r16)
 c002de4:	c0036c00 	call	c0036c0 <read>
 c002de8:	00ffffc4 	movi	r3,-1
 c002dec:	10c00526 	beq	r2,r3,c002e04 <_read_r+0x50>
 c002df0:	dfc00217 	ldw	ra,8(sp)
 c002df4:	dc400117 	ldw	r17,4(sp)
 c002df8:	dc000017 	ldw	r16,0(sp)
 c002dfc:	dec00304 	addi	sp,sp,12
 c002e00:	f800283a 	ret
 c002e04:	80c00017 	ldw	r3,0(r16)
 c002e08:	183ff926 	beq	r3,zero,c002df0 <__alt_data_end+0xfc002df0>
 c002e0c:	88c00015 	stw	r3,0(r17)
 c002e10:	003ff706 	br	c002df0 <__alt_data_end+0xfc002df0>

0c002e14 <_fstat_r>:
 c002e14:	defffd04 	addi	sp,sp,-12
 c002e18:	2805883a 	mov	r2,r5
 c002e1c:	dc000015 	stw	r16,0(sp)
 c002e20:	04030074 	movhi	r16,3073
 c002e24:	dc400115 	stw	r17,4(sp)
 c002e28:	8423bd04 	addi	r16,r16,-28940
 c002e2c:	2023883a 	mov	r17,r4
 c002e30:	300b883a 	mov	r5,r6
 c002e34:	1009883a 	mov	r4,r2
 c002e38:	dfc00215 	stw	ra,8(sp)
 c002e3c:	80000015 	stw	zero,0(r16)
 c002e40:	c00321c0 	call	c00321c <fstat>
 c002e44:	00ffffc4 	movi	r3,-1
 c002e48:	10c00526 	beq	r2,r3,c002e60 <_fstat_r+0x4c>
 c002e4c:	dfc00217 	ldw	ra,8(sp)
 c002e50:	dc400117 	ldw	r17,4(sp)
 c002e54:	dc000017 	ldw	r16,0(sp)
 c002e58:	dec00304 	addi	sp,sp,12
 c002e5c:	f800283a 	ret
 c002e60:	80c00017 	ldw	r3,0(r16)
 c002e64:	183ff926 	beq	r3,zero,c002e4c <__alt_data_end+0xfc002e4c>
 c002e68:	88c00015 	stw	r3,0(r17)
 c002e6c:	003ff706 	br	c002e4c <__alt_data_end+0xfc002e4c>

0c002e70 <_isatty_r>:
 c002e70:	defffd04 	addi	sp,sp,-12
 c002e74:	dc000015 	stw	r16,0(sp)
 c002e78:	04030074 	movhi	r16,3073
 c002e7c:	dc400115 	stw	r17,4(sp)
 c002e80:	8423bd04 	addi	r16,r16,-28940
 c002e84:	2023883a 	mov	r17,r4
 c002e88:	2809883a 	mov	r4,r5
 c002e8c:	dfc00215 	stw	ra,8(sp)
 c002e90:	80000015 	stw	zero,0(r16)
 c002e94:	c0033100 	call	c003310 <isatty>
 c002e98:	00ffffc4 	movi	r3,-1
 c002e9c:	10c00526 	beq	r2,r3,c002eb4 <_isatty_r+0x44>
 c002ea0:	dfc00217 	ldw	ra,8(sp)
 c002ea4:	dc400117 	ldw	r17,4(sp)
 c002ea8:	dc000017 	ldw	r16,0(sp)
 c002eac:	dec00304 	addi	sp,sp,12
 c002eb0:	f800283a 	ret
 c002eb4:	80c00017 	ldw	r3,0(r16)
 c002eb8:	183ff926 	beq	r3,zero,c002ea0 <__alt_data_end+0xfc002ea0>
 c002ebc:	88c00015 	stw	r3,0(r17)
 c002ec0:	003ff706 	br	c002ea0 <__alt_data_end+0xfc002ea0>

0c002ec4 <__divsi3>:
 c002ec4:	20001b16 	blt	r4,zero,c002f34 <__divsi3+0x70>
 c002ec8:	000f883a 	mov	r7,zero
 c002ecc:	28001616 	blt	r5,zero,c002f28 <__divsi3+0x64>
 c002ed0:	200d883a 	mov	r6,r4
 c002ed4:	29001a2e 	bgeu	r5,r4,c002f40 <__divsi3+0x7c>
 c002ed8:	00800804 	movi	r2,32
 c002edc:	00c00044 	movi	r3,1
 c002ee0:	00000106 	br	c002ee8 <__divsi3+0x24>
 c002ee4:	10000d26 	beq	r2,zero,c002f1c <__divsi3+0x58>
 c002ee8:	294b883a 	add	r5,r5,r5
 c002eec:	10bfffc4 	addi	r2,r2,-1
 c002ef0:	18c7883a 	add	r3,r3,r3
 c002ef4:	293ffb36 	bltu	r5,r4,c002ee4 <__alt_data_end+0xfc002ee4>
 c002ef8:	0005883a 	mov	r2,zero
 c002efc:	18000726 	beq	r3,zero,c002f1c <__divsi3+0x58>
 c002f00:	0005883a 	mov	r2,zero
 c002f04:	31400236 	bltu	r6,r5,c002f10 <__divsi3+0x4c>
 c002f08:	314dc83a 	sub	r6,r6,r5
 c002f0c:	10c4b03a 	or	r2,r2,r3
 c002f10:	1806d07a 	srli	r3,r3,1
 c002f14:	280ad07a 	srli	r5,r5,1
 c002f18:	183ffa1e 	bne	r3,zero,c002f04 <__alt_data_end+0xfc002f04>
 c002f1c:	38000126 	beq	r7,zero,c002f24 <__divsi3+0x60>
 c002f20:	0085c83a 	sub	r2,zero,r2
 c002f24:	f800283a 	ret
 c002f28:	014bc83a 	sub	r5,zero,r5
 c002f2c:	39c0005c 	xori	r7,r7,1
 c002f30:	003fe706 	br	c002ed0 <__alt_data_end+0xfc002ed0>
 c002f34:	0109c83a 	sub	r4,zero,r4
 c002f38:	01c00044 	movi	r7,1
 c002f3c:	003fe306 	br	c002ecc <__alt_data_end+0xfc002ecc>
 c002f40:	00c00044 	movi	r3,1
 c002f44:	003fee06 	br	c002f00 <__alt_data_end+0xfc002f00>

0c002f48 <__modsi3>:
 c002f48:	20001716 	blt	r4,zero,c002fa8 <__modsi3+0x60>
 c002f4c:	000f883a 	mov	r7,zero
 c002f50:	2005883a 	mov	r2,r4
 c002f54:	28001216 	blt	r5,zero,c002fa0 <__modsi3+0x58>
 c002f58:	2900162e 	bgeu	r5,r4,c002fb4 <__modsi3+0x6c>
 c002f5c:	01800804 	movi	r6,32
 c002f60:	00c00044 	movi	r3,1
 c002f64:	00000106 	br	c002f6c <__modsi3+0x24>
 c002f68:	30000a26 	beq	r6,zero,c002f94 <__modsi3+0x4c>
 c002f6c:	294b883a 	add	r5,r5,r5
 c002f70:	31bfffc4 	addi	r6,r6,-1
 c002f74:	18c7883a 	add	r3,r3,r3
 c002f78:	293ffb36 	bltu	r5,r4,c002f68 <__alt_data_end+0xfc002f68>
 c002f7c:	18000526 	beq	r3,zero,c002f94 <__modsi3+0x4c>
 c002f80:	1806d07a 	srli	r3,r3,1
 c002f84:	11400136 	bltu	r2,r5,c002f8c <__modsi3+0x44>
 c002f88:	1145c83a 	sub	r2,r2,r5
 c002f8c:	280ad07a 	srli	r5,r5,1
 c002f90:	183ffb1e 	bne	r3,zero,c002f80 <__alt_data_end+0xfc002f80>
 c002f94:	38000126 	beq	r7,zero,c002f9c <__modsi3+0x54>
 c002f98:	0085c83a 	sub	r2,zero,r2
 c002f9c:	f800283a 	ret
 c002fa0:	014bc83a 	sub	r5,zero,r5
 c002fa4:	003fec06 	br	c002f58 <__alt_data_end+0xfc002f58>
 c002fa8:	0109c83a 	sub	r4,zero,r4
 c002fac:	01c00044 	movi	r7,1
 c002fb0:	003fe706 	br	c002f50 <__alt_data_end+0xfc002f50>
 c002fb4:	00c00044 	movi	r3,1
 c002fb8:	003ff106 	br	c002f80 <__alt_data_end+0xfc002f80>

0c002fbc <__udivsi3>:
 c002fbc:	200d883a 	mov	r6,r4
 c002fc0:	2900152e 	bgeu	r5,r4,c003018 <__udivsi3+0x5c>
 c002fc4:	28001416 	blt	r5,zero,c003018 <__udivsi3+0x5c>
 c002fc8:	00800804 	movi	r2,32
 c002fcc:	00c00044 	movi	r3,1
 c002fd0:	00000206 	br	c002fdc <__udivsi3+0x20>
 c002fd4:	10000e26 	beq	r2,zero,c003010 <__udivsi3+0x54>
 c002fd8:	28000516 	blt	r5,zero,c002ff0 <__udivsi3+0x34>
 c002fdc:	294b883a 	add	r5,r5,r5
 c002fe0:	10bfffc4 	addi	r2,r2,-1
 c002fe4:	18c7883a 	add	r3,r3,r3
 c002fe8:	293ffa36 	bltu	r5,r4,c002fd4 <__alt_data_end+0xfc002fd4>
 c002fec:	18000826 	beq	r3,zero,c003010 <__udivsi3+0x54>
 c002ff0:	0005883a 	mov	r2,zero
 c002ff4:	31400236 	bltu	r6,r5,c003000 <__udivsi3+0x44>
 c002ff8:	314dc83a 	sub	r6,r6,r5
 c002ffc:	10c4b03a 	or	r2,r2,r3
 c003000:	1806d07a 	srli	r3,r3,1
 c003004:	280ad07a 	srli	r5,r5,1
 c003008:	183ffa1e 	bne	r3,zero,c002ff4 <__alt_data_end+0xfc002ff4>
 c00300c:	f800283a 	ret
 c003010:	0005883a 	mov	r2,zero
 c003014:	f800283a 	ret
 c003018:	00c00044 	movi	r3,1
 c00301c:	003ff406 	br	c002ff0 <__alt_data_end+0xfc002ff0>

0c003020 <__umodsi3>:
 c003020:	2005883a 	mov	r2,r4
 c003024:	2900122e 	bgeu	r5,r4,c003070 <__umodsi3+0x50>
 c003028:	28001116 	blt	r5,zero,c003070 <__umodsi3+0x50>
 c00302c:	01800804 	movi	r6,32
 c003030:	00c00044 	movi	r3,1
 c003034:	00000206 	br	c003040 <__umodsi3+0x20>
 c003038:	30000c26 	beq	r6,zero,c00306c <__umodsi3+0x4c>
 c00303c:	28000516 	blt	r5,zero,c003054 <__umodsi3+0x34>
 c003040:	294b883a 	add	r5,r5,r5
 c003044:	31bfffc4 	addi	r6,r6,-1
 c003048:	18c7883a 	add	r3,r3,r3
 c00304c:	293ffa36 	bltu	r5,r4,c003038 <__alt_data_end+0xfc003038>
 c003050:	18000626 	beq	r3,zero,c00306c <__umodsi3+0x4c>
 c003054:	1806d07a 	srli	r3,r3,1
 c003058:	11400136 	bltu	r2,r5,c003060 <__umodsi3+0x40>
 c00305c:	1145c83a 	sub	r2,r2,r5
 c003060:	280ad07a 	srli	r5,r5,1
 c003064:	183ffb1e 	bne	r3,zero,c003054 <__alt_data_end+0xfc003054>
 c003068:	f800283a 	ret
 c00306c:	f800283a 	ret
 c003070:	00c00044 	movi	r3,1
 c003074:	003ff706 	br	c003054 <__alt_data_end+0xfc003054>

0c003078 <__mulsi3>:
 c003078:	0005883a 	mov	r2,zero
 c00307c:	20000726 	beq	r4,zero,c00309c <__mulsi3+0x24>
 c003080:	20c0004c 	andi	r3,r4,1
 c003084:	2008d07a 	srli	r4,r4,1
 c003088:	18000126 	beq	r3,zero,c003090 <__mulsi3+0x18>
 c00308c:	1145883a 	add	r2,r2,r5
 c003090:	294b883a 	add	r5,r5,r5
 c003094:	203ffa1e 	bne	r4,zero,c003080 <__alt_data_end+0xfc003080>
 c003098:	f800283a 	ret
 c00309c:	f800283a 	ret

0c0030a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0030a0:	defffe04 	addi	sp,sp,-8
 c0030a4:	dfc00115 	stw	ra,4(sp)
 c0030a8:	df000015 	stw	fp,0(sp)
 c0030ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0030b0:	d0a00917 	ldw	r2,-32732(gp)
 c0030b4:	10000326 	beq	r2,zero,c0030c4 <alt_get_errno+0x24>
 c0030b8:	d0a00917 	ldw	r2,-32732(gp)
 c0030bc:	103ee83a 	callr	r2
 c0030c0:	00000106 	br	c0030c8 <alt_get_errno+0x28>
 c0030c4:	d0a6ac04 	addi	r2,gp,-25936
}
 c0030c8:	e037883a 	mov	sp,fp
 c0030cc:	dfc00117 	ldw	ra,4(sp)
 c0030d0:	df000017 	ldw	fp,0(sp)
 c0030d4:	dec00204 	addi	sp,sp,8
 c0030d8:	f800283a 	ret

0c0030dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c0030dc:	defffb04 	addi	sp,sp,-20
 c0030e0:	dfc00415 	stw	ra,16(sp)
 c0030e4:	df000315 	stw	fp,12(sp)
 c0030e8:	df000304 	addi	fp,sp,12
 c0030ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c0030f0:	e0bfff17 	ldw	r2,-4(fp)
 c0030f4:	10000816 	blt	r2,zero,c003118 <close+0x3c>
 c0030f8:	01400304 	movi	r5,12
 c0030fc:	e13fff17 	ldw	r4,-4(fp)
 c003100:	c0030780 	call	c003078 <__mulsi3>
 c003104:	1007883a 	mov	r3,r2
 c003108:	00830034 	movhi	r2,3072
 c00310c:	10989904 	addi	r2,r2,25188
 c003110:	1885883a 	add	r2,r3,r2
 c003114:	00000106 	br	c00311c <close+0x40>
 c003118:	0005883a 	mov	r2,zero
 c00311c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c003120:	e0bffd17 	ldw	r2,-12(fp)
 c003124:	10001926 	beq	r2,zero,c00318c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c003128:	e0bffd17 	ldw	r2,-12(fp)
 c00312c:	10800017 	ldw	r2,0(r2)
 c003130:	10800417 	ldw	r2,16(r2)
 c003134:	10000626 	beq	r2,zero,c003150 <close+0x74>
 c003138:	e0bffd17 	ldw	r2,-12(fp)
 c00313c:	10800017 	ldw	r2,0(r2)
 c003140:	10800417 	ldw	r2,16(r2)
 c003144:	e13ffd17 	ldw	r4,-12(fp)
 c003148:	103ee83a 	callr	r2
 c00314c:	00000106 	br	c003154 <close+0x78>
 c003150:	0005883a 	mov	r2,zero
 c003154:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c003158:	e13fff17 	ldw	r4,-4(fp)
 c00315c:	c0037c40 	call	c0037c4 <alt_release_fd>
    if (rval < 0)
 c003160:	e0bffe17 	ldw	r2,-8(fp)
 c003164:	1000070e 	bge	r2,zero,c003184 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c003168:	c0030a00 	call	c0030a0 <alt_get_errno>
 c00316c:	1007883a 	mov	r3,r2
 c003170:	e0bffe17 	ldw	r2,-8(fp)
 c003174:	0085c83a 	sub	r2,zero,r2
 c003178:	18800015 	stw	r2,0(r3)
      return -1;
 c00317c:	00bfffc4 	movi	r2,-1
 c003180:	00000706 	br	c0031a0 <close+0xc4>
    }
    return 0;
 c003184:	0005883a 	mov	r2,zero
 c003188:	00000506 	br	c0031a0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00318c:	c0030a00 	call	c0030a0 <alt_get_errno>
 c003190:	1007883a 	mov	r3,r2
 c003194:	00801444 	movi	r2,81
 c003198:	18800015 	stw	r2,0(r3)
    return -1;
 c00319c:	00bfffc4 	movi	r2,-1
  }
}
 c0031a0:	e037883a 	mov	sp,fp
 c0031a4:	dfc00117 	ldw	ra,4(sp)
 c0031a8:	df000017 	ldw	fp,0(sp)
 c0031ac:	dec00204 	addi	sp,sp,8
 c0031b0:	f800283a 	ret

0c0031b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c0031b4:	defffc04 	addi	sp,sp,-16
 c0031b8:	df000315 	stw	fp,12(sp)
 c0031bc:	df000304 	addi	fp,sp,12
 c0031c0:	e13ffd15 	stw	r4,-12(fp)
 c0031c4:	e17ffe15 	stw	r5,-8(fp)
 c0031c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c0031cc:	e0bfff17 	ldw	r2,-4(fp)
}
 c0031d0:	e037883a 	mov	sp,fp
 c0031d4:	df000017 	ldw	fp,0(sp)
 c0031d8:	dec00104 	addi	sp,sp,4
 c0031dc:	f800283a 	ret

0c0031e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0031e0:	defffe04 	addi	sp,sp,-8
 c0031e4:	dfc00115 	stw	ra,4(sp)
 c0031e8:	df000015 	stw	fp,0(sp)
 c0031ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0031f0:	d0a00917 	ldw	r2,-32732(gp)
 c0031f4:	10000326 	beq	r2,zero,c003204 <alt_get_errno+0x24>
 c0031f8:	d0a00917 	ldw	r2,-32732(gp)
 c0031fc:	103ee83a 	callr	r2
 c003200:	00000106 	br	c003208 <alt_get_errno+0x28>
 c003204:	d0a6ac04 	addi	r2,gp,-25936
}
 c003208:	e037883a 	mov	sp,fp
 c00320c:	dfc00117 	ldw	ra,4(sp)
 c003210:	df000017 	ldw	fp,0(sp)
 c003214:	dec00204 	addi	sp,sp,8
 c003218:	f800283a 	ret

0c00321c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c00321c:	defffb04 	addi	sp,sp,-20
 c003220:	dfc00415 	stw	ra,16(sp)
 c003224:	df000315 	stw	fp,12(sp)
 c003228:	df000304 	addi	fp,sp,12
 c00322c:	e13ffe15 	stw	r4,-8(fp)
 c003230:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003234:	e0bffe17 	ldw	r2,-8(fp)
 c003238:	10000816 	blt	r2,zero,c00325c <fstat+0x40>
 c00323c:	01400304 	movi	r5,12
 c003240:	e13ffe17 	ldw	r4,-8(fp)
 c003244:	c0030780 	call	c003078 <__mulsi3>
 c003248:	1007883a 	mov	r3,r2
 c00324c:	00830034 	movhi	r2,3072
 c003250:	10989904 	addi	r2,r2,25188
 c003254:	1885883a 	add	r2,r3,r2
 c003258:	00000106 	br	c003260 <fstat+0x44>
 c00325c:	0005883a 	mov	r2,zero
 c003260:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c003264:	e0bffd17 	ldw	r2,-12(fp)
 c003268:	10001026 	beq	r2,zero,c0032ac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c00326c:	e0bffd17 	ldw	r2,-12(fp)
 c003270:	10800017 	ldw	r2,0(r2)
 c003274:	10800817 	ldw	r2,32(r2)
 c003278:	10000726 	beq	r2,zero,c003298 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c00327c:	e0bffd17 	ldw	r2,-12(fp)
 c003280:	10800017 	ldw	r2,0(r2)
 c003284:	10800817 	ldw	r2,32(r2)
 c003288:	e17fff17 	ldw	r5,-4(fp)
 c00328c:	e13ffd17 	ldw	r4,-12(fp)
 c003290:	103ee83a 	callr	r2
 c003294:	00000a06 	br	c0032c0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c003298:	e0bfff17 	ldw	r2,-4(fp)
 c00329c:	00c80004 	movi	r3,8192
 c0032a0:	10c00115 	stw	r3,4(r2)
      return 0;
 c0032a4:	0005883a 	mov	r2,zero
 c0032a8:	00000506 	br	c0032c0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c0032ac:	c0031e00 	call	c0031e0 <alt_get_errno>
 c0032b0:	1007883a 	mov	r3,r2
 c0032b4:	00801444 	movi	r2,81
 c0032b8:	18800015 	stw	r2,0(r3)
    return -1;
 c0032bc:	00bfffc4 	movi	r2,-1
  }
}
 c0032c0:	e037883a 	mov	sp,fp
 c0032c4:	dfc00117 	ldw	ra,4(sp)
 c0032c8:	df000017 	ldw	fp,0(sp)
 c0032cc:	dec00204 	addi	sp,sp,8
 c0032d0:	f800283a 	ret

0c0032d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0032d4:	defffe04 	addi	sp,sp,-8
 c0032d8:	dfc00115 	stw	ra,4(sp)
 c0032dc:	df000015 	stw	fp,0(sp)
 c0032e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0032e4:	d0a00917 	ldw	r2,-32732(gp)
 c0032e8:	10000326 	beq	r2,zero,c0032f8 <alt_get_errno+0x24>
 c0032ec:	d0a00917 	ldw	r2,-32732(gp)
 c0032f0:	103ee83a 	callr	r2
 c0032f4:	00000106 	br	c0032fc <alt_get_errno+0x28>
 c0032f8:	d0a6ac04 	addi	r2,gp,-25936
}
 c0032fc:	e037883a 	mov	sp,fp
 c003300:	dfc00117 	ldw	ra,4(sp)
 c003304:	df000017 	ldw	fp,0(sp)
 c003308:	dec00204 	addi	sp,sp,8
 c00330c:	f800283a 	ret

0c003310 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c003310:	deffed04 	addi	sp,sp,-76
 c003314:	dfc01215 	stw	ra,72(sp)
 c003318:	df001115 	stw	fp,68(sp)
 c00331c:	df001104 	addi	fp,sp,68
 c003320:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003324:	e0bfff17 	ldw	r2,-4(fp)
 c003328:	10000816 	blt	r2,zero,c00334c <isatty+0x3c>
 c00332c:	01400304 	movi	r5,12
 c003330:	e13fff17 	ldw	r4,-4(fp)
 c003334:	c0030780 	call	c003078 <__mulsi3>
 c003338:	1007883a 	mov	r3,r2
 c00333c:	00830034 	movhi	r2,3072
 c003340:	10989904 	addi	r2,r2,25188
 c003344:	1885883a 	add	r2,r3,r2
 c003348:	00000106 	br	c003350 <isatty+0x40>
 c00334c:	0005883a 	mov	r2,zero
 c003350:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c003354:	e0bfef17 	ldw	r2,-68(fp)
 c003358:	10000e26 	beq	r2,zero,c003394 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c00335c:	e0bfef17 	ldw	r2,-68(fp)
 c003360:	10800017 	ldw	r2,0(r2)
 c003364:	10800817 	ldw	r2,32(r2)
 c003368:	1000021e 	bne	r2,zero,c003374 <isatty+0x64>
    {
      return 1;
 c00336c:	00800044 	movi	r2,1
 c003370:	00000d06 	br	c0033a8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c003374:	e0bff004 	addi	r2,fp,-64
 c003378:	100b883a 	mov	r5,r2
 c00337c:	e13fff17 	ldw	r4,-4(fp)
 c003380:	c00321c0 	call	c00321c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c003384:	e0bff117 	ldw	r2,-60(fp)
 c003388:	10880020 	cmpeqi	r2,r2,8192
 c00338c:	10803fcc 	andi	r2,r2,255
 c003390:	00000506 	br	c0033a8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c003394:	c0032d40 	call	c0032d4 <alt_get_errno>
 c003398:	1007883a 	mov	r3,r2
 c00339c:	00801444 	movi	r2,81
 c0033a0:	18800015 	stw	r2,0(r3)
    return 0;
 c0033a4:	0005883a 	mov	r2,zero
  }
}
 c0033a8:	e037883a 	mov	sp,fp
 c0033ac:	dfc00117 	ldw	ra,4(sp)
 c0033b0:	df000017 	ldw	fp,0(sp)
 c0033b4:	dec00204 	addi	sp,sp,8
 c0033b8:	f800283a 	ret

0c0033bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c0033bc:	defffc04 	addi	sp,sp,-16
 c0033c0:	df000315 	stw	fp,12(sp)
 c0033c4:	df000304 	addi	fp,sp,12
 c0033c8:	e13ffd15 	stw	r4,-12(fp)
 c0033cc:	e17ffe15 	stw	r5,-8(fp)
 c0033d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c0033d4:	e0fffe17 	ldw	r3,-8(fp)
 c0033d8:	e0bffd17 	ldw	r2,-12(fp)
 c0033dc:	18800c26 	beq	r3,r2,c003410 <alt_load_section+0x54>
  {
    while( to != end )
 c0033e0:	00000806 	br	c003404 <alt_load_section+0x48>
    {
      *to++ = *from++;
 c0033e4:	e0bffe17 	ldw	r2,-8(fp)
 c0033e8:	10c00104 	addi	r3,r2,4
 c0033ec:	e0fffe15 	stw	r3,-8(fp)
 c0033f0:	e0fffd17 	ldw	r3,-12(fp)
 c0033f4:	19000104 	addi	r4,r3,4
 c0033f8:	e13ffd15 	stw	r4,-12(fp)
 c0033fc:	18c00017 	ldw	r3,0(r3)
 c003400:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c003404:	e0fffe17 	ldw	r3,-8(fp)
 c003408:	e0bfff17 	ldw	r2,-4(fp)
 c00340c:	18bff51e 	bne	r3,r2,c0033e4 <__alt_data_end+0xfc0033e4>
    {
      *to++ = *from++;
    }
  }
}
 c003410:	0001883a 	nop
 c003414:	e037883a 	mov	sp,fp
 c003418:	df000017 	ldw	fp,0(sp)
 c00341c:	dec00104 	addi	sp,sp,4
 c003420:	f800283a 	ret

0c003424 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c003424:	defffe04 	addi	sp,sp,-8
 c003428:	dfc00115 	stw	ra,4(sp)
 c00342c:	df000015 	stw	fp,0(sp)
 c003430:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c003434:	01830034 	movhi	r6,3072
 c003438:	319d1f04 	addi	r6,r6,29820
 c00343c:	01430034 	movhi	r5,3072
 c003440:	29568404 	addi	r5,r5,23056
 c003444:	01030034 	movhi	r4,3072
 c003448:	211d1f04 	addi	r4,r4,29820
 c00344c:	c0033bc0 	call	c0033bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c003450:	01830034 	movhi	r6,3072
 c003454:	31808c04 	addi	r6,r6,560
 c003458:	01430034 	movhi	r5,3072
 c00345c:	29400804 	addi	r5,r5,32
 c003460:	01030034 	movhi	r4,3072
 c003464:	21000804 	addi	r4,r4,32
 c003468:	c0033bc0 	call	c0033bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c00346c:	01830034 	movhi	r6,3072
 c003470:	31968404 	addi	r6,r6,23056
 c003474:	01430034 	movhi	r5,3072
 c003478:	29567304 	addi	r5,r5,22988
 c00347c:	01030034 	movhi	r4,3072
 c003480:	21167304 	addi	r4,r4,22988
 c003484:	c0033bc0 	call	c0033bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c003488:	c0049140 	call	c004914 <alt_dcache_flush_all>
  alt_icache_flush_all();
 c00348c:	c004ad40 	call	c004ad4 <alt_icache_flush_all>
}
 c003490:	0001883a 	nop
 c003494:	e037883a 	mov	sp,fp
 c003498:	dfc00117 	ldw	ra,4(sp)
 c00349c:	df000017 	ldw	fp,0(sp)
 c0034a0:	dec00204 	addi	sp,sp,8
 c0034a4:	f800283a 	ret

0c0034a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0034a8:	defffe04 	addi	sp,sp,-8
 c0034ac:	dfc00115 	stw	ra,4(sp)
 c0034b0:	df000015 	stw	fp,0(sp)
 c0034b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c0034b8:	d0a00917 	ldw	r2,-32732(gp)
 c0034bc:	10000326 	beq	r2,zero,c0034cc <alt_get_errno+0x24>
 c0034c0:	d0a00917 	ldw	r2,-32732(gp)
 c0034c4:	103ee83a 	callr	r2
 c0034c8:	00000106 	br	c0034d0 <alt_get_errno+0x28>
 c0034cc:	d0a6ac04 	addi	r2,gp,-25936
}
 c0034d0:	e037883a 	mov	sp,fp
 c0034d4:	dfc00117 	ldw	ra,4(sp)
 c0034d8:	df000017 	ldw	fp,0(sp)
 c0034dc:	dec00204 	addi	sp,sp,8
 c0034e0:	f800283a 	ret

0c0034e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c0034e4:	defff904 	addi	sp,sp,-28
 c0034e8:	dfc00615 	stw	ra,24(sp)
 c0034ec:	df000515 	stw	fp,20(sp)
 c0034f0:	df000504 	addi	fp,sp,20
 c0034f4:	e13ffd15 	stw	r4,-12(fp)
 c0034f8:	e17ffe15 	stw	r5,-8(fp)
 c0034fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c003500:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003504:	e0bffd17 	ldw	r2,-12(fp)
 c003508:	10000816 	blt	r2,zero,c00352c <lseek+0x48>
 c00350c:	01400304 	movi	r5,12
 c003510:	e13ffd17 	ldw	r4,-12(fp)
 c003514:	c0030780 	call	c003078 <__mulsi3>
 c003518:	1007883a 	mov	r3,r2
 c00351c:	00830034 	movhi	r2,3072
 c003520:	10989904 	addi	r2,r2,25188
 c003524:	1885883a 	add	r2,r3,r2
 c003528:	00000106 	br	c003530 <lseek+0x4c>
 c00352c:	0005883a 	mov	r2,zero
 c003530:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c003534:	e0bffc17 	ldw	r2,-16(fp)
 c003538:	10001026 	beq	r2,zero,c00357c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c00353c:	e0bffc17 	ldw	r2,-16(fp)
 c003540:	10800017 	ldw	r2,0(r2)
 c003544:	10800717 	ldw	r2,28(r2)
 c003548:	10000926 	beq	r2,zero,c003570 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c00354c:	e0bffc17 	ldw	r2,-16(fp)
 c003550:	10800017 	ldw	r2,0(r2)
 c003554:	10800717 	ldw	r2,28(r2)
 c003558:	e1bfff17 	ldw	r6,-4(fp)
 c00355c:	e17ffe17 	ldw	r5,-8(fp)
 c003560:	e13ffc17 	ldw	r4,-16(fp)
 c003564:	103ee83a 	callr	r2
 c003568:	e0bffb15 	stw	r2,-20(fp)
 c00356c:	00000506 	br	c003584 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c003570:	00bfde84 	movi	r2,-134
 c003574:	e0bffb15 	stw	r2,-20(fp)
 c003578:	00000206 	br	c003584 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c00357c:	00bfebc4 	movi	r2,-81
 c003580:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c003584:	e0bffb17 	ldw	r2,-20(fp)
 c003588:	1000070e 	bge	r2,zero,c0035a8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c00358c:	c0034a80 	call	c0034a8 <alt_get_errno>
 c003590:	1007883a 	mov	r3,r2
 c003594:	e0bffb17 	ldw	r2,-20(fp)
 c003598:	0085c83a 	sub	r2,zero,r2
 c00359c:	18800015 	stw	r2,0(r3)
    rc = -1;
 c0035a0:	00bfffc4 	movi	r2,-1
 c0035a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c0035a8:	e0bffb17 	ldw	r2,-20(fp)
}
 c0035ac:	e037883a 	mov	sp,fp
 c0035b0:	dfc00117 	ldw	ra,4(sp)
 c0035b4:	df000017 	ldw	fp,0(sp)
 c0035b8:	dec00204 	addi	sp,sp,8
 c0035bc:	f800283a 	ret

0c0035c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c0035c0:	defffd04 	addi	sp,sp,-12
 c0035c4:	dfc00215 	stw	ra,8(sp)
 c0035c8:	df000115 	stw	fp,4(sp)
 c0035cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c0035d0:	0009883a 	mov	r4,zero
 c0035d4:	c003a980 	call	c003a98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c0035d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c0035dc:	c003ad00 	call	c003ad0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c0035e0:	01830034 	movhi	r6,3072
 c0035e4:	31967a04 	addi	r6,r6,23016
 c0035e8:	01430034 	movhi	r5,3072
 c0035ec:	29567a04 	addi	r5,r5,23016
 c0035f0:	01030034 	movhi	r4,3072
 c0035f4:	21167a04 	addi	r4,r4,23016
 c0035f8:	c004e780 	call	c004e78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c0035fc:	c004a140 	call	c004a14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c003600:	01030034 	movhi	r4,3072
 c003604:	21129d04 	addi	r4,r4,19060
 c003608:	c0056380 	call	c005638 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c00360c:	d0a6ad17 	ldw	r2,-25932(gp)
 c003610:	d0e6ae17 	ldw	r3,-25928(gp)
 c003614:	d126af17 	ldw	r4,-25924(gp)
 c003618:	200d883a 	mov	r6,r4
 c00361c:	180b883a 	mov	r5,r3
 c003620:	1009883a 	mov	r4,r2
 c003624:	c00026c0 	call	c00026c <main>
 c003628:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c00362c:	01000044 	movi	r4,1
 c003630:	c0030dc0 	call	c0030dc <close>
  exit (result);
 c003634:	e13fff17 	ldw	r4,-4(fp)
 c003638:	c00564c0 	call	c00564c <exit>

0c00363c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c00363c:	defffe04 	addi	sp,sp,-8
 c003640:	df000115 	stw	fp,4(sp)
 c003644:	df000104 	addi	fp,sp,4
 c003648:	e13fff15 	stw	r4,-4(fp)
}
 c00364c:	0001883a 	nop
 c003650:	e037883a 	mov	sp,fp
 c003654:	df000017 	ldw	fp,0(sp)
 c003658:	dec00104 	addi	sp,sp,4
 c00365c:	f800283a 	ret

0c003660 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c003660:	defffe04 	addi	sp,sp,-8
 c003664:	df000115 	stw	fp,4(sp)
 c003668:	df000104 	addi	fp,sp,4
 c00366c:	e13fff15 	stw	r4,-4(fp)
}
 c003670:	0001883a 	nop
 c003674:	e037883a 	mov	sp,fp
 c003678:	df000017 	ldw	fp,0(sp)
 c00367c:	dec00104 	addi	sp,sp,4
 c003680:	f800283a 	ret

0c003684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c003684:	defffe04 	addi	sp,sp,-8
 c003688:	dfc00115 	stw	ra,4(sp)
 c00368c:	df000015 	stw	fp,0(sp)
 c003690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c003694:	d0a00917 	ldw	r2,-32732(gp)
 c003698:	10000326 	beq	r2,zero,c0036a8 <alt_get_errno+0x24>
 c00369c:	d0a00917 	ldw	r2,-32732(gp)
 c0036a0:	103ee83a 	callr	r2
 c0036a4:	00000106 	br	c0036ac <alt_get_errno+0x28>
 c0036a8:	d0a6ac04 	addi	r2,gp,-25936
}
 c0036ac:	e037883a 	mov	sp,fp
 c0036b0:	dfc00117 	ldw	ra,4(sp)
 c0036b4:	df000017 	ldw	fp,0(sp)
 c0036b8:	dec00204 	addi	sp,sp,8
 c0036bc:	f800283a 	ret

0c0036c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c0036c0:	defff904 	addi	sp,sp,-28
 c0036c4:	dfc00615 	stw	ra,24(sp)
 c0036c8:	df000515 	stw	fp,20(sp)
 c0036cc:	df000504 	addi	fp,sp,20
 c0036d0:	e13ffd15 	stw	r4,-12(fp)
 c0036d4:	e17ffe15 	stw	r5,-8(fp)
 c0036d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c0036dc:	e0bffd17 	ldw	r2,-12(fp)
 c0036e0:	10000816 	blt	r2,zero,c003704 <read+0x44>
 c0036e4:	01400304 	movi	r5,12
 c0036e8:	e13ffd17 	ldw	r4,-12(fp)
 c0036ec:	c0030780 	call	c003078 <__mulsi3>
 c0036f0:	1007883a 	mov	r3,r2
 c0036f4:	00830034 	movhi	r2,3072
 c0036f8:	10989904 	addi	r2,r2,25188
 c0036fc:	1885883a 	add	r2,r3,r2
 c003700:	00000106 	br	c003708 <read+0x48>
 c003704:	0005883a 	mov	r2,zero
 c003708:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c00370c:	e0bffb17 	ldw	r2,-20(fp)
 c003710:	10002226 	beq	r2,zero,c00379c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c003714:	e0bffb17 	ldw	r2,-20(fp)
 c003718:	10800217 	ldw	r2,8(r2)
 c00371c:	108000cc 	andi	r2,r2,3
 c003720:	10800060 	cmpeqi	r2,r2,1
 c003724:	1000181e 	bne	r2,zero,c003788 <read+0xc8>
        (fd->dev->read))
 c003728:	e0bffb17 	ldw	r2,-20(fp)
 c00372c:	10800017 	ldw	r2,0(r2)
 c003730:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c003734:	10001426 	beq	r2,zero,c003788 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c003738:	e0bffb17 	ldw	r2,-20(fp)
 c00373c:	10800017 	ldw	r2,0(r2)
 c003740:	10800517 	ldw	r2,20(r2)
 c003744:	e0ffff17 	ldw	r3,-4(fp)
 c003748:	180d883a 	mov	r6,r3
 c00374c:	e17ffe17 	ldw	r5,-8(fp)
 c003750:	e13ffb17 	ldw	r4,-20(fp)
 c003754:	103ee83a 	callr	r2
 c003758:	e0bffc15 	stw	r2,-16(fp)
 c00375c:	e0bffc17 	ldw	r2,-16(fp)
 c003760:	1000070e 	bge	r2,zero,c003780 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c003764:	c0036840 	call	c003684 <alt_get_errno>
 c003768:	1007883a 	mov	r3,r2
 c00376c:	e0bffc17 	ldw	r2,-16(fp)
 c003770:	0085c83a 	sub	r2,zero,r2
 c003774:	18800015 	stw	r2,0(r3)
          return -1;
 c003778:	00bfffc4 	movi	r2,-1
 c00377c:	00000c06 	br	c0037b0 <read+0xf0>
        }
        return rval;
 c003780:	e0bffc17 	ldw	r2,-16(fp)
 c003784:	00000a06 	br	c0037b0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c003788:	c0036840 	call	c003684 <alt_get_errno>
 c00378c:	1007883a 	mov	r3,r2
 c003790:	00800344 	movi	r2,13
 c003794:	18800015 	stw	r2,0(r3)
 c003798:	00000406 	br	c0037ac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c00379c:	c0036840 	call	c003684 <alt_get_errno>
 c0037a0:	1007883a 	mov	r3,r2
 c0037a4:	00801444 	movi	r2,81
 c0037a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c0037ac:	00bfffc4 	movi	r2,-1
}
 c0037b0:	e037883a 	mov	sp,fp
 c0037b4:	dfc00117 	ldw	ra,4(sp)
 c0037b8:	df000017 	ldw	fp,0(sp)
 c0037bc:	dec00204 	addi	sp,sp,8
 c0037c0:	f800283a 	ret

0c0037c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c0037c4:	defffc04 	addi	sp,sp,-16
 c0037c8:	dfc00315 	stw	ra,12(sp)
 c0037cc:	df000215 	stw	fp,8(sp)
 c0037d0:	dc000115 	stw	r16,4(sp)
 c0037d4:	df000204 	addi	fp,sp,8
 c0037d8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c0037dc:	e0bffe17 	ldw	r2,-8(fp)
 c0037e0:	108000d0 	cmplti	r2,r2,3
 c0037e4:	1000111e 	bne	r2,zero,c00382c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c0037e8:	04030034 	movhi	r16,3072
 c0037ec:	84189904 	addi	r16,r16,25188
 c0037f0:	e0bffe17 	ldw	r2,-8(fp)
 c0037f4:	01400304 	movi	r5,12
 c0037f8:	1009883a 	mov	r4,r2
 c0037fc:	c0030780 	call	c003078 <__mulsi3>
 c003800:	8085883a 	add	r2,r16,r2
 c003804:	10800204 	addi	r2,r2,8
 c003808:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c00380c:	04030034 	movhi	r16,3072
 c003810:	84189904 	addi	r16,r16,25188
 c003814:	e0bffe17 	ldw	r2,-8(fp)
 c003818:	01400304 	movi	r5,12
 c00381c:	1009883a 	mov	r4,r2
 c003820:	c0030780 	call	c003078 <__mulsi3>
 c003824:	8085883a 	add	r2,r16,r2
 c003828:	10000015 	stw	zero,0(r2)
  }
}
 c00382c:	0001883a 	nop
 c003830:	e6ffff04 	addi	sp,fp,-4
 c003834:	dfc00217 	ldw	ra,8(sp)
 c003838:	df000117 	ldw	fp,4(sp)
 c00383c:	dc000017 	ldw	r16,0(sp)
 c003840:	dec00304 	addi	sp,sp,12
 c003844:	f800283a 	ret

0c003848 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c003848:	defff904 	addi	sp,sp,-28
 c00384c:	df000615 	stw	fp,24(sp)
 c003850:	df000604 	addi	fp,sp,24
 c003854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c003858:	0005303a 	rdctl	r2,status
 c00385c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c003860:	e0fffe17 	ldw	r3,-8(fp)
 c003864:	00bfff84 	movi	r2,-2
 c003868:	1884703a 	and	r2,r3,r2
 c00386c:	1001703a 	wrctl	status,r2
  
  return context;
 c003870:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c003874:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c003878:	d0a00a17 	ldw	r2,-32728(gp)
 c00387c:	10c000c4 	addi	r3,r2,3
 c003880:	00bfff04 	movi	r2,-4
 c003884:	1884703a 	and	r2,r3,r2
 c003888:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c00388c:	d0e00a17 	ldw	r3,-32728(gp)
 c003890:	e0bfff17 	ldw	r2,-4(fp)
 c003894:	1887883a 	add	r3,r3,r2
 c003898:	00840034 	movhi	r2,4096
 c00389c:	10800004 	addi	r2,r2,0
 c0038a0:	10c0062e 	bgeu	r2,r3,c0038bc <sbrk+0x74>
 c0038a4:	e0bffb17 	ldw	r2,-20(fp)
 c0038a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0038ac:	e0bffa17 	ldw	r2,-24(fp)
 c0038b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c0038b4:	00bfffc4 	movi	r2,-1
 c0038b8:	00000b06 	br	c0038e8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c0038bc:	d0a00a17 	ldw	r2,-32728(gp)
 c0038c0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c0038c4:	d0e00a17 	ldw	r3,-32728(gp)
 c0038c8:	e0bfff17 	ldw	r2,-4(fp)
 c0038cc:	1885883a 	add	r2,r3,r2
 c0038d0:	d0a00a15 	stw	r2,-32728(gp)
 c0038d4:	e0bffb17 	ldw	r2,-20(fp)
 c0038d8:	e0bffc15 	stw	r2,-16(fp)
 c0038dc:	e0bffc17 	ldw	r2,-16(fp)
 c0038e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c0038e4:	e0bffd17 	ldw	r2,-12(fp)
} 
 c0038e8:	e037883a 	mov	sp,fp
 c0038ec:	df000017 	ldw	fp,0(sp)
 c0038f0:	dec00104 	addi	sp,sp,4
 c0038f4:	f800283a 	ret

0c0038f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c0038f8:	defffd04 	addi	sp,sp,-12
 c0038fc:	dfc00215 	stw	ra,8(sp)
 c003900:	df000115 	stw	fp,4(sp)
 c003904:	df000104 	addi	fp,sp,4
 c003908:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c00390c:	e13fff17 	ldw	r4,-4(fp)
 c003910:	c0047bc0 	call	c0047bc <alt_busy_sleep>
}
 c003914:	e037883a 	mov	sp,fp
 c003918:	dfc00117 	ldw	ra,4(sp)
 c00391c:	df000017 	ldw	fp,0(sp)
 c003920:	dec00204 	addi	sp,sp,8
 c003924:	f800283a 	ret

0c003928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c003928:	defffe04 	addi	sp,sp,-8
 c00392c:	dfc00115 	stw	ra,4(sp)
 c003930:	df000015 	stw	fp,0(sp)
 c003934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c003938:	d0a00917 	ldw	r2,-32732(gp)
 c00393c:	10000326 	beq	r2,zero,c00394c <alt_get_errno+0x24>
 c003940:	d0a00917 	ldw	r2,-32732(gp)
 c003944:	103ee83a 	callr	r2
 c003948:	00000106 	br	c003950 <alt_get_errno+0x28>
 c00394c:	d0a6ac04 	addi	r2,gp,-25936
}
 c003950:	e037883a 	mov	sp,fp
 c003954:	dfc00117 	ldw	ra,4(sp)
 c003958:	df000017 	ldw	fp,0(sp)
 c00395c:	dec00204 	addi	sp,sp,8
 c003960:	f800283a 	ret

0c003964 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c003964:	defff904 	addi	sp,sp,-28
 c003968:	dfc00615 	stw	ra,24(sp)
 c00396c:	df000515 	stw	fp,20(sp)
 c003970:	df000504 	addi	fp,sp,20
 c003974:	e13ffd15 	stw	r4,-12(fp)
 c003978:	e17ffe15 	stw	r5,-8(fp)
 c00397c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c003980:	e0bffd17 	ldw	r2,-12(fp)
 c003984:	10000816 	blt	r2,zero,c0039a8 <write+0x44>
 c003988:	01400304 	movi	r5,12
 c00398c:	e13ffd17 	ldw	r4,-12(fp)
 c003990:	c0030780 	call	c003078 <__mulsi3>
 c003994:	1007883a 	mov	r3,r2
 c003998:	00830034 	movhi	r2,3072
 c00399c:	10989904 	addi	r2,r2,25188
 c0039a0:	1885883a 	add	r2,r3,r2
 c0039a4:	00000106 	br	c0039ac <write+0x48>
 c0039a8:	0005883a 	mov	r2,zero
 c0039ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c0039b0:	e0bffb17 	ldw	r2,-20(fp)
 c0039b4:	10002126 	beq	r2,zero,c003a3c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c0039b8:	e0bffb17 	ldw	r2,-20(fp)
 c0039bc:	10800217 	ldw	r2,8(r2)
 c0039c0:	108000cc 	andi	r2,r2,3
 c0039c4:	10001826 	beq	r2,zero,c003a28 <write+0xc4>
 c0039c8:	e0bffb17 	ldw	r2,-20(fp)
 c0039cc:	10800017 	ldw	r2,0(r2)
 c0039d0:	10800617 	ldw	r2,24(r2)
 c0039d4:	10001426 	beq	r2,zero,c003a28 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c0039d8:	e0bffb17 	ldw	r2,-20(fp)
 c0039dc:	10800017 	ldw	r2,0(r2)
 c0039e0:	10800617 	ldw	r2,24(r2)
 c0039e4:	e0ffff17 	ldw	r3,-4(fp)
 c0039e8:	180d883a 	mov	r6,r3
 c0039ec:	e17ffe17 	ldw	r5,-8(fp)
 c0039f0:	e13ffb17 	ldw	r4,-20(fp)
 c0039f4:	103ee83a 	callr	r2
 c0039f8:	e0bffc15 	stw	r2,-16(fp)
 c0039fc:	e0bffc17 	ldw	r2,-16(fp)
 c003a00:	1000070e 	bge	r2,zero,c003a20 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c003a04:	c0039280 	call	c003928 <alt_get_errno>
 c003a08:	1007883a 	mov	r3,r2
 c003a0c:	e0bffc17 	ldw	r2,-16(fp)
 c003a10:	0085c83a 	sub	r2,zero,r2
 c003a14:	18800015 	stw	r2,0(r3)
        return -1;
 c003a18:	00bfffc4 	movi	r2,-1
 c003a1c:	00000c06 	br	c003a50 <write+0xec>
      }
      return rval;
 c003a20:	e0bffc17 	ldw	r2,-16(fp)
 c003a24:	00000a06 	br	c003a50 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c003a28:	c0039280 	call	c003928 <alt_get_errno>
 c003a2c:	1007883a 	mov	r3,r2
 c003a30:	00800344 	movi	r2,13
 c003a34:	18800015 	stw	r2,0(r3)
 c003a38:	00000406 	br	c003a4c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c003a3c:	c0039280 	call	c003928 <alt_get_errno>
 c003a40:	1007883a 	mov	r3,r2
 c003a44:	00801444 	movi	r2,81
 c003a48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c003a4c:	00bfffc4 	movi	r2,-1
}
 c003a50:	e037883a 	mov	sp,fp
 c003a54:	dfc00117 	ldw	ra,4(sp)
 c003a58:	df000017 	ldw	fp,0(sp)
 c003a5c:	dec00204 	addi	sp,sp,8
 c003a60:	f800283a 	ret

0c003a64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c003a64:	defffd04 	addi	sp,sp,-12
 c003a68:	dfc00215 	stw	ra,8(sp)
 c003a6c:	df000115 	stw	fp,4(sp)
 c003a70:	df000104 	addi	fp,sp,4
 c003a74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c003a78:	d1600604 	addi	r5,gp,-32744
 c003a7c:	e13fff17 	ldw	r4,-4(fp)
 c003a80:	c0049700 	call	c004970 <alt_dev_llist_insert>
}
 c003a84:	e037883a 	mov	sp,fp
 c003a88:	dfc00117 	ldw	ra,4(sp)
 c003a8c:	df000017 	ldw	fp,0(sp)
 c003a90:	dec00204 	addi	sp,sp,8
 c003a94:	f800283a 	ret

0c003a98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c003a98:	defffd04 	addi	sp,sp,-12
 c003a9c:	dfc00215 	stw	ra,8(sp)
 c003aa0:	df000115 	stw	fp,4(sp)
 c003aa4:	df000104 	addi	fp,sp,4
 c003aa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c003aac:	c00531c0 	call	c00531c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c003ab0:	00800044 	movi	r2,1
 c003ab4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c003ab8:	0001883a 	nop
 c003abc:	e037883a 	mov	sp,fp
 c003ac0:	dfc00117 	ldw	ra,4(sp)
 c003ac4:	df000017 	ldw	fp,0(sp)
 c003ac8:	dec00204 	addi	sp,sp,8
 c003acc:	f800283a 	ret

0c003ad0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c003ad0:	defffe04 	addi	sp,sp,-8
 c003ad4:	dfc00115 	stw	ra,4(sp)
 c003ad8:	df000015 	stw	fp,0(sp)
 c003adc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c003ae0:	01c0fa04 	movi	r7,1000
 c003ae4:	01800084 	movi	r6,2
 c003ae8:	000b883a 	mov	r5,zero
 c003aec:	01002004 	movi	r4,128
 c003af0:	c0046140 	call	c004614 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c003af4:	01800044 	movi	r6,1
 c003af8:	000b883a 	mov	r5,zero
 c003afc:	01030034 	movhi	r4,3072
 c003b00:	21190304 	addi	r4,r4,25612
 c003b04:	c003c980 	call	c003c98 <altera_avalon_jtag_uart_init>
 c003b08:	01030034 	movhi	r4,3072
 c003b0c:	2118f904 	addi	r4,r4,25572
 c003b10:	c003a640 	call	c003a64 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI0, spi0);
 c003b14:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 c003b18:	0001883a 	nop
}
 c003b1c:	0001883a 	nop
 c003b20:	e037883a 	mov	sp,fp
 c003b24:	dfc00117 	ldw	ra,4(sp)
 c003b28:	df000017 	ldw	fp,0(sp)
 c003b2c:	dec00204 	addi	sp,sp,8
 c003b30:	f800283a 	ret

0c003b34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c003b34:	defffa04 	addi	sp,sp,-24
 c003b38:	dfc00515 	stw	ra,20(sp)
 c003b3c:	df000415 	stw	fp,16(sp)
 c003b40:	df000404 	addi	fp,sp,16
 c003b44:	e13ffd15 	stw	r4,-12(fp)
 c003b48:	e17ffe15 	stw	r5,-8(fp)
 c003b4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c003b50:	e0bffd17 	ldw	r2,-12(fp)
 c003b54:	10800017 	ldw	r2,0(r2)
 c003b58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c003b5c:	e0bffc17 	ldw	r2,-16(fp)
 c003b60:	10c00a04 	addi	r3,r2,40
 c003b64:	e0bffd17 	ldw	r2,-12(fp)
 c003b68:	10800217 	ldw	r2,8(r2)
 c003b6c:	100f883a 	mov	r7,r2
 c003b70:	e1bfff17 	ldw	r6,-4(fp)
 c003b74:	e17ffe17 	ldw	r5,-8(fp)
 c003b78:	1809883a 	mov	r4,r3
 c003b7c:	c00415c0 	call	c00415c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c003b80:	e037883a 	mov	sp,fp
 c003b84:	dfc00117 	ldw	ra,4(sp)
 c003b88:	df000017 	ldw	fp,0(sp)
 c003b8c:	dec00204 	addi	sp,sp,8
 c003b90:	f800283a 	ret

0c003b94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c003b94:	defffa04 	addi	sp,sp,-24
 c003b98:	dfc00515 	stw	ra,20(sp)
 c003b9c:	df000415 	stw	fp,16(sp)
 c003ba0:	df000404 	addi	fp,sp,16
 c003ba4:	e13ffd15 	stw	r4,-12(fp)
 c003ba8:	e17ffe15 	stw	r5,-8(fp)
 c003bac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c003bb0:	e0bffd17 	ldw	r2,-12(fp)
 c003bb4:	10800017 	ldw	r2,0(r2)
 c003bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c003bbc:	e0bffc17 	ldw	r2,-16(fp)
 c003bc0:	10c00a04 	addi	r3,r2,40
 c003bc4:	e0bffd17 	ldw	r2,-12(fp)
 c003bc8:	10800217 	ldw	r2,8(r2)
 c003bcc:	100f883a 	mov	r7,r2
 c003bd0:	e1bfff17 	ldw	r6,-4(fp)
 c003bd4:	e17ffe17 	ldw	r5,-8(fp)
 c003bd8:	1809883a 	mov	r4,r3
 c003bdc:	c0043780 	call	c004378 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c003be0:	e037883a 	mov	sp,fp
 c003be4:	dfc00117 	ldw	ra,4(sp)
 c003be8:	df000017 	ldw	fp,0(sp)
 c003bec:	dec00204 	addi	sp,sp,8
 c003bf0:	f800283a 	ret

0c003bf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c003bf4:	defffc04 	addi	sp,sp,-16
 c003bf8:	dfc00315 	stw	ra,12(sp)
 c003bfc:	df000215 	stw	fp,8(sp)
 c003c00:	df000204 	addi	fp,sp,8
 c003c04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c003c08:	e0bfff17 	ldw	r2,-4(fp)
 c003c0c:	10800017 	ldw	r2,0(r2)
 c003c10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c003c14:	e0bffe17 	ldw	r2,-8(fp)
 c003c18:	10c00a04 	addi	r3,r2,40
 c003c1c:	e0bfff17 	ldw	r2,-4(fp)
 c003c20:	10800217 	ldw	r2,8(r2)
 c003c24:	100b883a 	mov	r5,r2
 c003c28:	1809883a 	mov	r4,r3
 c003c2c:	c0040040 	call	c004004 <altera_avalon_jtag_uart_close>
}
 c003c30:	e037883a 	mov	sp,fp
 c003c34:	dfc00117 	ldw	ra,4(sp)
 c003c38:	df000017 	ldw	fp,0(sp)
 c003c3c:	dec00204 	addi	sp,sp,8
 c003c40:	f800283a 	ret

0c003c44 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c003c44:	defffa04 	addi	sp,sp,-24
 c003c48:	dfc00515 	stw	ra,20(sp)
 c003c4c:	df000415 	stw	fp,16(sp)
 c003c50:	df000404 	addi	fp,sp,16
 c003c54:	e13ffd15 	stw	r4,-12(fp)
 c003c58:	e17ffe15 	stw	r5,-8(fp)
 c003c5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c003c60:	e0bffd17 	ldw	r2,-12(fp)
 c003c64:	10800017 	ldw	r2,0(r2)
 c003c68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c003c6c:	e0bffc17 	ldw	r2,-16(fp)
 c003c70:	10800a04 	addi	r2,r2,40
 c003c74:	e1bfff17 	ldw	r6,-4(fp)
 c003c78:	e17ffe17 	ldw	r5,-8(fp)
 c003c7c:	1009883a 	mov	r4,r2
 c003c80:	c00406c0 	call	c00406c <altera_avalon_jtag_uart_ioctl>
}
 c003c84:	e037883a 	mov	sp,fp
 c003c88:	dfc00117 	ldw	ra,4(sp)
 c003c8c:	df000017 	ldw	fp,0(sp)
 c003c90:	dec00204 	addi	sp,sp,8
 c003c94:	f800283a 	ret

0c003c98 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c003c98:	defffa04 	addi	sp,sp,-24
 c003c9c:	dfc00515 	stw	ra,20(sp)
 c003ca0:	df000415 	stw	fp,16(sp)
 c003ca4:	df000404 	addi	fp,sp,16
 c003ca8:	e13ffd15 	stw	r4,-12(fp)
 c003cac:	e17ffe15 	stw	r5,-8(fp)
 c003cb0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c003cb4:	e0bffd17 	ldw	r2,-12(fp)
 c003cb8:	00c00044 	movi	r3,1
 c003cbc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c003cc0:	e0bffd17 	ldw	r2,-12(fp)
 c003cc4:	10800017 	ldw	r2,0(r2)
 c003cc8:	10800104 	addi	r2,r2,4
 c003ccc:	1007883a 	mov	r3,r2
 c003cd0:	e0bffd17 	ldw	r2,-12(fp)
 c003cd4:	10800817 	ldw	r2,32(r2)
 c003cd8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c003cdc:	e0bffe17 	ldw	r2,-8(fp)
 c003ce0:	e0ffff17 	ldw	r3,-4(fp)
 c003ce4:	d8000015 	stw	zero,0(sp)
 c003ce8:	e1fffd17 	ldw	r7,-12(fp)
 c003cec:	01830034 	movhi	r6,3072
 c003cf0:	318f5604 	addi	r6,r6,15704
 c003cf4:	180b883a 	mov	r5,r3
 c003cf8:	1009883a 	mov	r4,r2
 c003cfc:	c004af40 	call	c004af4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c003d00:	e0bffd17 	ldw	r2,-12(fp)
 c003d04:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c003d08:	e0bffd17 	ldw	r2,-12(fp)
 c003d0c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c003d10:	d0e6b117 	ldw	r3,-25916(gp)
 c003d14:	e1fffd17 	ldw	r7,-12(fp)
 c003d18:	01830034 	movhi	r6,3072
 c003d1c:	318fd904 	addi	r6,r6,16228
 c003d20:	180b883a 	mov	r5,r3
 c003d24:	1009883a 	mov	r4,r2
 c003d28:	c0046900 	call	c004690 <alt_alarm_start>
 c003d2c:	1000040e 	bge	r2,zero,c003d40 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c003d30:	e0fffd17 	ldw	r3,-12(fp)
 c003d34:	00a00034 	movhi	r2,32768
 c003d38:	10bfffc4 	addi	r2,r2,-1
 c003d3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c003d40:	0001883a 	nop
 c003d44:	e037883a 	mov	sp,fp
 c003d48:	dfc00117 	ldw	ra,4(sp)
 c003d4c:	df000017 	ldw	fp,0(sp)
 c003d50:	dec00204 	addi	sp,sp,8
 c003d54:	f800283a 	ret

0c003d58 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c003d58:	defff804 	addi	sp,sp,-32
 c003d5c:	df000715 	stw	fp,28(sp)
 c003d60:	df000704 	addi	fp,sp,28
 c003d64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c003d68:	e0bfff17 	ldw	r2,-4(fp)
 c003d6c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c003d70:	e0bffb17 	ldw	r2,-20(fp)
 c003d74:	10800017 	ldw	r2,0(r2)
 c003d78:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c003d7c:	e0bffc17 	ldw	r2,-16(fp)
 c003d80:	10800104 	addi	r2,r2,4
 c003d84:	10800037 	ldwio	r2,0(r2)
 c003d88:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c003d8c:	e0bffd17 	ldw	r2,-12(fp)
 c003d90:	1080c00c 	andi	r2,r2,768
 c003d94:	10006d26 	beq	r2,zero,c003f4c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c003d98:	e0bffd17 	ldw	r2,-12(fp)
 c003d9c:	1080400c 	andi	r2,r2,256
 c003da0:	10003526 	beq	r2,zero,c003e78 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c003da4:	00800074 	movhi	r2,1
 c003da8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c003dac:	e0bffb17 	ldw	r2,-20(fp)
 c003db0:	10800a17 	ldw	r2,40(r2)
 c003db4:	10800044 	addi	r2,r2,1
 c003db8:	1081ffcc 	andi	r2,r2,2047
 c003dbc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c003dc0:	e0bffb17 	ldw	r2,-20(fp)
 c003dc4:	10c00b17 	ldw	r3,44(r2)
 c003dc8:	e0bffe17 	ldw	r2,-8(fp)
 c003dcc:	18801526 	beq	r3,r2,c003e24 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c003dd0:	e0bffc17 	ldw	r2,-16(fp)
 c003dd4:	10800037 	ldwio	r2,0(r2)
 c003dd8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c003ddc:	e0bff917 	ldw	r2,-28(fp)
 c003de0:	10a0000c 	andi	r2,r2,32768
 c003de4:	10001126 	beq	r2,zero,c003e2c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c003de8:	e0bffb17 	ldw	r2,-20(fp)
 c003dec:	10800a17 	ldw	r2,40(r2)
 c003df0:	e0fff917 	ldw	r3,-28(fp)
 c003df4:	1809883a 	mov	r4,r3
 c003df8:	e0fffb17 	ldw	r3,-20(fp)
 c003dfc:	1885883a 	add	r2,r3,r2
 c003e00:	10800e04 	addi	r2,r2,56
 c003e04:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c003e08:	e0bffb17 	ldw	r2,-20(fp)
 c003e0c:	10800a17 	ldw	r2,40(r2)
 c003e10:	10800044 	addi	r2,r2,1
 c003e14:	10c1ffcc 	andi	r3,r2,2047
 c003e18:	e0bffb17 	ldw	r2,-20(fp)
 c003e1c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c003e20:	003fe206 	br	c003dac <__alt_data_end+0xfc003dac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c003e24:	0001883a 	nop
 c003e28:	00000106 	br	c003e30 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c003e2c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c003e30:	e0bff917 	ldw	r2,-28(fp)
 c003e34:	10bfffec 	andhi	r2,r2,65535
 c003e38:	10000f26 	beq	r2,zero,c003e78 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c003e3c:	e0bffb17 	ldw	r2,-20(fp)
 c003e40:	10c00817 	ldw	r3,32(r2)
 c003e44:	00bfff84 	movi	r2,-2
 c003e48:	1886703a 	and	r3,r3,r2
 c003e4c:	e0bffb17 	ldw	r2,-20(fp)
 c003e50:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c003e54:	e0bffc17 	ldw	r2,-16(fp)
 c003e58:	10800104 	addi	r2,r2,4
 c003e5c:	1007883a 	mov	r3,r2
 c003e60:	e0bffb17 	ldw	r2,-20(fp)
 c003e64:	10800817 	ldw	r2,32(r2)
 c003e68:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c003e6c:	e0bffc17 	ldw	r2,-16(fp)
 c003e70:	10800104 	addi	r2,r2,4
 c003e74:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c003e78:	e0bffd17 	ldw	r2,-12(fp)
 c003e7c:	1080800c 	andi	r2,r2,512
 c003e80:	103fbe26 	beq	r2,zero,c003d7c <__alt_data_end+0xfc003d7c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c003e84:	e0bffd17 	ldw	r2,-12(fp)
 c003e88:	1004d43a 	srli	r2,r2,16
 c003e8c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c003e90:	00001406 	br	c003ee4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c003e94:	e0bffc17 	ldw	r2,-16(fp)
 c003e98:	e0fffb17 	ldw	r3,-20(fp)
 c003e9c:	18c00d17 	ldw	r3,52(r3)
 c003ea0:	e13ffb17 	ldw	r4,-20(fp)
 c003ea4:	20c7883a 	add	r3,r4,r3
 c003ea8:	18c20e04 	addi	r3,r3,2104
 c003eac:	18c00003 	ldbu	r3,0(r3)
 c003eb0:	18c03fcc 	andi	r3,r3,255
 c003eb4:	18c0201c 	xori	r3,r3,128
 c003eb8:	18ffe004 	addi	r3,r3,-128
 c003ebc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c003ec0:	e0bffb17 	ldw	r2,-20(fp)
 c003ec4:	10800d17 	ldw	r2,52(r2)
 c003ec8:	10800044 	addi	r2,r2,1
 c003ecc:	10c1ffcc 	andi	r3,r2,2047
 c003ed0:	e0bffb17 	ldw	r2,-20(fp)
 c003ed4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c003ed8:	e0bffa17 	ldw	r2,-24(fp)
 c003edc:	10bfffc4 	addi	r2,r2,-1
 c003ee0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c003ee4:	e0bffa17 	ldw	r2,-24(fp)
 c003ee8:	10000526 	beq	r2,zero,c003f00 <altera_avalon_jtag_uart_irq+0x1a8>
 c003eec:	e0bffb17 	ldw	r2,-20(fp)
 c003ef0:	10c00d17 	ldw	r3,52(r2)
 c003ef4:	e0bffb17 	ldw	r2,-20(fp)
 c003ef8:	10800c17 	ldw	r2,48(r2)
 c003efc:	18bfe51e 	bne	r3,r2,c003e94 <__alt_data_end+0xfc003e94>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c003f00:	e0bffa17 	ldw	r2,-24(fp)
 c003f04:	103f9d26 	beq	r2,zero,c003d7c <__alt_data_end+0xfc003d7c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c003f08:	e0bffb17 	ldw	r2,-20(fp)
 c003f0c:	10c00817 	ldw	r3,32(r2)
 c003f10:	00bfff44 	movi	r2,-3
 c003f14:	1886703a 	and	r3,r3,r2
 c003f18:	e0bffb17 	ldw	r2,-20(fp)
 c003f1c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c003f20:	e0bffb17 	ldw	r2,-20(fp)
 c003f24:	10800017 	ldw	r2,0(r2)
 c003f28:	10800104 	addi	r2,r2,4
 c003f2c:	1007883a 	mov	r3,r2
 c003f30:	e0bffb17 	ldw	r2,-20(fp)
 c003f34:	10800817 	ldw	r2,32(r2)
 c003f38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c003f3c:	e0bffc17 	ldw	r2,-16(fp)
 c003f40:	10800104 	addi	r2,r2,4
 c003f44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c003f48:	003f8c06 	br	c003d7c <__alt_data_end+0xfc003d7c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c003f4c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c003f50:	0001883a 	nop
 c003f54:	e037883a 	mov	sp,fp
 c003f58:	df000017 	ldw	fp,0(sp)
 c003f5c:	dec00104 	addi	sp,sp,4
 c003f60:	f800283a 	ret

0c003f64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c003f64:	defff804 	addi	sp,sp,-32
 c003f68:	df000715 	stw	fp,28(sp)
 c003f6c:	df000704 	addi	fp,sp,28
 c003f70:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c003f74:	e0bffb17 	ldw	r2,-20(fp)
 c003f78:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c003f7c:	e0bff917 	ldw	r2,-28(fp)
 c003f80:	10800017 	ldw	r2,0(r2)
 c003f84:	10800104 	addi	r2,r2,4
 c003f88:	10800037 	ldwio	r2,0(r2)
 c003f8c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c003f90:	e0bffa17 	ldw	r2,-24(fp)
 c003f94:	1081000c 	andi	r2,r2,1024
 c003f98:	10000b26 	beq	r2,zero,c003fc8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c003f9c:	e0bff917 	ldw	r2,-28(fp)
 c003fa0:	10800017 	ldw	r2,0(r2)
 c003fa4:	10800104 	addi	r2,r2,4
 c003fa8:	1007883a 	mov	r3,r2
 c003fac:	e0bff917 	ldw	r2,-28(fp)
 c003fb0:	10800817 	ldw	r2,32(r2)
 c003fb4:	10810014 	ori	r2,r2,1024
 c003fb8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c003fbc:	e0bff917 	ldw	r2,-28(fp)
 c003fc0:	10000915 	stw	zero,36(r2)
 c003fc4:	00000a06 	br	c003ff0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c003fc8:	e0bff917 	ldw	r2,-28(fp)
 c003fcc:	10c00917 	ldw	r3,36(r2)
 c003fd0:	00a00034 	movhi	r2,32768
 c003fd4:	10bfff04 	addi	r2,r2,-4
 c003fd8:	10c00536 	bltu	r2,r3,c003ff0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c003fdc:	e0bff917 	ldw	r2,-28(fp)
 c003fe0:	10800917 	ldw	r2,36(r2)
 c003fe4:	10c00044 	addi	r3,r2,1
 c003fe8:	e0bff917 	ldw	r2,-28(fp)
 c003fec:	10c00915 	stw	r3,36(r2)
 c003ff0:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c003ff4:	e037883a 	mov	sp,fp
 c003ff8:	df000017 	ldw	fp,0(sp)
 c003ffc:	dec00104 	addi	sp,sp,4
 c004000:	f800283a 	ret

0c004004 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c004004:	defffd04 	addi	sp,sp,-12
 c004008:	df000215 	stw	fp,8(sp)
 c00400c:	df000204 	addi	fp,sp,8
 c004010:	e13ffe15 	stw	r4,-8(fp)
 c004014:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c004018:	00000506 	br	c004030 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c00401c:	e0bfff17 	ldw	r2,-4(fp)
 c004020:	1090000c 	andi	r2,r2,16384
 c004024:	10000226 	beq	r2,zero,c004030 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c004028:	00bffd44 	movi	r2,-11
 c00402c:	00000b06 	br	c00405c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c004030:	e0bffe17 	ldw	r2,-8(fp)
 c004034:	10c00d17 	ldw	r3,52(r2)
 c004038:	e0bffe17 	ldw	r2,-8(fp)
 c00403c:	10800c17 	ldw	r2,48(r2)
 c004040:	18800526 	beq	r3,r2,c004058 <altera_avalon_jtag_uart_close+0x54>
 c004044:	e0bffe17 	ldw	r2,-8(fp)
 c004048:	10c00917 	ldw	r3,36(r2)
 c00404c:	e0bffe17 	ldw	r2,-8(fp)
 c004050:	10800117 	ldw	r2,4(r2)
 c004054:	18bff136 	bltu	r3,r2,c00401c <__alt_data_end+0xfc00401c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c004058:	0005883a 	mov	r2,zero
}
 c00405c:	e037883a 	mov	sp,fp
 c004060:	df000017 	ldw	fp,0(sp)
 c004064:	dec00104 	addi	sp,sp,4
 c004068:	f800283a 	ret

0c00406c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c00406c:	defffa04 	addi	sp,sp,-24
 c004070:	df000515 	stw	fp,20(sp)
 c004074:	df000504 	addi	fp,sp,20
 c004078:	e13ffd15 	stw	r4,-12(fp)
 c00407c:	e17ffe15 	stw	r5,-8(fp)
 c004080:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c004084:	00bff9c4 	movi	r2,-25
 c004088:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c00408c:	e0bffe17 	ldw	r2,-8(fp)
 c004090:	10da8060 	cmpeqi	r3,r2,27137
 c004094:	1800031e 	bne	r3,zero,c0040a4 <altera_avalon_jtag_uart_ioctl+0x38>
 c004098:	109a80a0 	cmpeqi	r2,r2,27138
 c00409c:	1000181e 	bne	r2,zero,c004100 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c0040a0:	00002906 	br	c004148 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c0040a4:	e0bffd17 	ldw	r2,-12(fp)
 c0040a8:	10c00117 	ldw	r3,4(r2)
 c0040ac:	00a00034 	movhi	r2,32768
 c0040b0:	10bfffc4 	addi	r2,r2,-1
 c0040b4:	18802126 	beq	r3,r2,c00413c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c0040b8:	e0bfff17 	ldw	r2,-4(fp)
 c0040bc:	10800017 	ldw	r2,0(r2)
 c0040c0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c0040c4:	e0bffc17 	ldw	r2,-16(fp)
 c0040c8:	10800090 	cmplti	r2,r2,2
 c0040cc:	1000061e 	bne	r2,zero,c0040e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 c0040d0:	e0fffc17 	ldw	r3,-16(fp)
 c0040d4:	00a00034 	movhi	r2,32768
 c0040d8:	10bfffc4 	addi	r2,r2,-1
 c0040dc:	18800226 	beq	r3,r2,c0040e8 <altera_avalon_jtag_uart_ioctl+0x7c>
 c0040e0:	e0bffc17 	ldw	r2,-16(fp)
 c0040e4:	00000206 	br	c0040f0 <altera_avalon_jtag_uart_ioctl+0x84>
 c0040e8:	00a00034 	movhi	r2,32768
 c0040ec:	10bfff84 	addi	r2,r2,-2
 c0040f0:	e0fffd17 	ldw	r3,-12(fp)
 c0040f4:	18800115 	stw	r2,4(r3)
      rc = 0;
 c0040f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c0040fc:	00000f06 	br	c00413c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c004100:	e0bffd17 	ldw	r2,-12(fp)
 c004104:	10c00117 	ldw	r3,4(r2)
 c004108:	00a00034 	movhi	r2,32768
 c00410c:	10bfffc4 	addi	r2,r2,-1
 c004110:	18800c26 	beq	r3,r2,c004144 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c004114:	e0bffd17 	ldw	r2,-12(fp)
 c004118:	10c00917 	ldw	r3,36(r2)
 c00411c:	e0bffd17 	ldw	r2,-12(fp)
 c004120:	10800117 	ldw	r2,4(r2)
 c004124:	1885803a 	cmpltu	r2,r3,r2
 c004128:	10c03fcc 	andi	r3,r2,255
 c00412c:	e0bfff17 	ldw	r2,-4(fp)
 c004130:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c004134:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c004138:	00000206 	br	c004144 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c00413c:	0001883a 	nop
 c004140:	00000106 	br	c004148 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c004144:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c004148:	e0bffb17 	ldw	r2,-20(fp)
}
 c00414c:	e037883a 	mov	sp,fp
 c004150:	df000017 	ldw	fp,0(sp)
 c004154:	dec00104 	addi	sp,sp,4
 c004158:	f800283a 	ret

0c00415c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c00415c:	defff304 	addi	sp,sp,-52
 c004160:	dfc00c15 	stw	ra,48(sp)
 c004164:	df000b15 	stw	fp,44(sp)
 c004168:	df000b04 	addi	fp,sp,44
 c00416c:	e13ffc15 	stw	r4,-16(fp)
 c004170:	e17ffd15 	stw	r5,-12(fp)
 c004174:	e1bffe15 	stw	r6,-8(fp)
 c004178:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c00417c:	e0bffd17 	ldw	r2,-12(fp)
 c004180:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c004184:	00004706 	br	c0042a4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c004188:	e0bffc17 	ldw	r2,-16(fp)
 c00418c:	10800a17 	ldw	r2,40(r2)
 c004190:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c004194:	e0bffc17 	ldw	r2,-16(fp)
 c004198:	10800b17 	ldw	r2,44(r2)
 c00419c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c0041a0:	e0fff717 	ldw	r3,-36(fp)
 c0041a4:	e0bff817 	ldw	r2,-32(fp)
 c0041a8:	18800536 	bltu	r3,r2,c0041c0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c0041ac:	e0fff717 	ldw	r3,-36(fp)
 c0041b0:	e0bff817 	ldw	r2,-32(fp)
 c0041b4:	1885c83a 	sub	r2,r3,r2
 c0041b8:	e0bff615 	stw	r2,-40(fp)
 c0041bc:	00000406 	br	c0041d0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c0041c0:	00c20004 	movi	r3,2048
 c0041c4:	e0bff817 	ldw	r2,-32(fp)
 c0041c8:	1885c83a 	sub	r2,r3,r2
 c0041cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c0041d0:	e0bff617 	ldw	r2,-40(fp)
 c0041d4:	10001e26 	beq	r2,zero,c004250 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c0041d8:	e0fffe17 	ldw	r3,-8(fp)
 c0041dc:	e0bff617 	ldw	r2,-40(fp)
 c0041e0:	1880022e 	bgeu	r3,r2,c0041ec <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c0041e4:	e0bffe17 	ldw	r2,-8(fp)
 c0041e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c0041ec:	e0bffc17 	ldw	r2,-16(fp)
 c0041f0:	10c00e04 	addi	r3,r2,56
 c0041f4:	e0bff817 	ldw	r2,-32(fp)
 c0041f8:	1885883a 	add	r2,r3,r2
 c0041fc:	e1bff617 	ldw	r6,-40(fp)
 c004200:	100b883a 	mov	r5,r2
 c004204:	e13ff517 	ldw	r4,-44(fp)
 c004208:	c0016f00 	call	c0016f0 <memcpy>
      ptr   += n;
 c00420c:	e0fff517 	ldw	r3,-44(fp)
 c004210:	e0bff617 	ldw	r2,-40(fp)
 c004214:	1885883a 	add	r2,r3,r2
 c004218:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c00421c:	e0fffe17 	ldw	r3,-8(fp)
 c004220:	e0bff617 	ldw	r2,-40(fp)
 c004224:	1885c83a 	sub	r2,r3,r2
 c004228:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00422c:	e0fff817 	ldw	r3,-32(fp)
 c004230:	e0bff617 	ldw	r2,-40(fp)
 c004234:	1885883a 	add	r2,r3,r2
 c004238:	10c1ffcc 	andi	r3,r2,2047
 c00423c:	e0bffc17 	ldw	r2,-16(fp)
 c004240:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c004244:	e0bffe17 	ldw	r2,-8(fp)
 c004248:	00bfcf16 	blt	zero,r2,c004188 <__alt_data_end+0xfc004188>
 c00424c:	00000106 	br	c004254 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c004250:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c004254:	e0fff517 	ldw	r3,-44(fp)
 c004258:	e0bffd17 	ldw	r2,-12(fp)
 c00425c:	1880141e 	bne	r3,r2,c0042b0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c004260:	e0bfff17 	ldw	r2,-4(fp)
 c004264:	1090000c 	andi	r2,r2,16384
 c004268:	1000131e 	bne	r2,zero,c0042b8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c00426c:	0001883a 	nop
 c004270:	e0bffc17 	ldw	r2,-16(fp)
 c004274:	10c00a17 	ldw	r3,40(r2)
 c004278:	e0bff717 	ldw	r2,-36(fp)
 c00427c:	1880051e 	bne	r3,r2,c004294 <altera_avalon_jtag_uart_read+0x138>
 c004280:	e0bffc17 	ldw	r2,-16(fp)
 c004284:	10c00917 	ldw	r3,36(r2)
 c004288:	e0bffc17 	ldw	r2,-16(fp)
 c00428c:	10800117 	ldw	r2,4(r2)
 c004290:	18bff736 	bltu	r3,r2,c004270 <__alt_data_end+0xfc004270>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c004294:	e0bffc17 	ldw	r2,-16(fp)
 c004298:	10c00a17 	ldw	r3,40(r2)
 c00429c:	e0bff717 	ldw	r2,-36(fp)
 c0042a0:	18800726 	beq	r3,r2,c0042c0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c0042a4:	e0bffe17 	ldw	r2,-8(fp)
 c0042a8:	00bfb716 	blt	zero,r2,c004188 <__alt_data_end+0xfc004188>
 c0042ac:	00000506 	br	c0042c4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c0042b0:	0001883a 	nop
 c0042b4:	00000306 	br	c0042c4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c0042b8:	0001883a 	nop
 c0042bc:	00000106 	br	c0042c4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c0042c0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c0042c4:	e0fff517 	ldw	r3,-44(fp)
 c0042c8:	e0bffd17 	ldw	r2,-12(fp)
 c0042cc:	18801826 	beq	r3,r2,c004330 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0042d0:	0005303a 	rdctl	r2,status
 c0042d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0042d8:	e0fffb17 	ldw	r3,-20(fp)
 c0042dc:	00bfff84 	movi	r2,-2
 c0042e0:	1884703a 	and	r2,r3,r2
 c0042e4:	1001703a 	wrctl	status,r2
  
  return context;
 c0042e8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c0042ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c0042f0:	e0bffc17 	ldw	r2,-16(fp)
 c0042f4:	10800817 	ldw	r2,32(r2)
 c0042f8:	10c00054 	ori	r3,r2,1
 c0042fc:	e0bffc17 	ldw	r2,-16(fp)
 c004300:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c004304:	e0bffc17 	ldw	r2,-16(fp)
 c004308:	10800017 	ldw	r2,0(r2)
 c00430c:	10800104 	addi	r2,r2,4
 c004310:	1007883a 	mov	r3,r2
 c004314:	e0bffc17 	ldw	r2,-16(fp)
 c004318:	10800817 	ldw	r2,32(r2)
 c00431c:	18800035 	stwio	r2,0(r3)
 c004320:	e0bffa17 	ldw	r2,-24(fp)
 c004324:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004328:	e0bff917 	ldw	r2,-28(fp)
 c00432c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c004330:	e0fff517 	ldw	r3,-44(fp)
 c004334:	e0bffd17 	ldw	r2,-12(fp)
 c004338:	18800426 	beq	r3,r2,c00434c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c00433c:	e0fff517 	ldw	r3,-44(fp)
 c004340:	e0bffd17 	ldw	r2,-12(fp)
 c004344:	1885c83a 	sub	r2,r3,r2
 c004348:	00000606 	br	c004364 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c00434c:	e0bfff17 	ldw	r2,-4(fp)
 c004350:	1090000c 	andi	r2,r2,16384
 c004354:	10000226 	beq	r2,zero,c004360 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c004358:	00bffd44 	movi	r2,-11
 c00435c:	00000106 	br	c004364 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c004360:	00bffec4 	movi	r2,-5
}
 c004364:	e037883a 	mov	sp,fp
 c004368:	dfc00117 	ldw	ra,4(sp)
 c00436c:	df000017 	ldw	fp,0(sp)
 c004370:	dec00204 	addi	sp,sp,8
 c004374:	f800283a 	ret

0c004378 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c004378:	defff304 	addi	sp,sp,-52
 c00437c:	dfc00c15 	stw	ra,48(sp)
 c004380:	df000b15 	stw	fp,44(sp)
 c004384:	df000b04 	addi	fp,sp,44
 c004388:	e13ffc15 	stw	r4,-16(fp)
 c00438c:	e17ffd15 	stw	r5,-12(fp)
 c004390:	e1bffe15 	stw	r6,-8(fp)
 c004394:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c004398:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c00439c:	e0bffd17 	ldw	r2,-12(fp)
 c0043a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c0043a4:	00003706 	br	c004484 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c0043a8:	e0bffc17 	ldw	r2,-16(fp)
 c0043ac:	10800c17 	ldw	r2,48(r2)
 c0043b0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c0043b4:	e0bffc17 	ldw	r2,-16(fp)
 c0043b8:	10800d17 	ldw	r2,52(r2)
 c0043bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c0043c0:	e0fff917 	ldw	r3,-28(fp)
 c0043c4:	e0bff517 	ldw	r2,-44(fp)
 c0043c8:	1880062e 	bgeu	r3,r2,c0043e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c0043cc:	e0fff517 	ldw	r3,-44(fp)
 c0043d0:	e0bff917 	ldw	r2,-28(fp)
 c0043d4:	1885c83a 	sub	r2,r3,r2
 c0043d8:	10bfffc4 	addi	r2,r2,-1
 c0043dc:	e0bff615 	stw	r2,-40(fp)
 c0043e0:	00000b06 	br	c004410 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c0043e4:	e0bff517 	ldw	r2,-44(fp)
 c0043e8:	10000526 	beq	r2,zero,c004400 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c0043ec:	00c20004 	movi	r3,2048
 c0043f0:	e0bff917 	ldw	r2,-28(fp)
 c0043f4:	1885c83a 	sub	r2,r3,r2
 c0043f8:	e0bff615 	stw	r2,-40(fp)
 c0043fc:	00000406 	br	c004410 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c004400:	00c1ffc4 	movi	r3,2047
 c004404:	e0bff917 	ldw	r2,-28(fp)
 c004408:	1885c83a 	sub	r2,r3,r2
 c00440c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c004410:	e0bff617 	ldw	r2,-40(fp)
 c004414:	10001e26 	beq	r2,zero,c004490 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c004418:	e0fffe17 	ldw	r3,-8(fp)
 c00441c:	e0bff617 	ldw	r2,-40(fp)
 c004420:	1880022e 	bgeu	r3,r2,c00442c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c004424:	e0bffe17 	ldw	r2,-8(fp)
 c004428:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c00442c:	e0bffc17 	ldw	r2,-16(fp)
 c004430:	10c20e04 	addi	r3,r2,2104
 c004434:	e0bff917 	ldw	r2,-28(fp)
 c004438:	1885883a 	add	r2,r3,r2
 c00443c:	e1bff617 	ldw	r6,-40(fp)
 c004440:	e17ffd17 	ldw	r5,-12(fp)
 c004444:	1009883a 	mov	r4,r2
 c004448:	c0016f00 	call	c0016f0 <memcpy>
      ptr   += n;
 c00444c:	e0fffd17 	ldw	r3,-12(fp)
 c004450:	e0bff617 	ldw	r2,-40(fp)
 c004454:	1885883a 	add	r2,r3,r2
 c004458:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c00445c:	e0fffe17 	ldw	r3,-8(fp)
 c004460:	e0bff617 	ldw	r2,-40(fp)
 c004464:	1885c83a 	sub	r2,r3,r2
 c004468:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00446c:	e0fff917 	ldw	r3,-28(fp)
 c004470:	e0bff617 	ldw	r2,-40(fp)
 c004474:	1885883a 	add	r2,r3,r2
 c004478:	10c1ffcc 	andi	r3,r2,2047
 c00447c:	e0bffc17 	ldw	r2,-16(fp)
 c004480:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c004484:	e0bffe17 	ldw	r2,-8(fp)
 c004488:	00bfc716 	blt	zero,r2,c0043a8 <__alt_data_end+0xfc0043a8>
 c00448c:	00000106 	br	c004494 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c004490:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004494:	0005303a 	rdctl	r2,status
 c004498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00449c:	e0fffb17 	ldw	r3,-20(fp)
 c0044a0:	00bfff84 	movi	r2,-2
 c0044a4:	1884703a 	and	r2,r3,r2
 c0044a8:	1001703a 	wrctl	status,r2
  
  return context;
 c0044ac:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c0044b0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c0044b4:	e0bffc17 	ldw	r2,-16(fp)
 c0044b8:	10800817 	ldw	r2,32(r2)
 c0044bc:	10c00094 	ori	r3,r2,2
 c0044c0:	e0bffc17 	ldw	r2,-16(fp)
 c0044c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c0044c8:	e0bffc17 	ldw	r2,-16(fp)
 c0044cc:	10800017 	ldw	r2,0(r2)
 c0044d0:	10800104 	addi	r2,r2,4
 c0044d4:	1007883a 	mov	r3,r2
 c0044d8:	e0bffc17 	ldw	r2,-16(fp)
 c0044dc:	10800817 	ldw	r2,32(r2)
 c0044e0:	18800035 	stwio	r2,0(r3)
 c0044e4:	e0bffa17 	ldw	r2,-24(fp)
 c0044e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0044ec:	e0bff817 	ldw	r2,-32(fp)
 c0044f0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c0044f4:	e0bffe17 	ldw	r2,-8(fp)
 c0044f8:	0080100e 	bge	zero,r2,c00453c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c0044fc:	e0bfff17 	ldw	r2,-4(fp)
 c004500:	1090000c 	andi	r2,r2,16384
 c004504:	1000101e 	bne	r2,zero,c004548 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c004508:	0001883a 	nop
 c00450c:	e0bffc17 	ldw	r2,-16(fp)
 c004510:	10c00d17 	ldw	r3,52(r2)
 c004514:	e0bff517 	ldw	r2,-44(fp)
 c004518:	1880051e 	bne	r3,r2,c004530 <altera_avalon_jtag_uart_write+0x1b8>
 c00451c:	e0bffc17 	ldw	r2,-16(fp)
 c004520:	10c00917 	ldw	r3,36(r2)
 c004524:	e0bffc17 	ldw	r2,-16(fp)
 c004528:	10800117 	ldw	r2,4(r2)
 c00452c:	18bff736 	bltu	r3,r2,c00450c <__alt_data_end+0xfc00450c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c004530:	e0bffc17 	ldw	r2,-16(fp)
 c004534:	10800917 	ldw	r2,36(r2)
 c004538:	1000051e 	bne	r2,zero,c004550 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c00453c:	e0bffe17 	ldw	r2,-8(fp)
 c004540:	00bfd016 	blt	zero,r2,c004484 <__alt_data_end+0xfc004484>
 c004544:	00000306 	br	c004554 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c004548:	0001883a 	nop
 c00454c:	00000106 	br	c004554 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c004550:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c004554:	e0fffd17 	ldw	r3,-12(fp)
 c004558:	e0bff717 	ldw	r2,-36(fp)
 c00455c:	18800426 	beq	r3,r2,c004570 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c004560:	e0fffd17 	ldw	r3,-12(fp)
 c004564:	e0bff717 	ldw	r2,-36(fp)
 c004568:	1885c83a 	sub	r2,r3,r2
 c00456c:	00000606 	br	c004588 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c004570:	e0bfff17 	ldw	r2,-4(fp)
 c004574:	1090000c 	andi	r2,r2,16384
 c004578:	10000226 	beq	r2,zero,c004584 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c00457c:	00bffd44 	movi	r2,-11
 c004580:	00000106 	br	c004588 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c004584:	00bffec4 	movi	r2,-5
}
 c004588:	e037883a 	mov	sp,fp
 c00458c:	dfc00117 	ldw	ra,4(sp)
 c004590:	df000017 	ldw	fp,0(sp)
 c004594:	dec00204 	addi	sp,sp,8
 c004598:	f800283a 	ret

0c00459c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c00459c:	defffa04 	addi	sp,sp,-24
 c0045a0:	dfc00515 	stw	ra,20(sp)
 c0045a4:	df000415 	stw	fp,16(sp)
 c0045a8:	df000404 	addi	fp,sp,16
 c0045ac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c0045b0:	0007883a 	mov	r3,zero
 c0045b4:	e0bfff17 	ldw	r2,-4(fp)
 c0045b8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c0045bc:	e0bfff17 	ldw	r2,-4(fp)
 c0045c0:	10800104 	addi	r2,r2,4
 c0045c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0045c8:	0005303a 	rdctl	r2,status
 c0045cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0045d0:	e0fffd17 	ldw	r3,-12(fp)
 c0045d4:	00bfff84 	movi	r2,-2
 c0045d8:	1884703a 	and	r2,r3,r2
 c0045dc:	1001703a 	wrctl	status,r2
  
  return context;
 c0045e0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c0045e4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c0045e8:	c0052140 	call	c005214 <alt_tick>
 c0045ec:	e0bffc17 	ldw	r2,-16(fp)
 c0045f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0045f4:	e0bffe17 	ldw	r2,-8(fp)
 c0045f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c0045fc:	0001883a 	nop
 c004600:	e037883a 	mov	sp,fp
 c004604:	dfc00117 	ldw	ra,4(sp)
 c004608:	df000017 	ldw	fp,0(sp)
 c00460c:	dec00204 	addi	sp,sp,8
 c004610:	f800283a 	ret

0c004614 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c004614:	defff804 	addi	sp,sp,-32
 c004618:	dfc00715 	stw	ra,28(sp)
 c00461c:	df000615 	stw	fp,24(sp)
 c004620:	df000604 	addi	fp,sp,24
 c004624:	e13ffc15 	stw	r4,-16(fp)
 c004628:	e17ffd15 	stw	r5,-12(fp)
 c00462c:	e1bffe15 	stw	r6,-8(fp)
 c004630:	e1ffff15 	stw	r7,-4(fp)
 c004634:	e0bfff17 	ldw	r2,-4(fp)
 c004638:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c00463c:	d0a6b117 	ldw	r2,-25916(gp)
 c004640:	1000021e 	bne	r2,zero,c00464c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c004644:	e0bffb17 	ldw	r2,-20(fp)
 c004648:	d0a6b115 	stw	r2,-25916(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c00464c:	e0bffc17 	ldw	r2,-16(fp)
 c004650:	10800104 	addi	r2,r2,4
 c004654:	00c001c4 	movi	r3,7
 c004658:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c00465c:	d8000015 	stw	zero,0(sp)
 c004660:	e1fffc17 	ldw	r7,-16(fp)
 c004664:	01830034 	movhi	r6,3072
 c004668:	31916704 	addi	r6,r6,17820
 c00466c:	e17ffe17 	ldw	r5,-8(fp)
 c004670:	e13ffd17 	ldw	r4,-12(fp)
 c004674:	c004af40 	call	c004af4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c004678:	0001883a 	nop
 c00467c:	e037883a 	mov	sp,fp
 c004680:	dfc00117 	ldw	ra,4(sp)
 c004684:	df000017 	ldw	fp,0(sp)
 c004688:	dec00204 	addi	sp,sp,8
 c00468c:	f800283a 	ret

0c004690 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c004690:	defff504 	addi	sp,sp,-44
 c004694:	df000a15 	stw	fp,40(sp)
 c004698:	df000a04 	addi	fp,sp,40
 c00469c:	e13ffc15 	stw	r4,-16(fp)
 c0046a0:	e17ffd15 	stw	r5,-12(fp)
 c0046a4:	e1bffe15 	stw	r6,-8(fp)
 c0046a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c0046ac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0046b0:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 c0046b4:	10003c26 	beq	r2,zero,c0047a8 <alt_alarm_start+0x118>
  {
    if (alarm)
 c0046b8:	e0bffc17 	ldw	r2,-16(fp)
 c0046bc:	10003826 	beq	r2,zero,c0047a0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c0046c0:	e0bffc17 	ldw	r2,-16(fp)
 c0046c4:	e0fffe17 	ldw	r3,-8(fp)
 c0046c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c0046cc:	e0bffc17 	ldw	r2,-16(fp)
 c0046d0:	e0ffff17 	ldw	r3,-4(fp)
 c0046d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0046d8:	0005303a 	rdctl	r2,status
 c0046dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0046e0:	e0fff917 	ldw	r3,-28(fp)
 c0046e4:	00bfff84 	movi	r2,-2
 c0046e8:	1884703a 	and	r2,r3,r2
 c0046ec:	1001703a 	wrctl	status,r2
  
  return context;
 c0046f0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c0046f4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c0046f8:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 c0046fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c004700:	e0fffd17 	ldw	r3,-12(fp)
 c004704:	e0bff617 	ldw	r2,-40(fp)
 c004708:	1885883a 	add	r2,r3,r2
 c00470c:	10c00044 	addi	r3,r2,1
 c004710:	e0bffc17 	ldw	r2,-16(fp)
 c004714:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c004718:	e0bffc17 	ldw	r2,-16(fp)
 c00471c:	10c00217 	ldw	r3,8(r2)
 c004720:	e0bff617 	ldw	r2,-40(fp)
 c004724:	1880042e 	bgeu	r3,r2,c004738 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c004728:	e0bffc17 	ldw	r2,-16(fp)
 c00472c:	00c00044 	movi	r3,1
 c004730:	10c00405 	stb	r3,16(r2)
 c004734:	00000206 	br	c004740 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c004738:	e0bffc17 	ldw	r2,-16(fp)
 c00473c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c004740:	e0bffc17 	ldw	r2,-16(fp)
 c004744:	d0e00c04 	addi	r3,gp,-32720
 c004748:	e0fffa15 	stw	r3,-24(fp)
 c00474c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c004750:	e0bffb17 	ldw	r2,-20(fp)
 c004754:	e0fffa17 	ldw	r3,-24(fp)
 c004758:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00475c:	e0bffa17 	ldw	r2,-24(fp)
 c004760:	10c00017 	ldw	r3,0(r2)
 c004764:	e0bffb17 	ldw	r2,-20(fp)
 c004768:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00476c:	e0bffa17 	ldw	r2,-24(fp)
 c004770:	10800017 	ldw	r2,0(r2)
 c004774:	e0fffb17 	ldw	r3,-20(fp)
 c004778:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00477c:	e0bffa17 	ldw	r2,-24(fp)
 c004780:	e0fffb17 	ldw	r3,-20(fp)
 c004784:	10c00015 	stw	r3,0(r2)
 c004788:	e0bff817 	ldw	r2,-32(fp)
 c00478c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004790:	e0bff717 	ldw	r2,-36(fp)
 c004794:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c004798:	0005883a 	mov	r2,zero
 c00479c:	00000306 	br	c0047ac <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c0047a0:	00bffa84 	movi	r2,-22
 c0047a4:	00000106 	br	c0047ac <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c0047a8:	00bfde84 	movi	r2,-134
  }
}
 c0047ac:	e037883a 	mov	sp,fp
 c0047b0:	df000017 	ldw	fp,0(sp)
 c0047b4:	dec00104 	addi	sp,sp,4
 c0047b8:	f800283a 	ret

0c0047bc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c0047bc:	defffa04 	addi	sp,sp,-24
 c0047c0:	dfc00515 	stw	ra,20(sp)
 c0047c4:	df000415 	stw	fp,16(sp)
 c0047c8:	df000404 	addi	fp,sp,16
 c0047cc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c0047d0:	00800244 	movi	r2,9
 c0047d4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c0047d8:	014003f4 	movhi	r5,15
 c0047dc:	29509004 	addi	r5,r5,16960
 c0047e0:	e13ffd17 	ldw	r4,-12(fp)
 c0047e4:	c0030780 	call	c003078 <__mulsi3>
 c0047e8:	100b883a 	mov	r5,r2
 c0047ec:	0100bef4 	movhi	r4,763
 c0047f0:	213c2004 	addi	r4,r4,-3968
 c0047f4:	c002fbc0 	call	c002fbc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c0047f8:	100b883a 	mov	r5,r2
 c0047fc:	01200034 	movhi	r4,32768
 c004800:	213fffc4 	addi	r4,r4,-1
 c004804:	c002fbc0 	call	c002fbc <__udivsi3>
 c004808:	100b883a 	mov	r5,r2
 c00480c:	e13fff17 	ldw	r4,-4(fp)
 c004810:	c002fbc0 	call	c002fbc <__udivsi3>
 c004814:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c004818:	e0bffe17 	ldw	r2,-8(fp)
 c00481c:	10002a26 	beq	r2,zero,c0048c8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c004820:	e03ffc15 	stw	zero,-16(fp)
 c004824:	00001706 	br	c004884 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c004828:	00a00034 	movhi	r2,32768
 c00482c:	10bfffc4 	addi	r2,r2,-1
 c004830:	10bfffc4 	addi	r2,r2,-1
 c004834:	103ffe1e 	bne	r2,zero,c004830 <__alt_data_end+0xfc004830>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c004838:	014003f4 	movhi	r5,15
 c00483c:	29509004 	addi	r5,r5,16960
 c004840:	e13ffd17 	ldw	r4,-12(fp)
 c004844:	c0030780 	call	c003078 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c004848:	100b883a 	mov	r5,r2
 c00484c:	0100bef4 	movhi	r4,763
 c004850:	213c2004 	addi	r4,r4,-3968
 c004854:	c002fbc0 	call	c002fbc <__udivsi3>
 c004858:	100b883a 	mov	r5,r2
 c00485c:	01200034 	movhi	r4,32768
 c004860:	213fffc4 	addi	r4,r4,-1
 c004864:	c002fbc0 	call	c002fbc <__udivsi3>
 c004868:	1007883a 	mov	r3,r2
 c00486c:	e0bfff17 	ldw	r2,-4(fp)
 c004870:	10c5c83a 	sub	r2,r2,r3
 c004874:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c004878:	e0bffc17 	ldw	r2,-16(fp)
 c00487c:	10800044 	addi	r2,r2,1
 c004880:	e0bffc15 	stw	r2,-16(fp)
 c004884:	e0fffc17 	ldw	r3,-16(fp)
 c004888:	e0bffe17 	ldw	r2,-8(fp)
 c00488c:	18bfe616 	blt	r3,r2,c004828 <__alt_data_end+0xfc004828>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c004890:	014003f4 	movhi	r5,15
 c004894:	29509004 	addi	r5,r5,16960
 c004898:	e13ffd17 	ldw	r4,-12(fp)
 c00489c:	c0030780 	call	c003078 <__mulsi3>
 c0048a0:	100b883a 	mov	r5,r2
 c0048a4:	0100bef4 	movhi	r4,763
 c0048a8:	213c2004 	addi	r4,r4,-3968
 c0048ac:	c002fbc0 	call	c002fbc <__udivsi3>
 c0048b0:	e17fff17 	ldw	r5,-4(fp)
 c0048b4:	1009883a 	mov	r4,r2
 c0048b8:	c0030780 	call	c003078 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c0048bc:	10bfffc4 	addi	r2,r2,-1
 c0048c0:	103ffe1e 	bne	r2,zero,c0048bc <__alt_data_end+0xfc0048bc>
 c0048c4:	00000d06 	br	c0048fc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c0048c8:	014003f4 	movhi	r5,15
 c0048cc:	29509004 	addi	r5,r5,16960
 c0048d0:	e13ffd17 	ldw	r4,-12(fp)
 c0048d4:	c0030780 	call	c003078 <__mulsi3>
 c0048d8:	100b883a 	mov	r5,r2
 c0048dc:	0100bef4 	movhi	r4,763
 c0048e0:	213c2004 	addi	r4,r4,-3968
 c0048e4:	c002fbc0 	call	c002fbc <__udivsi3>
 c0048e8:	e17fff17 	ldw	r5,-4(fp)
 c0048ec:	1009883a 	mov	r4,r2
 c0048f0:	c0030780 	call	c003078 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c0048f4:	10bfffc4 	addi	r2,r2,-1
 c0048f8:	00bffe16 	blt	zero,r2,c0048f4 <__alt_data_end+0xfc0048f4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c0048fc:	0005883a 	mov	r2,zero
}
 c004900:	e037883a 	mov	sp,fp
 c004904:	dfc00117 	ldw	ra,4(sp)
 c004908:	df000017 	ldw	fp,0(sp)
 c00490c:	dec00204 	addi	sp,sp,8
 c004910:	f800283a 	ret

0c004914 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c004914:	deffff04 	addi	sp,sp,-4
 c004918:	df000015 	stw	fp,0(sp)
 c00491c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c004920:	0001883a 	nop
 c004924:	e037883a 	mov	sp,fp
 c004928:	df000017 	ldw	fp,0(sp)
 c00492c:	dec00104 	addi	sp,sp,4
 c004930:	f800283a 	ret

0c004934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c004934:	defffe04 	addi	sp,sp,-8
 c004938:	dfc00115 	stw	ra,4(sp)
 c00493c:	df000015 	stw	fp,0(sp)
 c004940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c004944:	d0a00917 	ldw	r2,-32732(gp)
 c004948:	10000326 	beq	r2,zero,c004958 <alt_get_errno+0x24>
 c00494c:	d0a00917 	ldw	r2,-32732(gp)
 c004950:	103ee83a 	callr	r2
 c004954:	00000106 	br	c00495c <alt_get_errno+0x28>
 c004958:	d0a6ac04 	addi	r2,gp,-25936
}
 c00495c:	e037883a 	mov	sp,fp
 c004960:	dfc00117 	ldw	ra,4(sp)
 c004964:	df000017 	ldw	fp,0(sp)
 c004968:	dec00204 	addi	sp,sp,8
 c00496c:	f800283a 	ret

0c004970 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c004970:	defffa04 	addi	sp,sp,-24
 c004974:	dfc00515 	stw	ra,20(sp)
 c004978:	df000415 	stw	fp,16(sp)
 c00497c:	df000404 	addi	fp,sp,16
 c004980:	e13ffe15 	stw	r4,-8(fp)
 c004984:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c004988:	e0bffe17 	ldw	r2,-8(fp)
 c00498c:	10000326 	beq	r2,zero,c00499c <alt_dev_llist_insert+0x2c>
 c004990:	e0bffe17 	ldw	r2,-8(fp)
 c004994:	10800217 	ldw	r2,8(r2)
 c004998:	1000061e 	bne	r2,zero,c0049b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c00499c:	c0049340 	call	c004934 <alt_get_errno>
 c0049a0:	1007883a 	mov	r3,r2
 c0049a4:	00800584 	movi	r2,22
 c0049a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c0049ac:	00bffa84 	movi	r2,-22
 c0049b0:	00001306 	br	c004a00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c0049b4:	e0bffe17 	ldw	r2,-8(fp)
 c0049b8:	e0ffff17 	ldw	r3,-4(fp)
 c0049bc:	e0fffc15 	stw	r3,-16(fp)
 c0049c0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c0049c4:	e0bffd17 	ldw	r2,-12(fp)
 c0049c8:	e0fffc17 	ldw	r3,-16(fp)
 c0049cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c0049d0:	e0bffc17 	ldw	r2,-16(fp)
 c0049d4:	10c00017 	ldw	r3,0(r2)
 c0049d8:	e0bffd17 	ldw	r2,-12(fp)
 c0049dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c0049e0:	e0bffc17 	ldw	r2,-16(fp)
 c0049e4:	10800017 	ldw	r2,0(r2)
 c0049e8:	e0fffd17 	ldw	r3,-12(fp)
 c0049ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c0049f0:	e0bffc17 	ldw	r2,-16(fp)
 c0049f4:	e0fffd17 	ldw	r3,-12(fp)
 c0049f8:	10c00015 	stw	r3,0(r2)

  return 0;  
 c0049fc:	0005883a 	mov	r2,zero
}
 c004a00:	e037883a 	mov	sp,fp
 c004a04:	dfc00117 	ldw	ra,4(sp)
 c004a08:	df000017 	ldw	fp,0(sp)
 c004a0c:	dec00204 	addi	sp,sp,8
 c004a10:	f800283a 	ret

0c004a14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c004a14:	defffd04 	addi	sp,sp,-12
 c004a18:	dfc00215 	stw	ra,8(sp)
 c004a1c:	df000115 	stw	fp,4(sp)
 c004a20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c004a24:	00830034 	movhi	r2,3072
 c004a28:	10967204 	addi	r2,r2,22984
 c004a2c:	e0bfff15 	stw	r2,-4(fp)
 c004a30:	00000606 	br	c004a4c <_do_ctors+0x38>
        (*ctor) (); 
 c004a34:	e0bfff17 	ldw	r2,-4(fp)
 c004a38:	10800017 	ldw	r2,0(r2)
 c004a3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c004a40:	e0bfff17 	ldw	r2,-4(fp)
 c004a44:	10bfff04 	addi	r2,r2,-4
 c004a48:	e0bfff15 	stw	r2,-4(fp)
 c004a4c:	e0ffff17 	ldw	r3,-4(fp)
 c004a50:	00830034 	movhi	r2,3072
 c004a54:	10967304 	addi	r2,r2,22988
 c004a58:	18bff62e 	bgeu	r3,r2,c004a34 <__alt_data_end+0xfc004a34>
        (*ctor) (); 
}
 c004a5c:	0001883a 	nop
 c004a60:	e037883a 	mov	sp,fp
 c004a64:	dfc00117 	ldw	ra,4(sp)
 c004a68:	df000017 	ldw	fp,0(sp)
 c004a6c:	dec00204 	addi	sp,sp,8
 c004a70:	f800283a 	ret

0c004a74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c004a74:	defffd04 	addi	sp,sp,-12
 c004a78:	dfc00215 	stw	ra,8(sp)
 c004a7c:	df000115 	stw	fp,4(sp)
 c004a80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c004a84:	00830034 	movhi	r2,3072
 c004a88:	10967204 	addi	r2,r2,22984
 c004a8c:	e0bfff15 	stw	r2,-4(fp)
 c004a90:	00000606 	br	c004aac <_do_dtors+0x38>
        (*dtor) (); 
 c004a94:	e0bfff17 	ldw	r2,-4(fp)
 c004a98:	10800017 	ldw	r2,0(r2)
 c004a9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c004aa0:	e0bfff17 	ldw	r2,-4(fp)
 c004aa4:	10bfff04 	addi	r2,r2,-4
 c004aa8:	e0bfff15 	stw	r2,-4(fp)
 c004aac:	e0ffff17 	ldw	r3,-4(fp)
 c004ab0:	00830034 	movhi	r2,3072
 c004ab4:	10967304 	addi	r2,r2,22988
 c004ab8:	18bff62e 	bgeu	r3,r2,c004a94 <__alt_data_end+0xfc004a94>
        (*dtor) (); 
}
 c004abc:	0001883a 	nop
 c004ac0:	e037883a 	mov	sp,fp
 c004ac4:	dfc00117 	ldw	ra,4(sp)
 c004ac8:	df000017 	ldw	fp,0(sp)
 c004acc:	dec00204 	addi	sp,sp,8
 c004ad0:	f800283a 	ret

0c004ad4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c004ad4:	deffff04 	addi	sp,sp,-4
 c004ad8:	df000015 	stw	fp,0(sp)
 c004adc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c004ae0:	0001883a 	nop
 c004ae4:	e037883a 	mov	sp,fp
 c004ae8:	df000017 	ldw	fp,0(sp)
 c004aec:	dec00104 	addi	sp,sp,4
 c004af0:	f800283a 	ret

0c004af4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c004af4:	defff904 	addi	sp,sp,-28
 c004af8:	dfc00615 	stw	ra,24(sp)
 c004afc:	df000515 	stw	fp,20(sp)
 c004b00:	df000504 	addi	fp,sp,20
 c004b04:	e13ffc15 	stw	r4,-16(fp)
 c004b08:	e17ffd15 	stw	r5,-12(fp)
 c004b0c:	e1bffe15 	stw	r6,-8(fp)
 c004b10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c004b14:	e0800217 	ldw	r2,8(fp)
 c004b18:	d8800015 	stw	r2,0(sp)
 c004b1c:	e1ffff17 	ldw	r7,-4(fp)
 c004b20:	e1bffe17 	ldw	r6,-8(fp)
 c004b24:	e17ffd17 	ldw	r5,-12(fp)
 c004b28:	e13ffc17 	ldw	r4,-16(fp)
 c004b2c:	c004ca40 	call	c004ca4 <alt_iic_isr_register>
}  
 c004b30:	e037883a 	mov	sp,fp
 c004b34:	dfc00117 	ldw	ra,4(sp)
 c004b38:	df000017 	ldw	fp,0(sp)
 c004b3c:	dec00204 	addi	sp,sp,8
 c004b40:	f800283a 	ret

0c004b44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c004b44:	defff904 	addi	sp,sp,-28
 c004b48:	df000615 	stw	fp,24(sp)
 c004b4c:	df000604 	addi	fp,sp,24
 c004b50:	e13ffe15 	stw	r4,-8(fp)
 c004b54:	e17fff15 	stw	r5,-4(fp)
 c004b58:	e0bfff17 	ldw	r2,-4(fp)
 c004b5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004b60:	0005303a 	rdctl	r2,status
 c004b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c004b68:	e0fffb17 	ldw	r3,-20(fp)
 c004b6c:	00bfff84 	movi	r2,-2
 c004b70:	1884703a 	and	r2,r3,r2
 c004b74:	1001703a 	wrctl	status,r2
  
  return context;
 c004b78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c004b7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c004b80:	00c00044 	movi	r3,1
 c004b84:	e0bffa17 	ldw	r2,-24(fp)
 c004b88:	1884983a 	sll	r2,r3,r2
 c004b8c:	1007883a 	mov	r3,r2
 c004b90:	d0a6b017 	ldw	r2,-25920(gp)
 c004b94:	1884b03a 	or	r2,r3,r2
 c004b98:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c004b9c:	d0a6b017 	ldw	r2,-25920(gp)
 c004ba0:	100170fa 	wrctl	ienable,r2
 c004ba4:	e0bffc17 	ldw	r2,-16(fp)
 c004ba8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004bac:	e0bffd17 	ldw	r2,-12(fp)
 c004bb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c004bb4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c004bb8:	0001883a 	nop
}
 c004bbc:	e037883a 	mov	sp,fp
 c004bc0:	df000017 	ldw	fp,0(sp)
 c004bc4:	dec00104 	addi	sp,sp,4
 c004bc8:	f800283a 	ret

0c004bcc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c004bcc:	defff904 	addi	sp,sp,-28
 c004bd0:	df000615 	stw	fp,24(sp)
 c004bd4:	df000604 	addi	fp,sp,24
 c004bd8:	e13ffe15 	stw	r4,-8(fp)
 c004bdc:	e17fff15 	stw	r5,-4(fp)
 c004be0:	e0bfff17 	ldw	r2,-4(fp)
 c004be4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004be8:	0005303a 	rdctl	r2,status
 c004bec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c004bf0:	e0fffb17 	ldw	r3,-20(fp)
 c004bf4:	00bfff84 	movi	r2,-2
 c004bf8:	1884703a 	and	r2,r3,r2
 c004bfc:	1001703a 	wrctl	status,r2
  
  return context;
 c004c00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c004c04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c004c08:	00c00044 	movi	r3,1
 c004c0c:	e0bffa17 	ldw	r2,-24(fp)
 c004c10:	1884983a 	sll	r2,r3,r2
 c004c14:	0084303a 	nor	r2,zero,r2
 c004c18:	1007883a 	mov	r3,r2
 c004c1c:	d0a6b017 	ldw	r2,-25920(gp)
 c004c20:	1884703a 	and	r2,r3,r2
 c004c24:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c004c28:	d0a6b017 	ldw	r2,-25920(gp)
 c004c2c:	100170fa 	wrctl	ienable,r2
 c004c30:	e0bffc17 	ldw	r2,-16(fp)
 c004c34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004c38:	e0bffd17 	ldw	r2,-12(fp)
 c004c3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c004c40:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c004c44:	0001883a 	nop
}
 c004c48:	e037883a 	mov	sp,fp
 c004c4c:	df000017 	ldw	fp,0(sp)
 c004c50:	dec00104 	addi	sp,sp,4
 c004c54:	f800283a 	ret

0c004c58 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c004c58:	defffc04 	addi	sp,sp,-16
 c004c5c:	df000315 	stw	fp,12(sp)
 c004c60:	df000304 	addi	fp,sp,12
 c004c64:	e13ffe15 	stw	r4,-8(fp)
 c004c68:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c004c6c:	000530fa 	rdctl	r2,ienable
 c004c70:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c004c74:	00c00044 	movi	r3,1
 c004c78:	e0bfff17 	ldw	r2,-4(fp)
 c004c7c:	1884983a 	sll	r2,r3,r2
 c004c80:	1007883a 	mov	r3,r2
 c004c84:	e0bffd17 	ldw	r2,-12(fp)
 c004c88:	1884703a 	and	r2,r3,r2
 c004c8c:	1004c03a 	cmpne	r2,r2,zero
 c004c90:	10803fcc 	andi	r2,r2,255
}
 c004c94:	e037883a 	mov	sp,fp
 c004c98:	df000017 	ldw	fp,0(sp)
 c004c9c:	dec00104 	addi	sp,sp,4
 c004ca0:	f800283a 	ret

0c004ca4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c004ca4:	defff504 	addi	sp,sp,-44
 c004ca8:	dfc00a15 	stw	ra,40(sp)
 c004cac:	df000915 	stw	fp,36(sp)
 c004cb0:	df000904 	addi	fp,sp,36
 c004cb4:	e13ffc15 	stw	r4,-16(fp)
 c004cb8:	e17ffd15 	stw	r5,-12(fp)
 c004cbc:	e1bffe15 	stw	r6,-8(fp)
 c004cc0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c004cc4:	00bffa84 	movi	r2,-22
 c004cc8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c004ccc:	e0bffd17 	ldw	r2,-12(fp)
 c004cd0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c004cd4:	e0bff817 	ldw	r2,-32(fp)
 c004cd8:	10800808 	cmpgei	r2,r2,32
 c004cdc:	1000271e 	bne	r2,zero,c004d7c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c004ce0:	0005303a 	rdctl	r2,status
 c004ce4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c004ce8:	e0fffb17 	ldw	r3,-20(fp)
 c004cec:	00bfff84 	movi	r2,-2
 c004cf0:	1884703a 	and	r2,r3,r2
 c004cf4:	1001703a 	wrctl	status,r2
  
  return context;
 c004cf8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c004cfc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c004d00:	00830074 	movhi	r2,3073
 c004d04:	10a3cf04 	addi	r2,r2,-28868
 c004d08:	e0fff817 	ldw	r3,-32(fp)
 c004d0c:	180690fa 	slli	r3,r3,3
 c004d10:	10c5883a 	add	r2,r2,r3
 c004d14:	e0fffe17 	ldw	r3,-8(fp)
 c004d18:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c004d1c:	00830074 	movhi	r2,3073
 c004d20:	10a3cf04 	addi	r2,r2,-28868
 c004d24:	e0fff817 	ldw	r3,-32(fp)
 c004d28:	180690fa 	slli	r3,r3,3
 c004d2c:	10c5883a 	add	r2,r2,r3
 c004d30:	10800104 	addi	r2,r2,4
 c004d34:	e0ffff17 	ldw	r3,-4(fp)
 c004d38:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c004d3c:	e0bffe17 	ldw	r2,-8(fp)
 c004d40:	10000526 	beq	r2,zero,c004d58 <alt_iic_isr_register+0xb4>
 c004d44:	e0bff817 	ldw	r2,-32(fp)
 c004d48:	100b883a 	mov	r5,r2
 c004d4c:	e13ffc17 	ldw	r4,-16(fp)
 c004d50:	c004b440 	call	c004b44 <alt_ic_irq_enable>
 c004d54:	00000406 	br	c004d68 <alt_iic_isr_register+0xc4>
 c004d58:	e0bff817 	ldw	r2,-32(fp)
 c004d5c:	100b883a 	mov	r5,r2
 c004d60:	e13ffc17 	ldw	r4,-16(fp)
 c004d64:	c004bcc0 	call	c004bcc <alt_ic_irq_disable>
 c004d68:	e0bff715 	stw	r2,-36(fp)
 c004d6c:	e0bffa17 	ldw	r2,-24(fp)
 c004d70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c004d74:	e0bff917 	ldw	r2,-28(fp)
 c004d78:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c004d7c:	e0bff717 	ldw	r2,-36(fp)
}
 c004d80:	e037883a 	mov	sp,fp
 c004d84:	dfc00117 	ldw	ra,4(sp)
 c004d88:	df000017 	ldw	fp,0(sp)
 c004d8c:	dec00204 	addi	sp,sp,8
 c004d90:	f800283a 	ret

0c004d94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c004d94:	defff804 	addi	sp,sp,-32
 c004d98:	dfc00715 	stw	ra,28(sp)
 c004d9c:	df000615 	stw	fp,24(sp)
 c004da0:	dc000515 	stw	r16,20(sp)
 c004da4:	df000604 	addi	fp,sp,24
 c004da8:	e13ffb15 	stw	r4,-20(fp)
 c004dac:	e17ffc15 	stw	r5,-16(fp)
 c004db0:	e1bffd15 	stw	r6,-12(fp)
 c004db4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c004db8:	e1bffe17 	ldw	r6,-8(fp)
 c004dbc:	e17ffd17 	ldw	r5,-12(fp)
 c004dc0:	e13ffc17 	ldw	r4,-16(fp)
 c004dc4:	c00501c0 	call	c00501c <open>
 c004dc8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c004dcc:	e0bffa17 	ldw	r2,-24(fp)
 c004dd0:	10002216 	blt	r2,zero,c004e5c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c004dd4:	04030034 	movhi	r16,3072
 c004dd8:	84189904 	addi	r16,r16,25188
 c004ddc:	e0bffa17 	ldw	r2,-24(fp)
 c004de0:	01400304 	movi	r5,12
 c004de4:	1009883a 	mov	r4,r2
 c004de8:	c0030780 	call	c003078 <__mulsi3>
 c004dec:	8085883a 	add	r2,r16,r2
 c004df0:	10c00017 	ldw	r3,0(r2)
 c004df4:	e0bffb17 	ldw	r2,-20(fp)
 c004df8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c004dfc:	04030034 	movhi	r16,3072
 c004e00:	84189904 	addi	r16,r16,25188
 c004e04:	e0bffa17 	ldw	r2,-24(fp)
 c004e08:	01400304 	movi	r5,12
 c004e0c:	1009883a 	mov	r4,r2
 c004e10:	c0030780 	call	c003078 <__mulsi3>
 c004e14:	8085883a 	add	r2,r16,r2
 c004e18:	10800104 	addi	r2,r2,4
 c004e1c:	10c00017 	ldw	r3,0(r2)
 c004e20:	e0bffb17 	ldw	r2,-20(fp)
 c004e24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c004e28:	04030034 	movhi	r16,3072
 c004e2c:	84189904 	addi	r16,r16,25188
 c004e30:	e0bffa17 	ldw	r2,-24(fp)
 c004e34:	01400304 	movi	r5,12
 c004e38:	1009883a 	mov	r4,r2
 c004e3c:	c0030780 	call	c003078 <__mulsi3>
 c004e40:	8085883a 	add	r2,r16,r2
 c004e44:	10800204 	addi	r2,r2,8
 c004e48:	10c00017 	ldw	r3,0(r2)
 c004e4c:	e0bffb17 	ldw	r2,-20(fp)
 c004e50:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c004e54:	e13ffa17 	ldw	r4,-24(fp)
 c004e58:	c0037c40 	call	c0037c4 <alt_release_fd>
  }
} 
 c004e5c:	0001883a 	nop
 c004e60:	e6ffff04 	addi	sp,fp,-4
 c004e64:	dfc00217 	ldw	ra,8(sp)
 c004e68:	df000117 	ldw	fp,4(sp)
 c004e6c:	dc000017 	ldw	r16,0(sp)
 c004e70:	dec00304 	addi	sp,sp,12
 c004e74:	f800283a 	ret

0c004e78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c004e78:	defffb04 	addi	sp,sp,-20
 c004e7c:	dfc00415 	stw	ra,16(sp)
 c004e80:	df000315 	stw	fp,12(sp)
 c004e84:	df000304 	addi	fp,sp,12
 c004e88:	e13ffd15 	stw	r4,-12(fp)
 c004e8c:	e17ffe15 	stw	r5,-8(fp)
 c004e90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c004e94:	01c07fc4 	movi	r7,511
 c004e98:	01800044 	movi	r6,1
 c004e9c:	e17ffd17 	ldw	r5,-12(fp)
 c004ea0:	01030034 	movhi	r4,3072
 c004ea4:	21189c04 	addi	r4,r4,25200
 c004ea8:	c004d940 	call	c004d94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c004eac:	01c07fc4 	movi	r7,511
 c004eb0:	000d883a 	mov	r6,zero
 c004eb4:	e17ffe17 	ldw	r5,-8(fp)
 c004eb8:	01030034 	movhi	r4,3072
 c004ebc:	21189904 	addi	r4,r4,25188
 c004ec0:	c004d940 	call	c004d94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c004ec4:	01c07fc4 	movi	r7,511
 c004ec8:	01800044 	movi	r6,1
 c004ecc:	e17fff17 	ldw	r5,-4(fp)
 c004ed0:	01030034 	movhi	r4,3072
 c004ed4:	21189f04 	addi	r4,r4,25212
 c004ed8:	c004d940 	call	c004d94 <alt_open_fd>
}  
 c004edc:	0001883a 	nop
 c004ee0:	e037883a 	mov	sp,fp
 c004ee4:	dfc00117 	ldw	ra,4(sp)
 c004ee8:	df000017 	ldw	fp,0(sp)
 c004eec:	dec00204 	addi	sp,sp,8
 c004ef0:	f800283a 	ret

0c004ef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c004ef4:	defffe04 	addi	sp,sp,-8
 c004ef8:	dfc00115 	stw	ra,4(sp)
 c004efc:	df000015 	stw	fp,0(sp)
 c004f00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c004f04:	d0a00917 	ldw	r2,-32732(gp)
 c004f08:	10000326 	beq	r2,zero,c004f18 <alt_get_errno+0x24>
 c004f0c:	d0a00917 	ldw	r2,-32732(gp)
 c004f10:	103ee83a 	callr	r2
 c004f14:	00000106 	br	c004f1c <alt_get_errno+0x28>
 c004f18:	d0a6ac04 	addi	r2,gp,-25936
}
 c004f1c:	e037883a 	mov	sp,fp
 c004f20:	dfc00117 	ldw	ra,4(sp)
 c004f24:	df000017 	ldw	fp,0(sp)
 c004f28:	dec00204 	addi	sp,sp,8
 c004f2c:	f800283a 	ret

0c004f30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c004f30:	defffb04 	addi	sp,sp,-20
 c004f34:	dfc00415 	stw	ra,16(sp)
 c004f38:	df000315 	stw	fp,12(sp)
 c004f3c:	dc000215 	stw	r16,8(sp)
 c004f40:	df000304 	addi	fp,sp,12
 c004f44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c004f48:	e0bffe17 	ldw	r2,-8(fp)
 c004f4c:	10800217 	ldw	r2,8(r2)
 c004f50:	10d00034 	orhi	r3,r2,16384
 c004f54:	e0bffe17 	ldw	r2,-8(fp)
 c004f58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c004f5c:	e03ffd15 	stw	zero,-12(fp)
 c004f60:	00002306 	br	c004ff0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c004f64:	04030034 	movhi	r16,3072
 c004f68:	84189904 	addi	r16,r16,25188
 c004f6c:	e0bffd17 	ldw	r2,-12(fp)
 c004f70:	01400304 	movi	r5,12
 c004f74:	1009883a 	mov	r4,r2
 c004f78:	c0030780 	call	c003078 <__mulsi3>
 c004f7c:	8085883a 	add	r2,r16,r2
 c004f80:	10c00017 	ldw	r3,0(r2)
 c004f84:	e0bffe17 	ldw	r2,-8(fp)
 c004f88:	10800017 	ldw	r2,0(r2)
 c004f8c:	1880151e 	bne	r3,r2,c004fe4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c004f90:	04030034 	movhi	r16,3072
 c004f94:	84189904 	addi	r16,r16,25188
 c004f98:	e0bffd17 	ldw	r2,-12(fp)
 c004f9c:	01400304 	movi	r5,12
 c004fa0:	1009883a 	mov	r4,r2
 c004fa4:	c0030780 	call	c003078 <__mulsi3>
 c004fa8:	8085883a 	add	r2,r16,r2
 c004fac:	10800204 	addi	r2,r2,8
 c004fb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c004fb4:	10000b0e 	bge	r2,zero,c004fe4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c004fb8:	01400304 	movi	r5,12
 c004fbc:	e13ffd17 	ldw	r4,-12(fp)
 c004fc0:	c0030780 	call	c003078 <__mulsi3>
 c004fc4:	1007883a 	mov	r3,r2
 c004fc8:	00830034 	movhi	r2,3072
 c004fcc:	10989904 	addi	r2,r2,25188
 c004fd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c004fd4:	e0bffe17 	ldw	r2,-8(fp)
 c004fd8:	18800226 	beq	r3,r2,c004fe4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c004fdc:	00bffcc4 	movi	r2,-13
 c004fe0:	00000806 	br	c005004 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c004fe4:	e0bffd17 	ldw	r2,-12(fp)
 c004fe8:	10800044 	addi	r2,r2,1
 c004fec:	e0bffd15 	stw	r2,-12(fp)
 c004ff0:	d0a00817 	ldw	r2,-32736(gp)
 c004ff4:	1007883a 	mov	r3,r2
 c004ff8:	e0bffd17 	ldw	r2,-12(fp)
 c004ffc:	18bfd92e 	bgeu	r3,r2,c004f64 <__alt_data_end+0xfc004f64>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c005000:	0005883a 	mov	r2,zero
}
 c005004:	e6ffff04 	addi	sp,fp,-4
 c005008:	dfc00217 	ldw	ra,8(sp)
 c00500c:	df000117 	ldw	fp,4(sp)
 c005010:	dc000017 	ldw	r16,0(sp)
 c005014:	dec00304 	addi	sp,sp,12
 c005018:	f800283a 	ret

0c00501c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c00501c:	defff604 	addi	sp,sp,-40
 c005020:	dfc00915 	stw	ra,36(sp)
 c005024:	df000815 	stw	fp,32(sp)
 c005028:	df000804 	addi	fp,sp,32
 c00502c:	e13ffd15 	stw	r4,-12(fp)
 c005030:	e17ffe15 	stw	r5,-8(fp)
 c005034:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c005038:	00bfffc4 	movi	r2,-1
 c00503c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c005040:	00bffb44 	movi	r2,-19
 c005044:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c005048:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c00504c:	d1600604 	addi	r5,gp,-32744
 c005050:	e13ffd17 	ldw	r4,-12(fp)
 c005054:	c0053400 	call	c005340 <alt_find_dev>
 c005058:	e0bff815 	stw	r2,-32(fp)
 c00505c:	e0bff817 	ldw	r2,-32(fp)
 c005060:	1000051e 	bne	r2,zero,c005078 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c005064:	e13ffd17 	ldw	r4,-12(fp)
 c005068:	c0053d00 	call	c0053d0 <alt_find_file>
 c00506c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c005070:	00800044 	movi	r2,1
 c005074:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c005078:	e0bff817 	ldw	r2,-32(fp)
 c00507c:	10002b26 	beq	r2,zero,c00512c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c005080:	e13ff817 	ldw	r4,-32(fp)
 c005084:	c0054d80 	call	c0054d8 <alt_get_fd>
 c005088:	e0bff915 	stw	r2,-28(fp)
 c00508c:	e0bff917 	ldw	r2,-28(fp)
 c005090:	1000030e 	bge	r2,zero,c0050a0 <open+0x84>
    {
      status = index;
 c005094:	e0bff917 	ldw	r2,-28(fp)
 c005098:	e0bffa15 	stw	r2,-24(fp)
 c00509c:	00002506 	br	c005134 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c0050a0:	01400304 	movi	r5,12
 c0050a4:	e13ff917 	ldw	r4,-28(fp)
 c0050a8:	c0030780 	call	c003078 <__mulsi3>
 c0050ac:	1007883a 	mov	r3,r2
 c0050b0:	00830034 	movhi	r2,3072
 c0050b4:	10989904 	addi	r2,r2,25188
 c0050b8:	1885883a 	add	r2,r3,r2
 c0050bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c0050c0:	e0fffe17 	ldw	r3,-8(fp)
 c0050c4:	00900034 	movhi	r2,16384
 c0050c8:	10bfffc4 	addi	r2,r2,-1
 c0050cc:	1886703a 	and	r3,r3,r2
 c0050d0:	e0bffc17 	ldw	r2,-16(fp)
 c0050d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c0050d8:	e0bffb17 	ldw	r2,-20(fp)
 c0050dc:	1000051e 	bne	r2,zero,c0050f4 <open+0xd8>
 c0050e0:	e13ffc17 	ldw	r4,-16(fp)
 c0050e4:	c004f300 	call	c004f30 <alt_file_locked>
 c0050e8:	e0bffa15 	stw	r2,-24(fp)
 c0050ec:	e0bffa17 	ldw	r2,-24(fp)
 c0050f0:	10001016 	blt	r2,zero,c005134 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c0050f4:	e0bff817 	ldw	r2,-32(fp)
 c0050f8:	10800317 	ldw	r2,12(r2)
 c0050fc:	10000826 	beq	r2,zero,c005120 <open+0x104>
 c005100:	e0bff817 	ldw	r2,-32(fp)
 c005104:	10800317 	ldw	r2,12(r2)
 c005108:	e1ffff17 	ldw	r7,-4(fp)
 c00510c:	e1bffe17 	ldw	r6,-8(fp)
 c005110:	e17ffd17 	ldw	r5,-12(fp)
 c005114:	e13ffc17 	ldw	r4,-16(fp)
 c005118:	103ee83a 	callr	r2
 c00511c:	00000106 	br	c005124 <open+0x108>
 c005120:	0005883a 	mov	r2,zero
 c005124:	e0bffa15 	stw	r2,-24(fp)
 c005128:	00000206 	br	c005134 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c00512c:	00bffb44 	movi	r2,-19
 c005130:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c005134:	e0bffa17 	ldw	r2,-24(fp)
 c005138:	1000090e 	bge	r2,zero,c005160 <open+0x144>
  {
    alt_release_fd (index);  
 c00513c:	e13ff917 	ldw	r4,-28(fp)
 c005140:	c0037c40 	call	c0037c4 <alt_release_fd>
    ALT_ERRNO = -status;
 c005144:	c004ef40 	call	c004ef4 <alt_get_errno>
 c005148:	1007883a 	mov	r3,r2
 c00514c:	e0bffa17 	ldw	r2,-24(fp)
 c005150:	0085c83a 	sub	r2,zero,r2
 c005154:	18800015 	stw	r2,0(r3)
    return -1;
 c005158:	00bfffc4 	movi	r2,-1
 c00515c:	00000106 	br	c005164 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c005160:	e0bff917 	ldw	r2,-28(fp)
}
 c005164:	e037883a 	mov	sp,fp
 c005168:	dfc00117 	ldw	ra,4(sp)
 c00516c:	df000017 	ldw	fp,0(sp)
 c005170:	dec00204 	addi	sp,sp,8
 c005174:	f800283a 	ret

0c005178 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c005178:	defffa04 	addi	sp,sp,-24
 c00517c:	df000515 	stw	fp,20(sp)
 c005180:	df000504 	addi	fp,sp,20
 c005184:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c005188:	0005303a 	rdctl	r2,status
 c00518c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c005190:	e0fffc17 	ldw	r3,-16(fp)
 c005194:	00bfff84 	movi	r2,-2
 c005198:	1884703a 	and	r2,r3,r2
 c00519c:	1001703a 	wrctl	status,r2
  
  return context;
 c0051a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c0051a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c0051a8:	e0bfff17 	ldw	r2,-4(fp)
 c0051ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c0051b0:	e0bffd17 	ldw	r2,-12(fp)
 c0051b4:	10800017 	ldw	r2,0(r2)
 c0051b8:	e0fffd17 	ldw	r3,-12(fp)
 c0051bc:	18c00117 	ldw	r3,4(r3)
 c0051c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c0051c4:	e0bffd17 	ldw	r2,-12(fp)
 c0051c8:	10800117 	ldw	r2,4(r2)
 c0051cc:	e0fffd17 	ldw	r3,-12(fp)
 c0051d0:	18c00017 	ldw	r3,0(r3)
 c0051d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c0051d8:	e0bffd17 	ldw	r2,-12(fp)
 c0051dc:	e0fffd17 	ldw	r3,-12(fp)
 c0051e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c0051e4:	e0bffd17 	ldw	r2,-12(fp)
 c0051e8:	e0fffd17 	ldw	r3,-12(fp)
 c0051ec:	10c00015 	stw	r3,0(r2)
 c0051f0:	e0bffb17 	ldw	r2,-20(fp)
 c0051f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0051f8:	e0bffe17 	ldw	r2,-8(fp)
 c0051fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c005200:	0001883a 	nop
 c005204:	e037883a 	mov	sp,fp
 c005208:	df000017 	ldw	fp,0(sp)
 c00520c:	dec00104 	addi	sp,sp,4
 c005210:	f800283a 	ret

0c005214 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c005214:	defffb04 	addi	sp,sp,-20
 c005218:	dfc00415 	stw	ra,16(sp)
 c00521c:	df000315 	stw	fp,12(sp)
 c005220:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c005224:	d0a00c17 	ldw	r2,-32720(gp)
 c005228:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c00522c:	d0a6b217 	ldw	r2,-25912(gp)
 c005230:	10800044 	addi	r2,r2,1
 c005234:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c005238:	00002e06 	br	c0052f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c00523c:	e0bffd17 	ldw	r2,-12(fp)
 c005240:	10800017 	ldw	r2,0(r2)
 c005244:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c005248:	e0bffd17 	ldw	r2,-12(fp)
 c00524c:	10800403 	ldbu	r2,16(r2)
 c005250:	10803fcc 	andi	r2,r2,255
 c005254:	10000426 	beq	r2,zero,c005268 <alt_tick+0x54>
 c005258:	d0a6b217 	ldw	r2,-25912(gp)
 c00525c:	1000021e 	bne	r2,zero,c005268 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c005260:	e0bffd17 	ldw	r2,-12(fp)
 c005264:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c005268:	e0bffd17 	ldw	r2,-12(fp)
 c00526c:	10800217 	ldw	r2,8(r2)
 c005270:	d0e6b217 	ldw	r3,-25912(gp)
 c005274:	18801d36 	bltu	r3,r2,c0052ec <alt_tick+0xd8>
 c005278:	e0bffd17 	ldw	r2,-12(fp)
 c00527c:	10800403 	ldbu	r2,16(r2)
 c005280:	10803fcc 	andi	r2,r2,255
 c005284:	1000191e 	bne	r2,zero,c0052ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c005288:	e0bffd17 	ldw	r2,-12(fp)
 c00528c:	10800317 	ldw	r2,12(r2)
 c005290:	e0fffd17 	ldw	r3,-12(fp)
 c005294:	18c00517 	ldw	r3,20(r3)
 c005298:	1809883a 	mov	r4,r3
 c00529c:	103ee83a 	callr	r2
 c0052a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c0052a4:	e0bfff17 	ldw	r2,-4(fp)
 c0052a8:	1000031e 	bne	r2,zero,c0052b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c0052ac:	e13ffd17 	ldw	r4,-12(fp)
 c0052b0:	c0051780 	call	c005178 <alt_alarm_stop>
 c0052b4:	00000d06 	br	c0052ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c0052b8:	e0bffd17 	ldw	r2,-12(fp)
 c0052bc:	10c00217 	ldw	r3,8(r2)
 c0052c0:	e0bfff17 	ldw	r2,-4(fp)
 c0052c4:	1887883a 	add	r3,r3,r2
 c0052c8:	e0bffd17 	ldw	r2,-12(fp)
 c0052cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c0052d0:	e0bffd17 	ldw	r2,-12(fp)
 c0052d4:	10c00217 	ldw	r3,8(r2)
 c0052d8:	d0a6b217 	ldw	r2,-25912(gp)
 c0052dc:	1880032e 	bgeu	r3,r2,c0052ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c0052e0:	e0bffd17 	ldw	r2,-12(fp)
 c0052e4:	00c00044 	movi	r3,1
 c0052e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c0052ec:	e0bffe17 	ldw	r2,-8(fp)
 c0052f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c0052f4:	e0fffd17 	ldw	r3,-12(fp)
 c0052f8:	d0a00c04 	addi	r2,gp,-32720
 c0052fc:	18bfcf1e 	bne	r3,r2,c00523c <__alt_data_end+0xfc00523c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c005300:	0001883a 	nop
}
 c005304:	0001883a 	nop
 c005308:	e037883a 	mov	sp,fp
 c00530c:	dfc00117 	ldw	ra,4(sp)
 c005310:	df000017 	ldw	fp,0(sp)
 c005314:	dec00204 	addi	sp,sp,8
 c005318:	f800283a 	ret

0c00531c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c00531c:	deffff04 	addi	sp,sp,-4
 c005320:	df000015 	stw	fp,0(sp)
 c005324:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c005328:	000170fa 	wrctl	ienable,zero
}
 c00532c:	0001883a 	nop
 c005330:	e037883a 	mov	sp,fp
 c005334:	df000017 	ldw	fp,0(sp)
 c005338:	dec00104 	addi	sp,sp,4
 c00533c:	f800283a 	ret

0c005340 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c005340:	defffa04 	addi	sp,sp,-24
 c005344:	dfc00515 	stw	ra,20(sp)
 c005348:	df000415 	stw	fp,16(sp)
 c00534c:	df000404 	addi	fp,sp,16
 c005350:	e13ffe15 	stw	r4,-8(fp)
 c005354:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c005358:	e0bfff17 	ldw	r2,-4(fp)
 c00535c:	10800017 	ldw	r2,0(r2)
 c005360:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c005364:	e13ffe17 	ldw	r4,-8(fp)
 c005368:	c0003680 	call	c000368 <strlen>
 c00536c:	10800044 	addi	r2,r2,1
 c005370:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c005374:	00000d06 	br	c0053ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c005378:	e0bffc17 	ldw	r2,-16(fp)
 c00537c:	10800217 	ldw	r2,8(r2)
 c005380:	e0fffd17 	ldw	r3,-12(fp)
 c005384:	180d883a 	mov	r6,r3
 c005388:	e17ffe17 	ldw	r5,-8(fp)
 c00538c:	1009883a 	mov	r4,r2
 c005390:	c0056840 	call	c005684 <memcmp>
 c005394:	1000021e 	bne	r2,zero,c0053a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c005398:	e0bffc17 	ldw	r2,-16(fp)
 c00539c:	00000706 	br	c0053bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c0053a0:	e0bffc17 	ldw	r2,-16(fp)
 c0053a4:	10800017 	ldw	r2,0(r2)
 c0053a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c0053ac:	e0fffc17 	ldw	r3,-16(fp)
 c0053b0:	e0bfff17 	ldw	r2,-4(fp)
 c0053b4:	18bff01e 	bne	r3,r2,c005378 <__alt_data_end+0xfc005378>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c0053b8:	0005883a 	mov	r2,zero
}
 c0053bc:	e037883a 	mov	sp,fp
 c0053c0:	dfc00117 	ldw	ra,4(sp)
 c0053c4:	df000017 	ldw	fp,0(sp)
 c0053c8:	dec00204 	addi	sp,sp,8
 c0053cc:	f800283a 	ret

0c0053d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c0053d0:	defffb04 	addi	sp,sp,-20
 c0053d4:	dfc00415 	stw	ra,16(sp)
 c0053d8:	df000315 	stw	fp,12(sp)
 c0053dc:	df000304 	addi	fp,sp,12
 c0053e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c0053e4:	d0a00417 	ldw	r2,-32752(gp)
 c0053e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c0053ec:	00003106 	br	c0054b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c0053f0:	e0bffd17 	ldw	r2,-12(fp)
 c0053f4:	10800217 	ldw	r2,8(r2)
 c0053f8:	1009883a 	mov	r4,r2
 c0053fc:	c0003680 	call	c000368 <strlen>
 c005400:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c005404:	e0bffd17 	ldw	r2,-12(fp)
 c005408:	10c00217 	ldw	r3,8(r2)
 c00540c:	e0bffe17 	ldw	r2,-8(fp)
 c005410:	10bfffc4 	addi	r2,r2,-1
 c005414:	1885883a 	add	r2,r3,r2
 c005418:	10800003 	ldbu	r2,0(r2)
 c00541c:	10803fcc 	andi	r2,r2,255
 c005420:	1080201c 	xori	r2,r2,128
 c005424:	10bfe004 	addi	r2,r2,-128
 c005428:	10800bd8 	cmpnei	r2,r2,47
 c00542c:	1000031e 	bne	r2,zero,c00543c <alt_find_file+0x6c>
    {
      len -= 1;
 c005430:	e0bffe17 	ldw	r2,-8(fp)
 c005434:	10bfffc4 	addi	r2,r2,-1
 c005438:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00543c:	e0bffe17 	ldw	r2,-8(fp)
 c005440:	e0ffff17 	ldw	r3,-4(fp)
 c005444:	1885883a 	add	r2,r3,r2
 c005448:	10800003 	ldbu	r2,0(r2)
 c00544c:	10803fcc 	andi	r2,r2,255
 c005450:	1080201c 	xori	r2,r2,128
 c005454:	10bfe004 	addi	r2,r2,-128
 c005458:	10800be0 	cmpeqi	r2,r2,47
 c00545c:	1000081e 	bne	r2,zero,c005480 <alt_find_file+0xb0>
 c005460:	e0bffe17 	ldw	r2,-8(fp)
 c005464:	e0ffff17 	ldw	r3,-4(fp)
 c005468:	1885883a 	add	r2,r3,r2
 c00546c:	10800003 	ldbu	r2,0(r2)
 c005470:	10803fcc 	andi	r2,r2,255
 c005474:	1080201c 	xori	r2,r2,128
 c005478:	10bfe004 	addi	r2,r2,-128
 c00547c:	10000a1e 	bne	r2,zero,c0054a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c005480:	e0bffd17 	ldw	r2,-12(fp)
 c005484:	10800217 	ldw	r2,8(r2)
 c005488:	e0fffe17 	ldw	r3,-8(fp)
 c00548c:	180d883a 	mov	r6,r3
 c005490:	e17fff17 	ldw	r5,-4(fp)
 c005494:	1009883a 	mov	r4,r2
 c005498:	c0056840 	call	c005684 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00549c:	1000021e 	bne	r2,zero,c0054a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c0054a0:	e0bffd17 	ldw	r2,-12(fp)
 c0054a4:	00000706 	br	c0054c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c0054a8:	e0bffd17 	ldw	r2,-12(fp)
 c0054ac:	10800017 	ldw	r2,0(r2)
 c0054b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c0054b4:	e0fffd17 	ldw	r3,-12(fp)
 c0054b8:	d0a00404 	addi	r2,gp,-32752
 c0054bc:	18bfcc1e 	bne	r3,r2,c0053f0 <__alt_data_end+0xfc0053f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c0054c0:	0005883a 	mov	r2,zero
}
 c0054c4:	e037883a 	mov	sp,fp
 c0054c8:	dfc00117 	ldw	ra,4(sp)
 c0054cc:	df000017 	ldw	fp,0(sp)
 c0054d0:	dec00204 	addi	sp,sp,8
 c0054d4:	f800283a 	ret

0c0054d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c0054d8:	defffa04 	addi	sp,sp,-24
 c0054dc:	dfc00515 	stw	ra,20(sp)
 c0054e0:	df000415 	stw	fp,16(sp)
 c0054e4:	dc000315 	stw	r16,12(sp)
 c0054e8:	df000404 	addi	fp,sp,16
 c0054ec:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c0054f0:	00bffa04 	movi	r2,-24
 c0054f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c0054f8:	e03ffc15 	stw	zero,-16(fp)
 c0054fc:	00001d06 	br	c005574 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c005500:	04030034 	movhi	r16,3072
 c005504:	84189904 	addi	r16,r16,25188
 c005508:	e0bffc17 	ldw	r2,-16(fp)
 c00550c:	01400304 	movi	r5,12
 c005510:	1009883a 	mov	r4,r2
 c005514:	c0030780 	call	c003078 <__mulsi3>
 c005518:	8085883a 	add	r2,r16,r2
 c00551c:	10800017 	ldw	r2,0(r2)
 c005520:	1000111e 	bne	r2,zero,c005568 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c005524:	04030034 	movhi	r16,3072
 c005528:	84189904 	addi	r16,r16,25188
 c00552c:	e0bffc17 	ldw	r2,-16(fp)
 c005530:	01400304 	movi	r5,12
 c005534:	1009883a 	mov	r4,r2
 c005538:	c0030780 	call	c003078 <__mulsi3>
 c00553c:	8085883a 	add	r2,r16,r2
 c005540:	e0fffe17 	ldw	r3,-8(fp)
 c005544:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c005548:	d0e00817 	ldw	r3,-32736(gp)
 c00554c:	e0bffc17 	ldw	r2,-16(fp)
 c005550:	1880020e 	bge	r3,r2,c00555c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c005554:	e0bffc17 	ldw	r2,-16(fp)
 c005558:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 c00555c:	e0bffc17 	ldw	r2,-16(fp)
 c005560:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c005564:	00000606 	br	c005580 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c005568:	e0bffc17 	ldw	r2,-16(fp)
 c00556c:	10800044 	addi	r2,r2,1
 c005570:	e0bffc15 	stw	r2,-16(fp)
 c005574:	e0bffc17 	ldw	r2,-16(fp)
 c005578:	10800810 	cmplti	r2,r2,32
 c00557c:	103fe01e 	bne	r2,zero,c005500 <__alt_data_end+0xfc005500>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c005580:	e0bffd17 	ldw	r2,-12(fp)
}
 c005584:	e6ffff04 	addi	sp,fp,-4
 c005588:	dfc00217 	ldw	ra,8(sp)
 c00558c:	df000117 	ldw	fp,4(sp)
 c005590:	dc000017 	ldw	r16,0(sp)
 c005594:	dec00304 	addi	sp,sp,12
 c005598:	f800283a 	ret

0c00559c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c00559c:	defffe04 	addi	sp,sp,-8
 c0055a0:	df000115 	stw	fp,4(sp)
 c0055a4:	df000104 	addi	fp,sp,4
 c0055a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c0055ac:	e0bfff17 	ldw	r2,-4(fp)
 c0055b0:	10bffe84 	addi	r2,r2,-6
 c0055b4:	10c00428 	cmpgeui	r3,r2,16
 c0055b8:	18001a1e 	bne	r3,zero,c005624 <alt_exception_cause_generated_bad_addr+0x88>
 c0055bc:	100690ba 	slli	r3,r2,2
 c0055c0:	00830034 	movhi	r2,3072
 c0055c4:	10957504 	addi	r2,r2,21972
 c0055c8:	1885883a 	add	r2,r3,r2
 c0055cc:	10800017 	ldw	r2,0(r2)
 c0055d0:	1000683a 	jmp	r2
 c0055d4:	0c005614 	ori	r16,at,344
 c0055d8:	0c005614 	ori	r16,at,344
 c0055dc:	0c005624 	muli	r16,at,344
 c0055e0:	0c005624 	muli	r16,at,344
 c0055e4:	0c005624 	muli	r16,at,344
 c0055e8:	0c005614 	ori	r16,at,344
 c0055ec:	0c00561c 	xori	r16,at,344
 c0055f0:	0c005624 	muli	r16,at,344
 c0055f4:	0c005614 	ori	r16,at,344
 c0055f8:	0c005614 	ori	r16,at,344
 c0055fc:	0c005624 	muli	r16,at,344
 c005600:	0c005614 	ori	r16,at,344
 c005604:	0c00561c 	xori	r16,at,344
 c005608:	0c005624 	muli	r16,at,344
 c00560c:	0c005624 	muli	r16,at,344
 c005610:	0c005614 	ori	r16,at,344
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c005614:	00800044 	movi	r2,1
 c005618:	00000306 	br	c005628 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c00561c:	0005883a 	mov	r2,zero
 c005620:	00000106 	br	c005628 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c005624:	0005883a 	mov	r2,zero
  }
}
 c005628:	e037883a 	mov	sp,fp
 c00562c:	df000017 	ldw	fp,0(sp)
 c005630:	dec00104 	addi	sp,sp,4
 c005634:	f800283a 	ret

0c005638 <atexit>:
 c005638:	200b883a 	mov	r5,r4
 c00563c:	000f883a 	mov	r7,zero
 c005640:	000d883a 	mov	r6,zero
 c005644:	0009883a 	mov	r4,zero
 c005648:	c0057001 	jmpi	c005700 <__register_exitproc>

0c00564c <exit>:
 c00564c:	defffe04 	addi	sp,sp,-8
 c005650:	000b883a 	mov	r5,zero
 c005654:	dc000015 	stw	r16,0(sp)
 c005658:	dfc00115 	stw	ra,4(sp)
 c00565c:	2021883a 	mov	r16,r4
 c005660:	c0058180 	call	c005818 <__call_exitprocs>
 c005664:	00830034 	movhi	r2,3072
 c005668:	109d1104 	addi	r2,r2,29764
 c00566c:	11000017 	ldw	r4,0(r2)
 c005670:	20800f17 	ldw	r2,60(r4)
 c005674:	10000126 	beq	r2,zero,c00567c <exit+0x30>
 c005678:	103ee83a 	callr	r2
 c00567c:	8009883a 	mov	r4,r16
 c005680:	c0059980 	call	c005998 <_exit>

0c005684 <memcmp>:
 c005684:	01c000c4 	movi	r7,3
 c005688:	3980192e 	bgeu	r7,r6,c0056f0 <memcmp+0x6c>
 c00568c:	2144b03a 	or	r2,r4,r5
 c005690:	11c4703a 	and	r2,r2,r7
 c005694:	10000f26 	beq	r2,zero,c0056d4 <memcmp+0x50>
 c005698:	20800003 	ldbu	r2,0(r4)
 c00569c:	28c00003 	ldbu	r3,0(r5)
 c0056a0:	10c0151e 	bne	r2,r3,c0056f8 <memcmp+0x74>
 c0056a4:	31bfff84 	addi	r6,r6,-2
 c0056a8:	01ffffc4 	movi	r7,-1
 c0056ac:	00000406 	br	c0056c0 <memcmp+0x3c>
 c0056b0:	20800003 	ldbu	r2,0(r4)
 c0056b4:	28c00003 	ldbu	r3,0(r5)
 c0056b8:	31bfffc4 	addi	r6,r6,-1
 c0056bc:	10c00e1e 	bne	r2,r3,c0056f8 <memcmp+0x74>
 c0056c0:	21000044 	addi	r4,r4,1
 c0056c4:	29400044 	addi	r5,r5,1
 c0056c8:	31fff91e 	bne	r6,r7,c0056b0 <__alt_data_end+0xfc0056b0>
 c0056cc:	0005883a 	mov	r2,zero
 c0056d0:	f800283a 	ret
 c0056d4:	20c00017 	ldw	r3,0(r4)
 c0056d8:	28800017 	ldw	r2,0(r5)
 c0056dc:	18bfee1e 	bne	r3,r2,c005698 <__alt_data_end+0xfc005698>
 c0056e0:	31bfff04 	addi	r6,r6,-4
 c0056e4:	21000104 	addi	r4,r4,4
 c0056e8:	29400104 	addi	r5,r5,4
 c0056ec:	39bff936 	bltu	r7,r6,c0056d4 <__alt_data_end+0xfc0056d4>
 c0056f0:	303fe91e 	bne	r6,zero,c005698 <__alt_data_end+0xfc005698>
 c0056f4:	003ff506 	br	c0056cc <__alt_data_end+0xfc0056cc>
 c0056f8:	10c5c83a 	sub	r2,r2,r3
 c0056fc:	f800283a 	ret

0c005700 <__register_exitproc>:
 c005700:	defffa04 	addi	sp,sp,-24
 c005704:	dc000315 	stw	r16,12(sp)
 c005708:	04030034 	movhi	r16,3072
 c00570c:	841d1104 	addi	r16,r16,29764
 c005710:	80c00017 	ldw	r3,0(r16)
 c005714:	dc400415 	stw	r17,16(sp)
 c005718:	dfc00515 	stw	ra,20(sp)
 c00571c:	18805217 	ldw	r2,328(r3)
 c005720:	2023883a 	mov	r17,r4
 c005724:	10003726 	beq	r2,zero,c005804 <__register_exitproc+0x104>
 c005728:	10c00117 	ldw	r3,4(r2)
 c00572c:	010007c4 	movi	r4,31
 c005730:	20c00e16 	blt	r4,r3,c00576c <__register_exitproc+0x6c>
 c005734:	1a000044 	addi	r8,r3,1
 c005738:	8800221e 	bne	r17,zero,c0057c4 <__register_exitproc+0xc4>
 c00573c:	18c00084 	addi	r3,r3,2
 c005740:	18c7883a 	add	r3,r3,r3
 c005744:	18c7883a 	add	r3,r3,r3
 c005748:	12000115 	stw	r8,4(r2)
 c00574c:	10c7883a 	add	r3,r2,r3
 c005750:	19400015 	stw	r5,0(r3)
 c005754:	0005883a 	mov	r2,zero
 c005758:	dfc00517 	ldw	ra,20(sp)
 c00575c:	dc400417 	ldw	r17,16(sp)
 c005760:	dc000317 	ldw	r16,12(sp)
 c005764:	dec00604 	addi	sp,sp,24
 c005768:	f800283a 	ret
 c00576c:	00800034 	movhi	r2,0
 c005770:	10800004 	addi	r2,r2,0
 c005774:	10002626 	beq	r2,zero,c005810 <__register_exitproc+0x110>
 c005778:	01006404 	movi	r4,400
 c00577c:	d9400015 	stw	r5,0(sp)
 c005780:	d9800115 	stw	r6,4(sp)
 c005784:	d9c00215 	stw	r7,8(sp)
 c005788:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c00578c:	d9400017 	ldw	r5,0(sp)
 c005790:	d9800117 	ldw	r6,4(sp)
 c005794:	d9c00217 	ldw	r7,8(sp)
 c005798:	10001d26 	beq	r2,zero,c005810 <__register_exitproc+0x110>
 c00579c:	81000017 	ldw	r4,0(r16)
 c0057a0:	10000115 	stw	zero,4(r2)
 c0057a4:	02000044 	movi	r8,1
 c0057a8:	22405217 	ldw	r9,328(r4)
 c0057ac:	0007883a 	mov	r3,zero
 c0057b0:	12400015 	stw	r9,0(r2)
 c0057b4:	20805215 	stw	r2,328(r4)
 c0057b8:	10006215 	stw	zero,392(r2)
 c0057bc:	10006315 	stw	zero,396(r2)
 c0057c0:	883fde26 	beq	r17,zero,c00573c <__alt_data_end+0xfc00573c>
 c0057c4:	18c9883a 	add	r4,r3,r3
 c0057c8:	2109883a 	add	r4,r4,r4
 c0057cc:	1109883a 	add	r4,r2,r4
 c0057d0:	21802215 	stw	r6,136(r4)
 c0057d4:	01800044 	movi	r6,1
 c0057d8:	12406217 	ldw	r9,392(r2)
 c0057dc:	30cc983a 	sll	r6,r6,r3
 c0057e0:	4992b03a 	or	r9,r9,r6
 c0057e4:	12406215 	stw	r9,392(r2)
 c0057e8:	21c04215 	stw	r7,264(r4)
 c0057ec:	01000084 	movi	r4,2
 c0057f0:	893fd21e 	bne	r17,r4,c00573c <__alt_data_end+0xfc00573c>
 c0057f4:	11006317 	ldw	r4,396(r2)
 c0057f8:	218cb03a 	or	r6,r4,r6
 c0057fc:	11806315 	stw	r6,396(r2)
 c005800:	003fce06 	br	c00573c <__alt_data_end+0xfc00573c>
 c005804:	18805304 	addi	r2,r3,332
 c005808:	18805215 	stw	r2,328(r3)
 c00580c:	003fc606 	br	c005728 <__alt_data_end+0xfc005728>
 c005810:	00bfffc4 	movi	r2,-1
 c005814:	003fd006 	br	c005758 <__alt_data_end+0xfc005758>

0c005818 <__call_exitprocs>:
 c005818:	defff504 	addi	sp,sp,-44
 c00581c:	df000915 	stw	fp,36(sp)
 c005820:	dd400615 	stw	r21,24(sp)
 c005824:	dc800315 	stw	r18,12(sp)
 c005828:	dfc00a15 	stw	ra,40(sp)
 c00582c:	ddc00815 	stw	r23,32(sp)
 c005830:	dd800715 	stw	r22,28(sp)
 c005834:	dd000515 	stw	r20,20(sp)
 c005838:	dcc00415 	stw	r19,16(sp)
 c00583c:	dc400215 	stw	r17,8(sp)
 c005840:	dc000115 	stw	r16,4(sp)
 c005844:	d9000015 	stw	r4,0(sp)
 c005848:	2839883a 	mov	fp,r5
 c00584c:	04800044 	movi	r18,1
 c005850:	057fffc4 	movi	r21,-1
 c005854:	00830034 	movhi	r2,3072
 c005858:	109d1104 	addi	r2,r2,29764
 c00585c:	12000017 	ldw	r8,0(r2)
 c005860:	45005217 	ldw	r20,328(r8)
 c005864:	44c05204 	addi	r19,r8,328
 c005868:	a0001c26 	beq	r20,zero,c0058dc <__call_exitprocs+0xc4>
 c00586c:	a0800117 	ldw	r2,4(r20)
 c005870:	15ffffc4 	addi	r23,r2,-1
 c005874:	b8000d16 	blt	r23,zero,c0058ac <__call_exitprocs+0x94>
 c005878:	14000044 	addi	r16,r2,1
 c00587c:	8421883a 	add	r16,r16,r16
 c005880:	8421883a 	add	r16,r16,r16
 c005884:	84402004 	addi	r17,r16,128
 c005888:	a463883a 	add	r17,r20,r17
 c00588c:	a421883a 	add	r16,r20,r16
 c005890:	e0001e26 	beq	fp,zero,c00590c <__call_exitprocs+0xf4>
 c005894:	80804017 	ldw	r2,256(r16)
 c005898:	e0801c26 	beq	fp,r2,c00590c <__call_exitprocs+0xf4>
 c00589c:	bdffffc4 	addi	r23,r23,-1
 c0058a0:	843fff04 	addi	r16,r16,-4
 c0058a4:	8c7fff04 	addi	r17,r17,-4
 c0058a8:	bd7ff91e 	bne	r23,r21,c005890 <__alt_data_end+0xfc005890>
 c0058ac:	00800034 	movhi	r2,0
 c0058b0:	10800004 	addi	r2,r2,0
 c0058b4:	10000926 	beq	r2,zero,c0058dc <__call_exitprocs+0xc4>
 c0058b8:	a0800117 	ldw	r2,4(r20)
 c0058bc:	1000301e 	bne	r2,zero,c005980 <__call_exitprocs+0x168>
 c0058c0:	a0800017 	ldw	r2,0(r20)
 c0058c4:	10003226 	beq	r2,zero,c005990 <__call_exitprocs+0x178>
 c0058c8:	a009883a 	mov	r4,r20
 c0058cc:	98800015 	stw	r2,0(r19)
 c0058d0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c0058d4:	9d000017 	ldw	r20,0(r19)
 c0058d8:	a03fe41e 	bne	r20,zero,c00586c <__alt_data_end+0xfc00586c>
 c0058dc:	dfc00a17 	ldw	ra,40(sp)
 c0058e0:	df000917 	ldw	fp,36(sp)
 c0058e4:	ddc00817 	ldw	r23,32(sp)
 c0058e8:	dd800717 	ldw	r22,28(sp)
 c0058ec:	dd400617 	ldw	r21,24(sp)
 c0058f0:	dd000517 	ldw	r20,20(sp)
 c0058f4:	dcc00417 	ldw	r19,16(sp)
 c0058f8:	dc800317 	ldw	r18,12(sp)
 c0058fc:	dc400217 	ldw	r17,8(sp)
 c005900:	dc000117 	ldw	r16,4(sp)
 c005904:	dec00b04 	addi	sp,sp,44
 c005908:	f800283a 	ret
 c00590c:	a0800117 	ldw	r2,4(r20)
 c005910:	80c00017 	ldw	r3,0(r16)
 c005914:	10bfffc4 	addi	r2,r2,-1
 c005918:	15c01426 	beq	r2,r23,c00596c <__call_exitprocs+0x154>
 c00591c:	80000015 	stw	zero,0(r16)
 c005920:	183fde26 	beq	r3,zero,c00589c <__alt_data_end+0xfc00589c>
 c005924:	95c8983a 	sll	r4,r18,r23
 c005928:	a0806217 	ldw	r2,392(r20)
 c00592c:	a5800117 	ldw	r22,4(r20)
 c005930:	2084703a 	and	r2,r4,r2
 c005934:	10000b26 	beq	r2,zero,c005964 <__call_exitprocs+0x14c>
 c005938:	a0806317 	ldw	r2,396(r20)
 c00593c:	2088703a 	and	r4,r4,r2
 c005940:	20000c1e 	bne	r4,zero,c005974 <__call_exitprocs+0x15c>
 c005944:	89400017 	ldw	r5,0(r17)
 c005948:	d9000017 	ldw	r4,0(sp)
 c00594c:	183ee83a 	callr	r3
 c005950:	a0800117 	ldw	r2,4(r20)
 c005954:	15bfbf1e 	bne	r2,r22,c005854 <__alt_data_end+0xfc005854>
 c005958:	98800017 	ldw	r2,0(r19)
 c00595c:	153fcf26 	beq	r2,r20,c00589c <__alt_data_end+0xfc00589c>
 c005960:	003fbc06 	br	c005854 <__alt_data_end+0xfc005854>
 c005964:	183ee83a 	callr	r3
 c005968:	003ff906 	br	c005950 <__alt_data_end+0xfc005950>
 c00596c:	a5c00115 	stw	r23,4(r20)
 c005970:	003feb06 	br	c005920 <__alt_data_end+0xfc005920>
 c005974:	89000017 	ldw	r4,0(r17)
 c005978:	183ee83a 	callr	r3
 c00597c:	003ff406 	br	c005950 <__alt_data_end+0xfc005950>
 c005980:	a0800017 	ldw	r2,0(r20)
 c005984:	a027883a 	mov	r19,r20
 c005988:	1029883a 	mov	r20,r2
 c00598c:	003fb606 	br	c005868 <__alt_data_end+0xfc005868>
 c005990:	0005883a 	mov	r2,zero
 c005994:	003ffb06 	br	c005984 <__alt_data_end+0xfc005984>

0c005998 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c005998:	defffd04 	addi	sp,sp,-12
 c00599c:	df000215 	stw	fp,8(sp)
 c0059a0:	df000204 	addi	fp,sp,8
 c0059a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c0059a8:	0001883a 	nop
 c0059ac:	e0bfff17 	ldw	r2,-4(fp)
 c0059b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c0059b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c0059b8:	10000226 	beq	r2,zero,c0059c4 <_exit+0x2c>
    ALT_SIM_FAIL();
 c0059bc:	002af070 	cmpltui	zero,zero,43969
 c0059c0:	00000106 	br	c0059c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c0059c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c0059c8:	003fff06 	br	c0059c8 <__alt_data_end+0xfc0059c8>
